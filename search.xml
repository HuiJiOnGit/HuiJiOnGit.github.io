<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一种基于EPPlus封装的可以构建复杂内容Excel的方式</title>
      <link href="2023/12/16/study-notes-others-2023-12-16-yi-chong-ji-yu-epplus-feng-zhuang-de-ke-yi-gou-jian-fu-za-nei-rong-excel-de-fang-shi/"/>
      <url>2023/12/16/study-notes-others-2023-12-16-yi-chong-ji-yu-epplus-feng-zhuang-de-ke-yi-gou-jian-fu-za-nei-rong-excel-de-fang-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>客户需求一个复杂内容的 Excel 的导出, 涉及到表头复杂, 多行多列, 存在多个行合并,列合并,导出图片等操作</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><code>Epplus</code>支持通过索引和 Excel 的位置也就是<code>A1</code>,<code>B2</code>这种方式来选择一个<code>ExcelRange</code>, 通过这种它提供多样的功能,基于此封装一个可以构建复杂表格的方案</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelCell</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    提供多种构造函数,支持根据索引和地址的方式    */</span>    <span class="token keyword">public</span> <span class="token function">ExcelCell</span><span class="token punctuation">(</span><span class="token keyword">string</span> adress<span class="token punctuation">,</span> <span class="token keyword">string</span> <span class="token keyword">value</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Adress <span class="token operator">=</span> adress<span class="token punctuation">;</span>        Value <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ExcelCell</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> colIndex<span class="token punctuation">,</span> <span class="token keyword">string</span> <span class="token keyword">value</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Adress <span class="token operator">=</span> <span class="token function">GetCellName</span><span class="token punctuation">(</span>rowIndex<span class="token punctuation">,</span> colIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        Value <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 单元格地址A1,B2等</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">string</span> Adress <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 单元格值</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">string</span> Value <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 单元格合并区域,示例A1:B2，为空表示不合并</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">string</span> MergeArea <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> MergeMode MergeMode <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ExcelHorizontalAlignment HorizontalAlignment <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> ExcelHorizontalAlignment<span class="token punctuation">.</span>Center<span class="token punctuation">;</span>    <span class="token keyword">public</span> ExcelVerticalAlignment VerticalAlignment <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> ExcelVerticalAlignment<span class="token punctuation">.</span>Center<span class="token punctuation">;</span>    <span class="token keyword">public</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color BgColor <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color<span class="token punctuation">.</span><span class="token function">FromArgb</span><span class="token punctuation">(</span><span class="token number">166</span><span class="token punctuation">,</span> <span class="token number">166</span><span class="token punctuation">,</span> <span class="token number">166</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color FontColor <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">bool</span> IsBold <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ExcelCell <span class="token function">RowMerge</span><span class="token punctuation">(</span><span class="token keyword">int</span> merge<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MergeArea <span class="token operator">=</span> <span class="token function">GetMergedCellRange</span><span class="token punctuation">(</span>merge<span class="token punctuation">,</span> Adress<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MergeMode <span class="token operator">=</span> MergeMode<span class="token punctuation">.</span>Row<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ExcelCell <span class="token function">ColMerge</span><span class="token punctuation">(</span><span class="token keyword">int</span> merge<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MergeArea <span class="token operator">=</span> <span class="token function">GetMergedCellRange</span><span class="token punctuation">(</span>merge<span class="token punctuation">,</span> Adress<span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MergeMode <span class="token operator">=</span> MergeMode<span class="token punctuation">.</span>Col<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ExcelCell <span class="token function">CrossMerge</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowMerge<span class="token punctuation">,</span> <span class="token keyword">int</span> colMerge<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MergeArea <span class="token operator">=</span> <span class="token function">GetMergedCellRange</span><span class="token punctuation">(</span>rowMerge<span class="token punctuation">,</span> colMerge<span class="token punctuation">,</span> Adress<span class="token punctuation">)</span><span class="token punctuation">;</span>        MergeMode <span class="token operator">=</span> MergeMode<span class="token punctuation">.</span>Cross<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ExcelCell <span class="token function">SetBgColor</span><span class="token punctuation">(</span><span class="token keyword">string</span> color<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        BgColor <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>ColorTranslator<span class="token punctuation">.</span><span class="token function">FromHtml</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ExcelCell <span class="token function">SetBgColor</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color color<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        BgColor <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ExcelCell <span class="token function">SetFontColor</span><span class="token punctuation">(</span><span class="token keyword">string</span> color<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        FontColor <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>ColorTranslator<span class="token punctuation">.</span><span class="token function">FromHtml</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ExcelCell <span class="token function">SetFontColor</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color color<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        FontColor <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ExcelCell <span class="token function">SetFontBold</span><span class="token punctuation">(</span><span class="token keyword">bool</span> bold <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        IsBold <span class="token operator">=</span> bold<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ExcelCell <span class="token function">SetHorizontalAlignment</span><span class="token punctuation">(</span>ExcelHorizontalAlignment horizontalAlignment<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        HorizontalAlignment <span class="token operator">=</span> horizontalAlignment<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ExcelCell <span class="token function">SetVerticalAlignment</span><span class="token punctuation">(</span>ExcelVerticalAlignment verticalAlignment<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        VerticalAlignment <span class="token operator">=</span> verticalAlignment<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 精髓零: 根据行列索引获取excel的位置,感谢ChatGPT</span>    <span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">string</span> <span class="token function">GetCellName</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> colIndex<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">string</span> cellName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>colIndex <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> remainder <span class="token operator">=</span> <span class="token punctuation">(</span>colIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">;</span>            cellName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">+</span> remainder<span class="token punctuation">)</span> <span class="token operator">+</span> cellName<span class="token punctuation">;</span>            colIndex <span class="token operator">=</span> <span class="token punctuation">(</span>colIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">26</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cellName <span class="token operator">+</span> rowIndex<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 精髓一: 根据excel地址转换成行索引和列索引,感谢ChatGPT</span>    <span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">GetRowIndexAndColIndex</span><span class="token punctuation">(</span><span class="token keyword">string</span> cellName<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">int</span> rowIndex<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">int</span> colIndex<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Regex<span class="token punctuation">.</span><span class="token function">IsMatch</span><span class="token punctuation">(</span>cellName<span class="token punctuation">,</span> <span class="token string">@"[A-Z]+\d+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">string</span> colPart <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>cellName<span class="token punctuation">,</span> <span class="token string">@"[A-Z]+"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>            <span class="token keyword">string</span> rowPart <span class="token operator">=</span> Regex<span class="token punctuation">.</span><span class="token function">Match</span><span class="token punctuation">(</span>cellName<span class="token punctuation">,</span> <span class="token string">@"\d+"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">;</span>            colIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token keyword">in</span> colPart<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                colIndex <span class="token operator">=</span> colIndex <span class="token operator">*</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">-</span> <span class="token string">'A'</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            rowIndex <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>rowPart<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token string">"Invalid cell name format."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 精髓二: 获取合并后的范围,感谢ChatGPT</span>    <span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">string</span> <span class="token function">GetMergedCellRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">string</span> startCellName<span class="token punctuation">,</span> <span class="token keyword">bool</span> mergeMode<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token string">"Count must be greater than 0."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">GetRowIndexAndColIndex</span><span class="token punctuation">(</span>startCellName<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">int</span> rowIndex<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">int</span> colIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mergeMode <span class="token operator">==</span> <span class="token keyword">true</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> endRowIndex <span class="token operator">=</span> rowIndex <span class="token operator">+</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">string</span> endCellName <span class="token operator">=</span> <span class="token function">GetCellName</span><span class="token punctuation">(</span>endRowIndex<span class="token punctuation">,</span> colIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> startCellName <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> endCellName<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> endColIndex <span class="token operator">=</span> colIndex <span class="token operator">+</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">string</span> endCellName <span class="token operator">=</span> <span class="token function">GetCellName</span><span class="token punctuation">(</span>rowIndex<span class="token punctuation">,</span> endColIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> startCellName <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> endCellName<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 精髓二: 获取合并后的范围,感谢ChatGPT</span>    <span class="token keyword">static</span> <span class="token keyword">string</span> <span class="token function">GetMergedCellRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowCount<span class="token punctuation">,</span> <span class="token keyword">int</span> colCount<span class="token punctuation">,</span> <span class="token keyword">string</span> startCellName<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rowCount <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> colCount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentException</span><span class="token punctuation">(</span><span class="token string">"Row count and column count must be greater than 0."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">GetRowIndexAndColIndex</span><span class="token punctuation">(</span>startCellName<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">int</span> rowIndex<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">int</span> colIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> endRowIndex <span class="token operator">=</span> rowIndex <span class="token operator">+</span> rowCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> endColIndex <span class="token operator">=</span> colIndex <span class="token operator">+</span> colCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">string</span> endCellName <span class="token operator">=</span> <span class="token function">GetCellName</span><span class="token punctuation">(</span>endRowIndex<span class="token punctuation">,</span> endColIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> startCellName <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> endCellName<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">enum</span> MergeMode<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    None <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    Row <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    Col <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>    Cross <span class="token operator">=</span> Row <span class="token operator">|</span> Col<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelHeaderArea</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>ExcelCell<span class="token operator">></span> Headers <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> ColumnCount <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> RowCount <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">ExportExcelSingleSheet</span><span class="token punctuation">(</span>DataTable dataSource<span class="token punctuation">,</span> ExcelHeaderArea headerArea<span class="token punctuation">,</span> <span class="token keyword">string</span> sheetName<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">using</span> ExcelPackage package <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// add sheet name</span>    ExcelWorksheet worksheet <span class="token operator">=</span> package<span class="token punctuation">.</span>Workbook<span class="token punctuation">.</span>Worksheets<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>$<span class="token string">"&amp;#123;sheetName&amp;#125;Data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DrawTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DrawHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span>headerArea<span class="token punctuation">.</span>RowCount <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">LoadFromDataTable</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置自动列宽</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> dataSource<span class="token punctuation">.</span>Columns<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        worksheet<span class="token punctuation">.</span><span class="token function">Column</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AutoFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        worksheet<span class="token punctuation">.</span><span class="token function">Column</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Style<span class="token punctuation">.</span>WrapText <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">DrawBorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> package<span class="token punctuation">.</span><span class="token function">GetAsByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">DrawBorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> totalRowQuantity <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> headerArea<span class="token punctuation">.</span>RowCount <span class="token operator">+</span> dataSource<span class="token punctuation">.</span>Rows<span class="token punctuation">.</span>Count<span class="token punctuation">;</span>        <span class="token keyword">var</span> modelTable <span class="token operator">=</span> worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> totalRowQuantity<span class="token punctuation">,</span> dataSource<span class="token punctuation">.</span>Columns<span class="token punctuation">.</span>Count<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//modelTable.Style.Border.BorderAround(ExcelBorderStyle.Thin, System.Drawing.Color.Black);</span>        modelTable<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Border<span class="token punctuation">.</span>Top<span class="token punctuation">.</span>Style <span class="token operator">=</span> ExcelBorderStyle<span class="token punctuation">.</span>Thin<span class="token punctuation">;</span>        modelTable<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Border<span class="token punctuation">.</span>Bottom<span class="token punctuation">.</span>Style <span class="token operator">=</span> ExcelBorderStyle<span class="token punctuation">.</span>Thin<span class="token punctuation">;</span>        modelTable<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Border<span class="token punctuation">.</span>Left<span class="token punctuation">.</span>Style <span class="token operator">=</span> ExcelBorderStyle<span class="token punctuation">.</span>Thin<span class="token punctuation">;</span>        modelTable<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Border<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Style <span class="token operator">=</span> ExcelBorderStyle<span class="token punctuation">.</span>Thin<span class="token punctuation">;</span>        modelTable<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Border<span class="token punctuation">.</span>Top<span class="token punctuation">.</span>Color<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span>        modelTable<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Border<span class="token punctuation">.</span>Bottom<span class="token punctuation">.</span>Color<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span>        modelTable<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Border<span class="token punctuation">.</span>Left<span class="token punctuation">.</span>Color<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span>        modelTable<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Border<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Color<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">DrawTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ExcelRange excelRange <span class="token operator">=</span> worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> dataSource<span class="token punctuation">.</span>Columns<span class="token punctuation">.</span>Count<span class="token punctuation">]</span><span class="token punctuation">;</span>        excelRange<span class="token punctuation">.</span>Merge <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        excelRange<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Font<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        excelRange<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>VerticalAlignment <span class="token operator">=</span> ExcelVerticalAlignment<span class="token punctuation">.</span>Center<span class="token punctuation">;</span>        excelRange<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>HorizontalAlignment <span class="token operator">=</span> ExcelHorizontalAlignment<span class="token punctuation">.</span>Center<span class="token punctuation">;</span>        excelRange<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>WrapText <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        excelRange<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>ShrinkToFit <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        excelRange<span class="token punctuation">.</span>Value <span class="token operator">=</span> sheetName<span class="token punctuation">;</span>        worksheet<span class="token punctuation">.</span><span class="token function">Row</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Height <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">DrawHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> headerArea<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> header <span class="token operator">=</span> headerArea<span class="token punctuation">.</span>Headers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span>header<span class="token punctuation">.</span>Adress<span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> header<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>MergeArea<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span>header<span class="token punctuation">.</span>MergeArea<span class="token punctuation">]</span><span class="token punctuation">.</span>Merge <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span>header<span class="token punctuation">.</span>Adress<span class="token punctuation">]</span><span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Font<span class="token punctuation">.</span>Color<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>White<span class="token punctuation">)</span><span class="token punctuation">;</span>            worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span>header<span class="token punctuation">.</span>Adress<span class="token punctuation">]</span><span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Font<span class="token punctuation">.</span>Bold <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>            worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span>header<span class="token punctuation">.</span>Adress<span class="token punctuation">]</span><span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Fill<span class="token punctuation">.</span>PatternType <span class="token operator">=</span> OfficeOpenXml<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>ExcelFillStyle<span class="token punctuation">.</span>Solid<span class="token punctuation">;</span>            worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span>header<span class="token punctuation">.</span>Adress<span class="token punctuation">]</span><span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Fill<span class="token punctuation">.</span>BackgroundColor<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>ColorTranslator<span class="token punctuation">.</span><span class="token function">FromHtml</span><span class="token punctuation">(</span><span class="token string">"#1fb5ad"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span>header<span class="token punctuation">.</span>Adress<span class="token punctuation">]</span><span class="token punctuation">.</span>Style<span class="token punctuation">.</span>HorizontalAlignment <span class="token operator">=</span> header<span class="token punctuation">.</span>HorizontalAlignment<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//水平居中对齐</span>            worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span>header<span class="token punctuation">.</span>Adress<span class="token punctuation">]</span><span class="token punctuation">.</span>Style<span class="token punctuation">.</span>VerticalAlignment <span class="token operator">=</span> header<span class="token punctuation">.</span>VerticalAlignment<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//垂直居中对齐</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>最精髓的已经在代码中标出, 比如简单的excel,可以直接定义<code>A1</code>,<code>A2</code>的显示内容,不过一般都是通过索引来操作</p><p>然后通过<code>ExportExcelSingleSheet</code>方法,即可导出复杂内容的Excel</p><p>对比网上那堆你复制我我复制的Epplus的封装,随便举个<a href="https://www.cnblogs.com/jiyuwu/p/11820783.html">例子</a>,有巨大的优势.</p><ol><li><p>这种封装方式并不依赖<code>Epplus</code>本身, 只要你的Excel导出类库支持Excel地址或索引导出, 也就是重新实现一次<code>ExportExcelSingleSheet</code>方法而已.</p><p>  甚至,对比网上一大推使用xxxHelper封装,我们更应该依赖抽象,而不是具体内容, 比如我们定义<code>IExcelExporter</code>接口, 在接口里面定义导出方法</p><p> 就可以做到面向抽象,而不是直接面对底层类库</p></li><li><p>这个类型提供了基础的构建能力,如果需要更多丰富内容的导出,我推荐使用构建者的模式,基于<code>ExcelCell</code>进行更丰富的组合和封装, 不过这个需要导入图片, 对低层类库有强依赖关系,不利于我们基于抽象来封装, 不过也不是不行, 仅导出文本类型,就完全不需要知道底层是什么, 倒是这里导出了图片, 依赖了<code>Worksheet.Drawings.AddPicture</code>这个<code>API</code></p><p> 但是我们也能对此进行封装, 我可以在<code>ExcelCell</code>中添加图片类型,PS:在这里呼吁,不要使用<code>System.Drawing.Common</code>下的图片定义,在<code>Linux</code>下支持非常垃圾, 可以考虑<code>Stream</code>作为参数, 传入图片内容, 再使用底层的<code>API</code>来画图</p></li></ol><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">CompetingExcelBuilder</span> <span class="token punctuation">:</span> IDisposable<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">string</span> _sheetName <span class="token operator">=</span> <span class="token string">"竞品对比"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token keyword">int</span> _columnQuantity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> _rowIndex <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> _columnIndex <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> _colEndIndex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">string</span> _tempFirstTitle<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token keyword">double</span> _imagePixelRatio <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">.</span>7924d<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token keyword">double</span> _lastCharRowRatio <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">.</span>0d<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token keyword">int</span> _imageQuality <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CompetingExcelBuilder</span><span class="token punctuation">(</span><span class="token keyword">int</span> columnQuantity<span class="token punctuation">,</span> ILogger<span class="token operator">&lt;</span>CompetingExcelBuilder<span class="token operator">></span> logger<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Package <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExcelPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Worksheet <span class="token operator">=</span> Package<span class="token punctuation">.</span>Workbook<span class="token punctuation">.</span>Worksheets<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Name<span class="token punctuation">:</span> $<span class="token string">"&amp;#123;_sheetName&amp;#125;Data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _columnQuantity <span class="token operator">=</span> columnQuantity<span class="token punctuation">;</span>        _colEndIndex <span class="token operator">=</span> _columnIndex <span class="token operator">+</span> columnQuantity <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        Logger <span class="token operator">=</span> logger<span class="token punctuation">;</span>        ColumnWidthMap <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>columnQuantity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> _columnIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> _colEndIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ColumnWidthMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> 20d<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> ExcelPackage Package <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> ExcelWorksheet Worksheet <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> List<span class="token operator">&lt;</span>ExcelCell<span class="token operator">></span> Labels <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>ExcelCell<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> Dictionary<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> RowLabelIndexMap <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color TitleFontColor <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">;</span>    <span class="token keyword">public</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color TitleBgColor <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color<span class="token punctuation">.</span><span class="token function">FromArgb</span><span class="token punctuation">(</span><span class="token number">166</span><span class="token punctuation">,</span> <span class="token number">166</span><span class="token punctuation">,</span> <span class="token number">166</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color TitleBgColor2 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color<span class="token punctuation">.</span><span class="token function">FromArgb</span><span class="token punctuation">(</span><span class="token number">217</span><span class="token punctuation">,</span> <span class="token number">217</span><span class="token punctuation">,</span> <span class="token number">217</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * DPI   Scale ColumnWidth  RowHeight    * 96dpi 100%  cw=(pix-5)/8 rh=pix*0.75    */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> DefaultShoeHeight <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> 100d<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//cell_h:3.52cm</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> DefaultChartHeight <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> 150d<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> DefaultDataWidth <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> 20d<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//cell_w:3.97cm</span>    <span class="token keyword">protected</span> Dictionary<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> ChartKeyRowIndexMap <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> Dictionary<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">></span> ColumnWidthMap <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> ILogger<span class="token operator">&lt;</span>CompetingExcelBuilder<span class="token operator">></span> Logger <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 构建内容</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddShoePic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//var arr = images.ToArray();</span>        Labels<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExcelCell</span><span class="token punctuation">(</span>_rowIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"鞋图"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CrossMerge</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Worksheet<span class="token punctuation">.</span><span class="token function">Row</span><span class="token punctuation">(</span>_rowIndex<span class="token punctuation">)</span><span class="token punctuation">.</span>Height <span class="token operator">=</span> DefaultShoeHeight<span class="token punctuation">;</span>        Worksheet<span class="token punctuation">.</span><span class="token function">Row</span><span class="token punctuation">(</span>_rowIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Height <span class="token operator">=</span> DefaultShoeHeight<span class="token punctuation">;</span>        Worksheet<span class="token punctuation">.</span><span class="token function">Row</span><span class="token punctuation">(</span>_rowIndex <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Height <span class="token operator">=</span> DefaultShoeHeight<span class="token punctuation">;</span>        Worksheet<span class="token punctuation">.</span><span class="token function">Row</span><span class="token punctuation">(</span>_rowIndex <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Height <span class="token operator">=</span> DefaultShoeHeight<span class="token punctuation">;</span>        _rowIndex <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddTitleAndLabel</span><span class="token punctuation">(</span><span class="token keyword">string</span> title<span class="token punctuation">,</span> IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> childrenLabels<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">AddFirstLevelTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> childrenLabel <span class="token keyword">in</span> childrenLabels<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Labels<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExcelCell</span><span class="token punctuation">(</span>_rowIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> childrenLabel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ColMerge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetFontBold</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RowLabelIndexMap<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>$<span class="token string">"&amp;#123;title&amp;#125;.&amp;#123;childrenLabel&amp;#125;"</span><span class="token punctuation">,</span> _rowIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            _rowIndex<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 生成左边一列行合并，右边列行合并的label</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="label">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;param name="childrenLabels">&lt;/param></span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddLabel</span><span class="token punctuation">(</span><span class="token keyword">string</span> label<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> childrenLabels<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Labels<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExcelCell</span><span class="token punctuation">(</span>_rowIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RowMerge</span><span class="token punctuation">(</span>childrenLabels<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetFontBold</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> childrenLabels<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Labels<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExcelCell</span><span class="token punctuation">(</span>_rowIndex <span class="token operator">+</span> j<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> childrenLabels<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ColMerge</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetFontBold</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RowLabelIndexMap<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>$<span class="token string">"&amp;#123;_tempFirstTitle&amp;#125;.&amp;#123;label&amp;#125;.&amp;#123;childrenLabels[j]&amp;#125;"</span><span class="token punctuation">,</span> _rowIndex <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        _rowIndex <span class="token operator">+</span><span class="token operator">=</span> childrenLabels<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 多个左边合并</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="labels">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;param name="childrenLabels">&lt;/param></span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddLabel</span><span class="token punctuation">(</span>IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> labels<span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> childrenLabels<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> label <span class="token keyword">in</span> labels<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">AddLabel</span><span class="token punctuation">(</span>label<span class="token punctuation">,</span> childrenLabels<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddFirstLevelTitle</span><span class="token punctuation">(</span><span class="token keyword">string</span> title<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Labels<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExcelCell</span><span class="token punctuation">(</span>_rowIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">ColMerge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">SetBgColor</span><span class="token punctuation">(</span>TitleBgColor<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">SetHorizontalAlignment</span><span class="token punctuation">(</span>OfficeOpenXml<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>ExcelHorizontalAlignment<span class="token punctuation">.</span>Left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetFontBold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Labels<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExcelCell</span><span class="token punctuation">(</span>_rowIndex<span class="token punctuation">,</span> _columnIndex<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ColMerge</span><span class="token punctuation">(</span>_columnQuantity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetBgColor</span><span class="token punctuation">(</span>TitleBgColor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _tempFirstTitle <span class="token operator">=</span> title<span class="token punctuation">;</span>        _rowIndex<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddSecondLevelTitle</span><span class="token punctuation">(</span><span class="token keyword">string</span> title<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Labels<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExcelCell</span><span class="token punctuation">(</span>_rowIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ColMerge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetBgColor</span><span class="token punctuation">(</span>TitleBgColor2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Labels<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExcelCell</span><span class="token punctuation">(</span>_rowIndex<span class="token punctuation">,</span> _columnIndex<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ColMerge</span><span class="token punctuation">(</span>_columnQuantity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetBgColor</span><span class="token punctuation">(</span>TitleBgColor2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        _rowIndex<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddPicRow</span><span class="token punctuation">(</span><span class="token keyword">string</span> label<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Labels<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExcelCell</span><span class="token punctuation">(</span>_rowIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ColMerge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Worksheet<span class="token punctuation">.</span><span class="token function">Row</span><span class="token punctuation">(</span>_rowIndex<span class="token punctuation">)</span><span class="token punctuation">.</span>Height <span class="token operator">=</span> DefaultShoeHeight<span class="token punctuation">;</span>        RowLabelIndexMap<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>$<span class="token string">"&amp;#123;_tempFirstTitle&amp;#125;.&amp;#123;label&amp;#125;"</span><span class="token punctuation">,</span> _rowIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        _rowIndex<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddSummary</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Labels<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExcelCell</span><span class="token punctuation">(</span>_rowIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"小结"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ColMerge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetFontBold</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RowLabelIndexMap<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>$<span class="token string">"&amp;#123;_tempFirstTitle&amp;#125;.小结"</span><span class="token punctuation">,</span> _rowIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        _rowIndex<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddChartRow</span><span class="token punctuation">(</span><span class="token keyword">string</span> label<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Labels<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExcelCell</span><span class="token punctuation">(</span>_rowIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ColMerge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetFontBold</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Labels<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExcelCell</span><span class="token punctuation">(</span>_rowIndex<span class="token punctuation">,</span> _columnIndex<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ColMerge</span><span class="token punctuation">(</span>_columnQuantity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetBgColor</span><span class="token punctuation">(</span><span class="token string">"#ffffff"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">string</span> key <span class="token operator">=</span> $<span class="token string">"&amp;#123;_tempFirstTitle&amp;#125;.&amp;#123;label&amp;#125;"</span><span class="token punctuation">;</span>        RowLabelIndexMap<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> _rowIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        _rowIndex<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddRowValue</span><span class="token punctuation">(</span><span class="token keyword">string</span> rowLabel<span class="token punctuation">,</span> IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> values<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>RowLabelIndexMap<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>rowLabel<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">int</span> rowIndex<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Logger<span class="token punctuation">.</span><span class="token function">LogDebug</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;label&amp;#125; No Found In RowLabelIndexMap"</span><span class="token punctuation">,</span> rowLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> _columnIndex<span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token keyword">value</span> <span class="token keyword">in</span> values<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span>rowIndex<span class="token punctuation">,</span> index<span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>            Worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span>_rowIndex<span class="token punctuation">,</span> index<span class="token punctuation">]</span><span class="token punctuation">.</span>Style<span class="token punctuation">.</span>WrapText <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AddPictures</span><span class="token punctuation">(</span><span class="token keyword">string</span> key<span class="token punctuation">,</span> IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> values<span class="token punctuation">,</span> <span class="token keyword">bool</span> setNullValueDefaultPicture <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rowIndex <span class="token operator">=</span> key <span class="token keyword">switch</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token string">"PicOuterWaist"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token string">"PicInnerWaist"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">,</span>            <span class="token string">"PicBotton"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">,</span>            <span class="token string">"PicInsole"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">,</span>            <span class="token string">"PicKeel"</span> <span class="token operator">=</span><span class="token operator">></span> RowLabelIndexMap<span class="token punctuation">.</span><span class="token function">GetOrDefault</span><span class="token punctuation">(</span><span class="token string">"底部龙骨解剖(mm).龙骨图"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            _ <span class="token operator">=</span><span class="token operator">></span> RowLabelIndexMap<span class="token punctuation">.</span><span class="token function">GetOrDefault</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rowIndex <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> columnIndex <span class="token operator">=</span> _columnIndex<span class="token punctuation">;</span>        <span class="token keyword">string</span> filePath<span class="token punctuation">,</span> noImageFilePath <span class="token operator">=</span> Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">GetCurrentDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"wwwroot"</span><span class="token punctuation">,</span> <span class="token string">"img"</span><span class="token punctuation">,</span> <span class="token string">"noimage.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> values<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>File<span class="token punctuation">.</span><span class="token function">Exists</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>setNullValueDefaultPicture<span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    filePath <span class="token operator">=</span> noImageFilePath<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    columnIndex<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                filePath <span class="token operator">=</span> item<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">using</span> ImageCompressResult compressResult <span class="token operator">=</span> <span class="token function">CompressImage</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> image <span class="token operator">=</span> System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Image<span class="token punctuation">.</span><span class="token function">FromStream</span><span class="token punctuation">(</span>compressResult<span class="token punctuation">.</span>Stream<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> picture <span class="token operator">=</span> Worksheet<span class="token punctuation">.</span>Drawings<span class="token punctuation">.</span><span class="token function">AddPicture</span><span class="token punctuation">(</span>$<span class="token string">"&amp;#123;key&amp;#125;_&amp;#123;columnIndex&amp;#125;"</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//p_w:20d 0.53cm p_h:100d 2.65cm</span>            picture<span class="token punctuation">.</span><span class="token function">SetSize</span><span class="token punctuation">(</span>compressResult<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> compressResult<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">;</span>            picture<span class="token punctuation">.</span><span class="token function">SetPosition</span><span class="token punctuation">(</span>rowIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> columnIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">SetColumMaxWidth</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">,</span> compressResult<span class="token punctuation">.</span>Width<span class="token punctuation">)</span><span class="token punctuation">;</span>            image<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Logger<span class="token punctuation">.</span><span class="token function">LogDebug</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;img&amp;#125;:CompressWidth:&amp;#123;width&amp;#125;,CompressHeigth:&amp;#123;height&amp;#125;"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> compressResult<span class="token punctuation">.</span>Width<span class="token punctuation">,</span> compressResult<span class="token punctuation">.</span>Height<span class="token punctuation">)</span><span class="token punctuation">;</span>            columnIndex<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ImageCompressResult <span class="token function">CompressImage</span><span class="token punctuation">(</span><span class="token keyword">string</span> filePath<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">using</span> ImageMagick<span class="token punctuation">.</span>MagickImage magick <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> sourceRatio <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Round</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>magick<span class="token punctuation">.</span>BaseWidth <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>magick<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> width <span class="token operator">=</span> DefaultShoeHeight <span class="token operator">*</span> sourceRatio<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">ImageMagickCompress</span><span class="token punctuation">(</span>magick<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>width<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>DefaultShoeHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ImageCompressResult <span class="token function">CompressImage</span><span class="token punctuation">(</span>Stream stream<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">using</span> ImageMagick<span class="token punctuation">.</span>MagickImage magick <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> sourceRatio <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">Round</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>magick<span class="token punctuation">.</span>Width <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>magick<span class="token punctuation">.</span>Height<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> width <span class="token operator">=</span> ColumnWidthMap<span class="token punctuation">.</span>Values<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> height <span class="token operator">=</span> width <span class="token operator">/</span> sourceRatio<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">ImageMagickCompress</span><span class="token punctuation">(</span>magick<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>width<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ImageCompressResult <span class="token function">ImageMagickCompress</span><span class="token punctuation">(</span>ImageMagick<span class="token punctuation">.</span>MagickImage magick<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        magick<span class="token punctuation">.</span>Quality <span class="token operator">=</span> _imageQuality<span class="token punctuation">;</span>        magick<span class="token punctuation">.</span><span class="token function">Resize</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>        MemoryStream memoryStream <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        magick<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>memoryStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImageCompressResult</span><span class="token punctuation">(</span>memoryStream<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">SetColumMaxWidth</span><span class="token punctuation">(</span><span class="token keyword">int</span> columnIndex<span class="token punctuation">,</span> <span class="token keyword">double</span> width<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ColumnWidthMap<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">var</span> maxWidth<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ColumnWidthMap<span class="token punctuation">[</span>columnIndex<span class="token punctuation">]</span> <span class="token operator">=</span> width <span class="token operator">></span> maxWidth <span class="token operator">?</span> width <span class="token punctuation">:</span> maxWidth<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ColumnWidthMap<span class="token punctuation">[</span>columnIndex<span class="token punctuation">]</span> <span class="token operator">=</span> width<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span> 构建内容</span>    <span class="token preprocessor property">#<span class="token directive keyword">region</span> 构建excel</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Worksheet<span class="token punctuation">.</span>Drawings<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Worksheet<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Package<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">DrawTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ExcelRange excelRange <span class="token operator">=</span> Worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> _colEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        excelRange<span class="token punctuation">.</span>Merge <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        excelRange<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Font<span class="token punctuation">.</span>Size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        excelRange<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>VerticalAlignment <span class="token operator">=</span> ExcelVerticalAlignment<span class="token punctuation">.</span>Center<span class="token punctuation">;</span>        excelRange<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>HorizontalAlignment <span class="token operator">=</span> ExcelHorizontalAlignment<span class="token punctuation">.</span>Center<span class="token punctuation">;</span>        excelRange<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>WrapText <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>        excelRange<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>ShrinkToFit <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        excelRange<span class="token punctuation">.</span>Value <span class="token operator">=</span> _sheetName<span class="token punctuation">;</span>        Worksheet<span class="token punctuation">.</span><span class="token function">Row</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Height <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">DrawBorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> totalRowQuantity <span class="token operator">=</span> _rowIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> modelTable <span class="token operator">=</span> Worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> totalRowQuantity<span class="token punctuation">,</span> _colEndIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        modelTable<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Border<span class="token punctuation">.</span>Top<span class="token punctuation">.</span>Style <span class="token operator">=</span> ExcelBorderStyle<span class="token punctuation">.</span>Thin<span class="token punctuation">;</span>        modelTable<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Border<span class="token punctuation">.</span>Bottom<span class="token punctuation">.</span>Style <span class="token operator">=</span> ExcelBorderStyle<span class="token punctuation">.</span>Thin<span class="token punctuation">;</span>        modelTable<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Border<span class="token punctuation">.</span>Left<span class="token punctuation">.</span>Style <span class="token operator">=</span> ExcelBorderStyle<span class="token punctuation">.</span>Thin<span class="token punctuation">;</span>        modelTable<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Border<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Style <span class="token operator">=</span> ExcelBorderStyle<span class="token punctuation">.</span>Thin<span class="token punctuation">;</span>        modelTable<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Border<span class="token punctuation">.</span>Top<span class="token punctuation">.</span>Color<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span>        modelTable<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Border<span class="token punctuation">.</span>Bottom<span class="token punctuation">.</span>Color<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span>        modelTable<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Border<span class="token punctuation">.</span>Left<span class="token punctuation">.</span>Color<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span>        modelTable<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Border<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Color<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">DrawTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Labels<span class="token punctuation">.</span>Count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> header <span class="token operator">=</span> Labels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            Worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span>header<span class="token punctuation">.</span>Adress<span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">=</span> header<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrEmpty</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>MergeArea<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span>header<span class="token punctuation">.</span>MergeArea<span class="token punctuation">]</span><span class="token punctuation">.</span>Merge <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            Worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span>header<span class="token punctuation">.</span>Adress<span class="token punctuation">]</span><span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Font<span class="token punctuation">.</span>Color<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>Drawing<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>Black<span class="token punctuation">)</span><span class="token punctuation">;</span>            Worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span>header<span class="token punctuation">.</span>Adress<span class="token punctuation">]</span><span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Font<span class="token punctuation">.</span>Bold <span class="token operator">=</span> header<span class="token punctuation">.</span>IsBold<span class="token punctuation">;</span>            Worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span>header<span class="token punctuation">.</span>Adress<span class="token punctuation">]</span><span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Fill<span class="token punctuation">.</span>PatternType <span class="token operator">=</span> OfficeOpenXml<span class="token punctuation">.</span>Style<span class="token punctuation">.</span>ExcelFillStyle<span class="token punctuation">.</span>Solid<span class="token punctuation">;</span>            Worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span>header<span class="token punctuation">.</span>Adress<span class="token punctuation">]</span><span class="token punctuation">.</span>Style<span class="token punctuation">.</span>Fill<span class="token punctuation">.</span>BackgroundColor<span class="token punctuation">.</span><span class="token function">SetColor</span><span class="token punctuation">(</span>header<span class="token punctuation">.</span>BgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>            Worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span>header<span class="token punctuation">.</span>Adress<span class="token punctuation">]</span><span class="token punctuation">.</span>Style<span class="token punctuation">.</span>HorizontalAlignment <span class="token operator">=</span> header<span class="token punctuation">.</span>HorizontalAlignment<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//水平居中对齐</span>            Worksheet<span class="token punctuation">.</span>Cells<span class="token punctuation">[</span>header<span class="token punctuation">.</span>Adress<span class="token punctuation">]</span><span class="token punctuation">.</span>Style<span class="token punctuation">.</span>VerticalAlignment <span class="token operator">=</span> header<span class="token punctuation">.</span>VerticalAlignment<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//垂直居中对齐</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Worksheet<span class="token punctuation">.</span><span class="token function">Column</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AutoFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Worksheet<span class="token punctuation">.</span><span class="token function">Column</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Style<span class="token punctuation">.</span>WrapText <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> _columnIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> _colEndIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ColumnWidthMap<span class="token punctuation">.</span><span class="token function">TryGetValue</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">var</span> maxWidth<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Worksheet<span class="token punctuation">.</span><span class="token function">Column</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Width <span class="token operator">=</span> maxWidth <span class="token operator">/</span> _imagePixelRatio<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            Worksheet<span class="token punctuation">.</span><span class="token function">Column</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Style<span class="token punctuation">.</span>WrapText <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">DrawBorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Save</span><span class="token punctuation">(</span><span class="token keyword">string</span> fileName<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Package<span class="token punctuation">.</span><span class="token function">SaveAs</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInfo</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span><span class="token function">Combine</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">SaveAsByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Package<span class="token punctuation">.</span><span class="token function">GetAsByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token preprocessor property">#<span class="token directive keyword">endregion</span> 构建excel</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>比如我可以这样,<code>new ExcelCell(_rowIndex, 1, childrenLabel).ColMerge(3).SetFontBold(false)</code>通过链式方法,我们可以直接对一个范围进行设置,后续也方便扩展,如果你要支持更多格式,就可以在添加方法构建,足够灵活</p><h2 id="衍生拓展"><a href="#衍生拓展" class="headerlink" title="衍生拓展"></a>衍生拓展</h2><p>但是像<code>EPPlus</code>和<code>NPOI</code>其实是非常重量级的, 现在也有很多开发者提供了一些封装程度很高的类库比如<code>Magicodes.IE.Excel</code>, 追求性能的<code>MiniExcel</code>等等,这些都是后起之秀,满足普通导出需求绰绰有余,非常推荐使用.</p>]]></content>
      
      
      <categories>
          
          <category> Epplus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> excel </tag>
            
            <tag> Epplus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Razor作为动态模板渲染</title>
      <link href="2023/12/12/study-notes-dotnetcore-2023-12-12-shi-yong-razor-zuo-wei-dong-tai-mo-ban-xuan-ran/"/>
      <url>2023/12/12/study-notes-dotnetcore-2023-12-12-shi-yong-razor-zuo-wei-dong-tai-mo-ban-xuan-ran/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在日常的开发过程中, 动态模板是经常需要使用到的东西,比如</p><ul><li>邮件模板</li><li>配置模板</li><li>代码文件</li></ul><p>其中,这些模板大部分固定,但是有些部分需要根据动态数据生成, 对于此类内容, .net 传统有像 T4 模板生成器,不过这个不是很灵活. 个人认为最灵活还是 Razor 视图, 搭配 Razor 语法,可以非常容易自定义模板</p><p>当然也有简单的方案,比如你定义个<code>&#123;&#123;&#125;&#125;</code>符号,替换,</p><h2 id="常见的一些三方框架"><a href="#常见的一些三方框架" class="headerlink" title="常见的一些三方框架"></a>常见的一些三方框架</h2><ul><li>RazorLight</li><li>RazorCore</li></ul><p>这些框架都很好,我之前就是使用<code>RazorLight</code>的,但是一直有个问题只在发布之后出现.</p><p>由于我这里 dotnet 版本太低,无法升级到最新,作者给出来的一些解决方式,比如不编译视图,不能接受,所有还是另寻出路,决定不依赖第三方的框架来实现编译视图</p><h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><p>其实你可以查看控制器中的<code>ActionResult</code>类型,里面有个子类,也是我们常见的<code>return View</code>,这里其实就可以作为我们找到如何翻译视图的起点</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">virtual</span> ViewResult <span class="token function">View</span><span class="token punctuation">(</span><span class="token keyword">string</span> viewName<span class="token punctuation">,</span><span class="token keyword">object</span> model<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ViewData<span class="token punctuation">.</span>Model <span class="token operator">=</span> model<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ViewResult</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ViewName <span class="token operator">=</span> viewName<span class="token punctuation">,</span>        ViewData <span class="token operator">=</span> ViewData<span class="token punctuation">,</span>        TempData <span class="token operator">=</span> TempData    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ViewResult定义,mvc的自定义ActionResult也是这个流程,继承ActionResult和实现IActionResultExecutor&lt;YourCustomActionResult>来</span><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">async</span> Task <span class="token function">ExecuteResultAsync</span><span class="token punctuation">(</span>ActionContext context<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArgumentNullException</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> context<span class="token punctuation">.</span>HttpContext<span class="token punctuation">.</span>RequestServices<span class="token punctuation">.</span>GetRequiredService<span class="token operator">&lt;</span>IActionResultExecutor<span class="token operator">&lt;</span>ViewResult<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAsync</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//再找到IActionResultExecutor&lt;ViewResult>实现类</span><span class="token comment" spellcheck="true">//https://source.dot.net/#Microsoft.AspNetCore.Mvc.ViewFeatures/ViewResultExecutor.cs,824f356e787f07c5</span><span class="token keyword">public</span> <span class="token keyword">async</span> Task <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span>ActionContext context<span class="token punctuation">,</span> ViewResult result<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ArgumentNullException<span class="token punctuation">.</span><span class="token function">ThrowIfNull</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    ArgumentNullException<span class="token punctuation">.</span><span class="token function">ThrowIfNull</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> stopwatch <span class="token operator">=</span> ValueStopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> viewEngineResult <span class="token operator">=</span> <span class="token function">FindView</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    viewEngineResult<span class="token punctuation">.</span><span class="token function">EnsureSuccessful</span><span class="token punctuation">(</span>originalLocations<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> view <span class="token operator">=</span> viewEngineResult<span class="token punctuation">.</span>View<span class="token punctuation">;</span>    <span class="token keyword">using</span> <span class="token punctuation">(</span>view <span class="token keyword">as</span> IDisposable<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span>            context<span class="token punctuation">,</span>            view<span class="token punctuation">,</span>            result<span class="token punctuation">.</span>ViewData<span class="token punctuation">,</span>            result<span class="token punctuation">.</span>TempData<span class="token punctuation">,</span>            result<span class="token punctuation">.</span>ContentType<span class="token punctuation">,</span>            result<span class="token punctuation">.</span>StatusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    Log<span class="token punctuation">.</span><span class="token function">ViewResultExecuted</span><span class="token punctuation">(</span>Logger<span class="token punctuation">,</span> viewEngineResult<span class="token punctuation">.</span>ViewName<span class="token punctuation">,</span> stopwatch<span class="token punctuation">.</span><span class="token function">GetElapsedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">virtual</span> ViewEngineResult <span class="token function">FindView</span><span class="token punctuation">(</span>ActionContext actionContext<span class="token punctuation">,</span> ViewResult viewResult<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ArgumentNullException<span class="token punctuation">.</span><span class="token function">ThrowIfNull</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    ArgumentNullException<span class="token punctuation">.</span><span class="token function">ThrowIfNull</span><span class="token punctuation">(</span>viewResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> viewEngine <span class="token operator">=</span> viewResult<span class="token punctuation">.</span>ViewEngine <span class="token operator">?</span><span class="token operator">?</span> ViewEngine<span class="token punctuation">;</span>    <span class="token keyword">var</span> viewName <span class="token operator">=</span> viewResult<span class="token punctuation">.</span>ViewName <span class="token operator">?</span><span class="token operator">?</span> <span class="token function">GetActionName</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>    <span class="token keyword">var</span> stopwatch <span class="token operator">=</span> ValueStopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> viewEngine<span class="token punctuation">.</span><span class="token function">GetView</span><span class="token punctuation">(</span>executingFilePath<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> viewPath<span class="token punctuation">:</span> viewName<span class="token punctuation">,</span> isMainPage<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> originalResult <span class="token operator">=</span> result<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>Success<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> viewEngine<span class="token punctuation">.</span><span class="token function">FindView</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">,</span> viewName<span class="token punctuation">,</span> isMainPage<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    Log<span class="token punctuation">.</span><span class="token function">ViewResultExecuting</span><span class="token punctuation">(</span>Logger<span class="token punctuation">,</span> result<span class="token punctuation">.</span>ViewName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>Success<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>originalResult<span class="token punctuation">.</span>SearchedLocations<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>SearchedLocations<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Return a new ViewEngineResult listing all searched locations.</span>                <span class="token keyword">var</span> locations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span>originalResult<span class="token punctuation">.</span>SearchedLocations<span class="token punctuation">)</span><span class="token punctuation">;</span>                locations<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>SearchedLocations<span class="token punctuation">)</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> ViewEngineResult<span class="token punctuation">.</span><span class="token function">NotFound</span><span class="token punctuation">(</span>viewName<span class="token punctuation">,</span> locations<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// GetView() searched locations but FindView() did not. Use first ViewEngineResult.</span>                result <span class="token operator">=</span> originalResult<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>DiagnosticListener<span class="token punctuation">.</span><span class="token function">IsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">OutputDiagnostics</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">,</span> viewResult<span class="token punctuation">,</span> viewName<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>Success<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">ViewFound</span><span class="token punctuation">(</span>Logger<span class="token punctuation">,</span> result<span class="token punctuation">.</span>View<span class="token punctuation">,</span> stopwatch<span class="token punctuation">.</span><span class="token function">GetElapsedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">ViewNotFound</span><span class="token punctuation">(</span>Logger<span class="token punctuation">,</span> viewName<span class="token punctuation">,</span> result<span class="token punctuation">.</span>SearchedLocations<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>主要逻辑可以看这段</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">var</span> result <span class="token operator">=</span> viewEngine<span class="token punctuation">.</span><span class="token function">GetView</span><span class="token punctuation">(</span>executingFilePath<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> viewPath<span class="token punctuation">:</span> viewName<span class="token punctuation">,</span> isMainPage<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> originalResult <span class="token operator">=</span> result<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>Success<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> viewEngine<span class="token punctuation">.</span><span class="token function">FindView</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">,</span> viewName<span class="token punctuation">,</span> isMainPage<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>通过注入<code>viewEngine</code>去根据方法名找到对应的视图, 像<code>return view</code>有无参的,有参的,区别就在这里,无参数的就是根据默认的方法名去默认的位置(<code>Views</code>)去找视图</p><p>有参数会解析你这个视图的位置, 去找到视图的位置,这个的方式就可以不写到<code>Views</code>文件夹里面</p><p>大体逻辑可以在<a href="https://source.dot.net/#Microsoft.AspNetCore.Mvc.Razor/RazorViewEngine.cs,181"><code>Microsoft.AspNetCore.Mvc.Razor/RazorViewEngine.cs</code></a>查看</p><p>回到开头的问题,如何通过原生的<code>Razor</code>提供动态模板,答案就是<code>IRazorViewEngine</code>,这个在框架中已经注入了,我们可以直接拿来主义</p><p>下面直接给出代码</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AspNetCoreRazorTemplateRender</span> <span class="token punctuation">:</span> ITemplateRenderer<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> IRazorViewEngine _viewEngine<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> ITempDataProvider _tempDataProvider<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> IServiceProvider _serviceProvider<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AspNetCoreRazorTemplateRender</span><span class="token punctuation">(</span>        IRazorViewEngine viewEngine<span class="token punctuation">,</span>        ITempDataProvider tempDataProvider<span class="token punctuation">,</span>        IServiceProvider serviceProvider        <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        _viewEngine <span class="token operator">=</span> viewEngine<span class="token punctuation">;</span>        _tempDataProvider <span class="token operator">=</span> tempDataProvider<span class="token punctuation">;</span>        _serviceProvider <span class="token operator">=</span> serviceProvider<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">///支持泛型参数</span>    <span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> <span class="token generic-method function">RenderAsync<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">string</span> templateKey<span class="token punctuation">,</span> T context<span class="token punctuation">)</span> <span class="token keyword">where</span> T <span class="token punctuation">:</span> <span class="token keyword">class</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">RenderTemplateToStringAsync</span><span class="token punctuation">(</span><span class="token function">NormalizeViewName</span><span class="token punctuation">(</span>templateKey<span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">///支持字典参数</span>    <span class="token keyword">public</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> <span class="token function">RenderAsync</span><span class="token punctuation">(</span><span class="token keyword">string</span> templateKey<span class="token punctuation">,</span> Dictionary<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span> context<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">RenderTemplateToStringAsync</span><span class="token punctuation">(</span><span class="token function">NormalizeViewName</span><span class="token punctuation">(</span>templateKey<span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> <span class="token generic-method function">RenderTemplateToStringAsync<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">string</span> viewName<span class="token punctuation">,</span> T context<span class="token punctuation">)</span> <span class="token keyword">where</span> T <span class="token punctuation">:</span> <span class="token keyword">class</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建一个默认的httpcontext</span>        <span class="token keyword">var</span> actionContext <span class="token operator">=</span> <span class="token function">CreateDefaultHttpContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//找视图,</span>        <span class="token keyword">var</span> view <span class="token operator">=</span> <span class="token function">FindView</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">,</span> viewName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">using</span> <span class="token keyword">var</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> viewContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ViewContext</span><span class="token punctuation">(</span>            actionContext<span class="token punctuation">,</span>            view<span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">ViewDataDictionary</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>metadataProvider<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">EmptyModelMetadataProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> modelState<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">ModelStateDictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Model <span class="token operator">=</span> context            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">TempDataDictionary</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">.</span>HttpContext<span class="token punctuation">,</span> _tempDataProvider<span class="token punctuation">)</span><span class="token punctuation">,</span>            output<span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">HtmlHelperOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> view<span class="token punctuation">.</span><span class="token function">RenderAsync</span><span class="token punctuation">(</span>viewContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> output<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> IView <span class="token function">FindView</span><span class="token punctuation">(</span>ActionContext actionContext<span class="token punctuation">,</span> <span class="token keyword">string</span> viewName<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这里的逻辑就和View那边差不多</span>        <span class="token keyword">var</span> getViewResult <span class="token operator">=</span> _viewEngine<span class="token punctuation">.</span><span class="token function">GetView</span><span class="token punctuation">(</span>executingFilePath<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> viewPath<span class="token punctuation">:</span> viewName<span class="token punctuation">,</span> isMainPage<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>getViewResult<span class="token punctuation">.</span>Success<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> getViewResult<span class="token punctuation">.</span>View<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> findViewResult <span class="token operator">=</span> _viewEngine<span class="token punctuation">.</span><span class="token function">FindView</span><span class="token punctuation">(</span>actionContext<span class="token punctuation">,</span> viewName<span class="token punctuation">,</span> isMainPage<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>findViewResult<span class="token punctuation">.</span>Success<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> findViewResult<span class="token punctuation">.</span>View<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这里会显示框架的搜索路径</span>        <span class="token keyword">var</span> searchedLocations <span class="token operator">=</span> getViewResult<span class="token punctuation">.</span>SearchedLocations<span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span>findViewResult<span class="token punctuation">.</span>SearchedLocations<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> errorMessage <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>            Environment<span class="token punctuation">.</span>NewLine<span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                $<span class="token string">"Unable to find view '&amp;#123;viewName&amp;#125;'. The following locations were searched:"</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span>searchedLocations<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">Concat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token string">"Hint:"</span><span class="token punctuation">,</span>            <span class="token string">"- Check whether you have added reference to the Razor Class Library that contains the view files."</span><span class="token punctuation">,</span>            <span class="token string">"- Check whether the view file name is correct or exists at the given path."</span><span class="token punctuation">,</span>            <span class="token string">"- Refer documentation or file issue here: https://github.com/soundaranbu/RazorTemplating"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidOperationException</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ActionContext <span class="token function">CreateDefaultHttpContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> httpContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultHttpContext</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            RequestServices <span class="token operator">=</span> _serviceProvider        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActionContext</span><span class="token punctuation">(</span>httpContext<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RouteData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Mvc<span class="token punctuation">.</span>Abstractions<span class="token punctuation">.</span>ActionDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">string</span> <span class="token function">NormalizeViewName</span><span class="token punctuation">(</span><span class="token keyword">string</span> viewName<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这里我把模板的cshtml放到了App_Data文件夹下,和平时的视图分开,因此需要输入完整的地址才能找到这个视图</span>        <span class="token keyword">return</span> $<span class="token string">"~/App_Data/&amp;#123;viewName&amp;#125;.cshtml"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Asp-Net-Core-8新功能"><a href="#Asp-Net-Core-8新功能" class="headerlink" title="Asp.Net Core 8新功能"></a>Asp.Net Core 8新功能</h2><p>在<code>Asp.Net Core 8</code>版本添加了一个<a href="https://learn.microsoft.com/zh-cn/aspnet/core/blazor/components/render-components-outside-of-aspnetcore?view=aspnetcore-8.0">在 ASP.NET Core 之外呈现 <code>Razor</code> 组件</a>的功能</p><p>注意:此<code>Razor</code>非彼<code>Razor</code>,是<code>Blazor</code>中的<code>Razor</code>组件,和<code>mvc</code>的有区别</p><pre class=" language-razor"><code class="language-razor"><h1>Render Message</h1><p>@Message</p>@code &#123;    [Parameter]    public string Message &#123; get; set; &#125;&#125;</code></pre><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Components<span class="token punctuation">;</span><span class="token keyword">using</span> Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Components<span class="token punctuation">.</span>Web<span class="token punctuation">;</span><span class="token keyword">using</span> Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>DependencyInjection<span class="token punctuation">;</span><span class="token keyword">using</span> Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Logging<span class="token punctuation">;</span><span class="token keyword">using</span> ConsoleApp1<span class="token punctuation">;</span>IServiceCollection services <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>services<span class="token punctuation">.</span><span class="token function">AddLogging</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IServiceProvider serviceProvider <span class="token operator">=</span> services<span class="token punctuation">.</span><span class="token function">BuildServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ILoggerFactory loggerFactory <span class="token operator">=</span> serviceProvider<span class="token punctuation">.</span><span class="token generic-method function">GetRequiredService<span class="token punctuation">&lt;</span>ILoggerFactory<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token keyword">var</span> htmlRenderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HtmlRenderer</span><span class="token punctuation">(</span>serviceProvider<span class="token punctuation">,</span> loggerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token keyword">await</span> htmlRenderer<span class="token punctuation">.</span>Dispatcher<span class="token punctuation">.</span><span class="token function">InvokeAsync</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> dictionary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token operator">?</span><span class="token operator">></span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"Message"</span><span class="token punctuation">,</span> <span class="token string">"Hello from the Render Message component!"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> parameters <span class="token operator">=</span> ParameterView<span class="token punctuation">.</span><span class="token function">FromDictionary</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> output <span class="token operator">=</span> <span class="token keyword">await</span> htmlRenderer<span class="token punctuation">.</span><span class="token generic-method function">RenderComponentAsync<span class="token punctuation">&lt;</span>RenderMessage<span class="token punctuation">></span></span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> output<span class="token punctuation">.</span><span class="token function">ToHtmlString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用这个,可以比我上面那个更加简单和方便,但是貌似还是不能将模板持久化, 如果需要持久化的方案,可以考虑开源的<code>RazorLight</code>或者学习他们如何支持从动态模板中渲染的,理论上,<code>FindView</code>和<code>GetView</code>也只是一个找到文件的过程,通过代替实现其中的接口,也就从DB中读取数据了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>clean-architecture整洁架构思考</title>
      <link href="2023/12/07/study-notes-algorithm-2023-12-07-clean-architecture-zheng-ji-jia-gou-si-kao/"/>
      <url>2023/12/07/study-notes-algorithm-2023-12-07-clean-architecture-zheng-ji-jia-gou-si-kao/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是整洁架构"><a href="#什么是整洁架构" class="headerlink" title="什么是整洁架构"></a>什么是整洁架构</h2><p>在干净的架构中，领域和应用程序层是设计的中心。这被称为系统的核心。</p><p>域层包含企业逻辑和类型，应用程序层包含业务逻辑和类型。不同之处在于，企业逻辑可以在许多系统之间共享，而业务逻辑通常只在此系统内使用。</p><p>核心不应依赖于数据访问和其他基础结构问题，因此这些依赖关系是颠倒的。这是通过在 Core 中添加接口或抽象来实现的，这些接口或抽象由 Core 外部的层实现。例如，如果要实现存储库模式，则可以通过在 Core 中添加接口并在 Infrastructure 中添加实现来实现。</p><p>所有依赖项都向内流动，Core 不依赖于任何其他层。基础架构和演示依赖于核心，但彼此不依赖。</p><p><img src="https://i0.wp.com/jasontaylor.dev/wp-content/uploads/2020/01/Figure-01-2.png?w=531&ssl=1" alt="如图所示"></p><p>这导致架构和设计是：</p><ul><li>独立于框架，它不需要存在某些工具或框架</li><li>可测试 易于测试 – 核心不依赖于任何外部内容，因此编写自动化测试要容易得多</li><li>独立于 UI 逻辑被排除在 UI 之外，因此很容易更改为另一种技术——现在您可能正在使用 Angular，很快就会使用 Vue，最终会使用 Blazor！</li><li>独立于数据库，数据访问问题被完全分开，因此从 SQL Server 迁移到 CosmosDB 或其他方式是微不足道的</li><li>事实上，Core独立于任何外部事物，与外界完全隔离——这是持续3年的系统与持续20年的系统之间的区别</li></ul><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><ul><li>使用 <a href="https://github.com/jbogard/MediatR">MediatR</a> 的 CQRS</li><li>使用 <a href="https://fluentvalidation.net/">FluentValidation</a> 进行验证</li><li>使用 <a href="https://automapper.org/">AutoMapper</a> 进行对象-对象映射</li><li>使用 Entity Framework Core 进行数据访问Data access with Entity Framework Core</li><li>使用 <a href="https://learn.microsoft.com/zh-CN/aspnet/core/">ASP.NET Core</a> 的 Web API</li><li>使用 Angular 8 的 UI</li><li>使用 NSwag 的开放 API</li><li>使用 <a href="https://learn.microsoft.com/zh-CN/aspnet/core/security/authentication/identity-api-authorization">ASP.NET Core Identity + IdentityServer</a> 的安全性</li><li>使用 <a href="https://xunit.net/">xUnit.net</a>、<a href="https://github.com/Moq/moq4/wiki/Quickstart">Moq</a> 和 <a href="https://shouldly.readthedocs.io/en/latest/">Shouldly</a> 进行自动化测试</li></ul><h2 id="两个著名的整洁架构例子"><a href="#两个著名的整洁架构例子" class="headerlink" title="两个著名的整洁架构例子"></a>两个著名的整洁架构例子</h2><p><a href="https://github.com/jasontaylordev/CleanArchitecture">jasontaylordev/CleanArchitecture</a><br><a href="https://github.com/ardalis/CleanArchitecture">ardalis/CleanArchitecture</a></p><p>两个整体思想类似,但是细微的设计上理解有所不同,我跟喜欢第一个,第二个封装了很多东西到nuget包,我希望模板提供的东西都是可见的,不用等待更新</p><p>另外有两个不同的点, <code>jasontaylordev</code>并没有使用仓储模式,</p><h2 id="现有整洁架构的不足之处"><a href="#现有整洁架构的不足之处" class="headerlink" title="现有整洁架构的不足之处"></a>现有整洁架构的不足之处</h2><p>尽管两个仓库都提供了一个简单的todo例子,但是对于一个方便好用的框架来说,<br>还缺少一些比较常用的内容,以下是我的一些理解和希望能为框架增加的功能</p><h3 id="UI表示层"><a href="#UI表示层" class="headerlink" title="UI表示层"></a><code>UI</code>表示层</h3><p>这里的ui我不仅指的包含使用不同的UI框架,比如不限于</p><ul><li><code>MVC</code></li><li><code>Razor Pages</code></li><li><code>Blazor</code></li><li><code>Vue</code></li><li><code>React</code></li></ul><p>甚至包括不同架构平台,比如</p><ul><li><code>WPF</code></li><li><code>MAUI</code></li></ul><p>对于这些平台不同UI框架, 我希望都有统一的认证授权体系, 统一的异常处理体系, 统一的本地化体系.</p><p>对于CS平台, 单纯的客户端几乎都是不能直接操作数据库,如果你需要直接操作数据,那么你可能不需要这么复杂的架构模式,但是在CS平台,要依赖于<code>AspNet</code>的授权体系是不能实现的.</p><p>所以我可以这样认为, 一般的客户端无论如何都需要通过接口来获取数据, 那么我应该提供一个<code>Server</code>,在这个服务中提供基于<code>AspNet</code>的认证授权体系</p><p>对于Web平台,我希望可以使用微软自带的 <code>Identity</code>来提供基础的用户管理</p><h3 id="Application应用层"><a href="#Application应用层" class="headerlink" title="Application应用层"></a><code>Application</code>应用层</h3><ul><li><p>使用<code>CQRS</code>命令查询分离,对于命令和查询使用不同的</p></li><li><p>通过<code>MediatR</code>提供<code>Behaviours</code>功能,提供统一的授权, 日志, 异常, 验证的管道过滤, 或者这里应该实现如同<code>mvc</code>中的管理配置, 授权,资源,方法,结果,异常5个过滤器,而且这里应该脱离<code>AspNetCore</code>,不应该依赖于它</p></li></ul><p><img src="https://learn.microsoft.com/zh-cn/aspnet/core/mvc/controllers/filters/_static/filter-pipeline-2.png?view=aspnetcore-8.0" alt="如图"></p><ul><li>仿照一个类似ABP的权限系统,可以脱离<code>AspNetCore</code>提供授权服务</li></ul><h3 id="Domain领域层"><a href="#Domain领域层" class="headerlink" title="Domain领域层"></a><code>Domain</code>领域层</h3><ul><li><code>Specification</code>规约</li></ul><p>这里是所有业务的核心, 在这里我认为在abp的中的<code>Specification</code>规约,这个类型非常好用,我们经常会使用一些常用的业务判断,这些往往是可以复用,逻辑统一的,规约在这一点上就很好的满足了要求,而且依赖很干净,非常适合在这里使用</p><ul><li>定义基础设施接口<ul><li><code>IEmailSender</code></li><li><code>IRepository</code></li></ul></li></ul><h3 id="Infrastructure基础设施层"><a href="#Infrastructure基础设施层" class="headerlink" title="Infrastructure基础设施层"></a><code>Infrastructure</code>基础设施层</h3><p>提供各种基础设施的实现, 比如有实现<code>IEmailSender</code>,可以是dotNet自带的<code>SMTP</code>或者<code>MIME</code>来实现</p><h3 id="Identity框架引入的一些想法"><a href="#Identity框架引入的一些想法" class="headerlink" title="Identity框架引入的一些想法"></a><code>Identity</code>框架引入的一些想法</h3><p><code>Microsoft.Extensions.Identity.Core</code>和<code>Microsoft.Extensions.Identity.Stores</code>应该在<code>Domain</code>中,<br><code>Microsoft.AspNetCore.Identity.EntityFrameworkCore</code>在<code>Infrastructure</code>中<br><code>Microsoft.AspNetCore.Identity.UI</code>在ui层引入</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分享System.CommandLine使用体验</title>
      <link href="2023/12/07/study-notes-dotnetcore-2023-12-07-fen-xiang-system-commandline-shi-yong-ti-yan/"/>
      <url>2023/12/07/study-notes-dotnetcore-2023-12-07-fen-xiang-system-commandline-shi-yong-ti-yan/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是System-CommandLine"><a href="#什么是System-CommandLine" class="headerlink" title="什么是System.CommandLine"></a>什么是<code>System.CommandLine</code></h2><p>这是.net 官方库, 提供命令行应用通常所需的功能，例如分析命令行输入和显示帮助文本。极大方便构造命令行应用</p><p>对于应用开发人员，库：</p><ul><li>使你能够专注于编写应用代码，因为不需要编写代码来分析命令行输入或生成帮助页。</li><li>允许独立于输入分析代码测试应用代码。</li><li>剪裁友好，是开发快速、轻型且支持 AOT 的 CLI 应用的最佳选择。</li></ul><p>使用库还使应用用户受益：</p><ul><li>它确保根据 POSIX 或 Windows 约定一致地分析命令行输入。</li><li>它自动支持 Tab 自动补全和响应文件。</li></ul><h2 id="第一个例子"><a href="#第一个例子" class="headerlink" title="第一个例子"></a>第一个例子</h2><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">.</span>CommandLine<span class="token punctuation">;</span><span class="token keyword">namespace</span> scl<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> fileOption <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span>FileInfo<span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">(</span>            name<span class="token punctuation">:</span> <span class="token string">"--file"</span><span class="token punctuation">,</span>            description<span class="token punctuation">:</span> <span class="token string">"The file to read and display on the console."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> rootCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootCommand</span><span class="token punctuation">(</span><span class="token string">"Sample app for System.CommandLine"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rootCommand<span class="token punctuation">.</span><span class="token function">AddOption</span><span class="token punctuation">(</span>fileOption<span class="token punctuation">)</span><span class="token punctuation">;</span>        rootCommand<span class="token punctuation">.</span><span class="token function">SetHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>             <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 <span class="token function">ReadFile</span><span class="token punctuation">(</span>file<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            fileOption<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">await</span> rootCommand<span class="token punctuation">.</span><span class="token function">InvokeAsync</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ReadFile</span><span class="token punctuation">(</span>FileInfo file<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        File<span class="token punctuation">.</span><span class="token function">ReadLines</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>FullName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>line <span class="token operator">=</span><span class="token operator">></span> Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>编译之后可以使用<code>scl --file scl.runtimeconfig.json</code> 运行测试</p><p>或者使用<code>dotnet run -- --file scl.runtimeconfig.json</code>运行</p><p>又或者在vs中使用调试属性,添加参数来测试</p><p>以上这个列子,也可以很方便使用<code>version</code>和<code>help</code>命令来查询版本和帮助文档</p><p><code>scl --version</code>和<code>scl --help</code></p><h2 id="实际例子"><a href="#实际例子" class="headerlink" title="实际例子"></a>实际例子</h2><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// See https://aka.ms/new-console-template for more information</span><span class="token comment" spellcheck="true">// Scaffold-DbContext "Server=192.168.0.249;Database=tus_url_dev;User ID=pgsql;Password=pgsql;" Npgsql.EntityFrameworkCore.PostgreSQL -OutputDir Models -Context TUSContext -Force -ContextDir Data</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>CommandLine<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>CommandLine<span class="token punctuation">.</span>Binding<span class="token punctuation">;</span><span class="token keyword">using</span> CalcGenCodeUrl<span class="token punctuation">.</span>Application<span class="token punctuation">;</span><span class="token keyword">using</span> CalcGenCodeUrl<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">using</span> MediatR<span class="token punctuation">;</span><span class="token keyword">using</span> Microsoft<span class="token punctuation">.</span>EntityFrameworkCore<span class="token punctuation">;</span><span class="token keyword">using</span> Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">using</span> Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>DependencyInjection<span class="token punctuation">;</span><span class="token keyword">using</span> Microsoft<span class="token punctuation">.</span>Extensions<span class="token punctuation">.</span>Logging<span class="token punctuation">;</span><span class="token keyword">using</span> Serilog<span class="token punctuation">;</span><span class="token keyword">var</span> urlArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Argument</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">"url"</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">"Query的URL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> startTimeOption <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span>DateOnly<span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">(</span>    name<span class="token punctuation">:</span> <span class="token string">"--start"</span><span class="token punctuation">,</span>    isDefault<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>    parseArgument<span class="token punctuation">:</span> result <span class="token operator">=</span><span class="token operator">></span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>DateOnly<span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Tokens<span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">var</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span>ErrorMessage <span class="token operator">=</span> <span class="token string">"Error Start Date"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    description<span class="token punctuation">:</span> <span class="token string">"生码起始日期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> endTimeOption <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span>DateOnly<span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">(</span>    name<span class="token punctuation">:</span> <span class="token string">"--end"</span><span class="token punctuation">,</span>    isDefault<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>    parseArgument<span class="token punctuation">:</span> result <span class="token operator">=</span><span class="token operator">></span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>DateOnly<span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>Tokens<span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">var</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span>ErrorMessage <span class="token operator">=</span> <span class="token string">"Error End Date"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    description<span class="token punctuation">:</span> <span class="token string">"生码结束日期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> isDemoOption <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"--isdemo"</span><span class="token punctuation">,</span> <span class="token string">"是否是Demo环境"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> rootCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootCommand</span><span class="token punctuation">(</span><span class="token string">"计算唯一码url程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rootCommand<span class="token punctuation">.</span><span class="token function">AddArgument</span><span class="token punctuation">(</span>urlArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>rootCommand<span class="token punctuation">.</span><span class="token function">AddOption</span><span class="token punctuation">(</span>startTimeOption<span class="token punctuation">)</span><span class="token punctuation">;</span>rootCommand<span class="token punctuation">.</span><span class="token function">AddOption</span><span class="token punctuation">(</span>endTimeOption<span class="token punctuation">)</span><span class="token punctuation">;</span>rootCommand<span class="token punctuation">.</span><span class="token function">AddOption</span><span class="token punctuation">(</span>isDemoOption<span class="token punctuation">)</span><span class="token punctuation">;</span>IServiceCollection services <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IConfiguration configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">SetBasePath</span><span class="token punctuation">(</span>Directory<span class="token punctuation">.</span><span class="token function">GetCurrentDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">AddJsonFile</span><span class="token punctuation">(</span><span class="token string">"appsettings.json"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Log<span class="token punctuation">.</span>Logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggerConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>MinimumLevel<span class="token punctuation">.</span><span class="token function">Information</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span>MinimumLevel<span class="token punctuation">.</span><span class="token function">Override</span><span class="token punctuation">(</span><span class="token string">"Microsoft.EntityFrameworkCore"</span><span class="token punctuation">,</span> Serilog<span class="token punctuation">.</span>Events<span class="token punctuation">.</span>LogEventLevel<span class="token punctuation">.</span>Warning<span class="token punctuation">)</span>                <span class="token punctuation">.</span>WriteTo<span class="token punctuation">.</span><span class="token function">Console</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//.WriteTo.File($"logs/&amp;#123;DateTimeOffset.Now:d_HH_mm&amp;#125;.log")</span>                <span class="token punctuation">.</span><span class="token function">CreateLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>services<span class="token punctuation">.</span><span class="token function">AddLogging</span><span class="token punctuation">(</span>loggerBuilder <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    loggerBuilder<span class="token punctuation">.</span><span class="token function">AddSerilog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    loggerBuilder<span class="token punctuation">.</span><span class="token function">AddConfiguration</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">"Logging"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>services<span class="token punctuation">.</span><span class="token generic-method function">AddDbContext<span class="token punctuation">&lt;</span>TUSContext<span class="token punctuation">></span></span><span class="token punctuation">(</span>o <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    o<span class="token punctuation">.</span><span class="token function">UseNpgsql</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">GetConnectionString</span><span class="token punctuation">(</span><span class="token string">"DefaultConnection"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> contextOption <span class="token operator">=</span><span class="token operator">></span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        contextOption<span class="token punctuation">.</span><span class="token function">MaxBatchSize</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>services<span class="token punctuation">.</span><span class="token function">AddMediatR</span><span class="token punctuation">(</span>cfg <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    cfg<span class="token punctuation">.</span><span class="token function">RegisterServicesFromAssembly</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>Program<span class="token punctuation">)</span><span class="token punctuation">.</span>Assembly<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IServiceProvider servicesProvider <span class="token operator">=</span> services<span class="token punctuation">.</span><span class="token function">BuildServiceProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rootCommand<span class="token punctuation">.</span><span class="token function">SetHandler</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">string</span> url <span class="token operator">=</span> context<span class="token punctuation">.</span>ParseResult<span class="token punctuation">.</span><span class="token function">GetValueForArgument</span><span class="token punctuation">(</span>urlArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> startTime <span class="token operator">=</span> context<span class="token punctuation">.</span>ParseResult<span class="token punctuation">.</span><span class="token function">GetValueForOption</span><span class="token punctuation">(</span>startTimeOption<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> endTime <span class="token operator">=</span> context<span class="token punctuation">.</span>ParseResult<span class="token punctuation">.</span><span class="token function">GetValueForOption</span><span class="token punctuation">(</span>endTimeOption<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> isDemo <span class="token operator">=</span> context<span class="token punctuation">.</span>ParseResult<span class="token punctuation">.</span><span class="token function">GetValueForOption</span><span class="token punctuation">(</span>isDemoOption<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> updateQrUrlCommand <span class="token operator">=</span> servicesProvider<span class="token punctuation">.</span><span class="token generic-method function">GetService<span class="token punctuation">&lt;</span>ISender<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> cancellationToken <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">GetCancellationToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    context<span class="token punctuation">.</span>ExitCode <span class="token operator">=</span> <span class="token keyword">await</span> updateQrUrlCommand<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UpdateQrUrlCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Url <span class="token operator">=</span> url<span class="token punctuation">,</span>        StartDate <span class="token operator">=</span> startTime<span class="token punctuation">,</span>        EndDate <span class="token operator">=</span> endTime<span class="token punctuation">,</span>        IsDemo <span class="token operator">=</span> isDemo<span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">await</span> rootCommand<span class="token punctuation">.</span><span class="token function">InvokeAsync</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">ServiceProviderBinder</span> <span class="token punctuation">:</span> BinderBase<span class="token operator">&lt;</span>IServiceProvider<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ServiceProviderBinder</span><span class="token punctuation">(</span>IServiceProvider serviceProvider<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ServiceProvider <span class="token operator">=</span> serviceProvider<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> IServiceProvider ServiceProvider <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">override</span> IServiceProvider <span class="token function">GetBoundValue</span><span class="token punctuation">(</span>BindingContext bindingContext<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ServiceProvider<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这个例子展示了模型转换,依赖注入,如何设置命令</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>更多使用方式,请参考文档</p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/standard/commandline/">官方文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> System.CommandLine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wpf-学习笔记1</title>
      <link href="2023/10/11/study-notes-wpf-2023-10-11-wpf-xue-xi-bi-ji-1/"/>
      <url>2023/10/11/study-notes-wpf-2023-10-11-wpf-xue-xi-bi-ji-1/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是WPF"><a href="#什么是WPF" class="headerlink" title="什么是WPF?"></a>什么是<code>WPF</code>?</h2><p>WPF，全称 Windows Presentation Foundation，中文叫 Windows 呈现基础</p><blockquote><p>欢迎使用 Windows Presentation Foundation (WPF) 桌面指南，这是一个与分辨率无关的 UI 框架，使用基于矢量的呈现引擎，构建用于利用现代图形硬件。 WPF 提供一套完善的应用程序开发功能，这些功能包括 Extensible Application Markup Language (XAML)、控件、数据绑定、布局、二维和三维图形、动画、样式、模板、文档、媒体、文本和版式。 WPF 属于 .NET，因此可以生成整合 .NET API 其他元素的应用程序。</p></blockquote><p>WPF 的组成</p><ul><li>PresentationFramework.dll<br>它离我们最近，WPF 所有绘制在界面上的控件，全部来源于此类库，包括应用程序的窗口、页面、和用于布局的 Panel ，各种控件(Control)和 Style 样式， 此外还有交互的控制与动画。在这个 dll 库中，所有的控件都继承于 FrameworkElement 类，FrameworkElement 类则继承于 PresentationCore.dll 的 UIElement 类。</li><li>PresentationCore.dll<br>提供 WPF 较低层的一些功能。例如 Visual 和 UIElement 这两个类都被包含在这个 dll 库中，UIElement 作为 Visual 的子类，Visual 作为 DependencyObject，DependencyObject 作为 DispatcherObject 最终抽象基类。Visual 主要提供了几何（Geometry）、特效（Effect）、缩放平移旋转（Transform）等功能；UIElement 主要提供了一些基础路由事件（RoutedEvent）、以及定义了一些控件的显示、显示裁剪、是否具有焦点、是否启用等属性。</li><li>WindowsBase.dll<br>它是上层中最基础的类库，如 WPF 框架的基类 DispatcherObject 和 DependencyObject。需要说明的是：DependencyObject 继承于 DispatcherObject 抽象类。</li></ul><p>三者合并起来就是我们看到的 WPF 程序了</p><h2 id="App-xaml-与-Application-类"><a href="#App-xaml-与-Application-类" class="headerlink" title="App.xaml 与 Application 类"></a>App.xaml 与 Application 类</h2><p>事实上，xaml 类型的文件包含两部分，一部分以.xaml 扩展名结尾的前端代码，另一部分以.xaml.cs 结尾的后端代码，通常我们也把后端代码称为隐藏代码。</p><p>在 xaml 代码中，我们可以看到有一个<code>&lt;Application&gt;</code>的标签，同时在里面还有一句话:<code>x:Class=&quot;HelloWorld.App&quot;</code>，它定义一个名叫 App 的类型，这个类型位于命令空间 HelloWorld 之中，与后端代码的 namespace HelloWorld 保持一致。我们可以将 x:Class 和 c#里面的 class 关键词看成是同一个东西，都表示定义某个类型。</p><p>Application 类拥有一些属性、事件、和方法，与过去在 C#学习中碰到的其它类型从结构上没什么不同。摘要显示，Application 类是封装 Windows Presentation Foundation (WPF) 的应用程序。我们开发一款 WPF 应用程序，本质上是去继承了这个类，并创建了一些窗体和对话框，通过 C#语言编写一系列的业务逻辑实现，最终编译成软件交付给用户。</p><p>一个应用程序就好比是一套房子，大多数情况下，这套房子拥有客厅、主卧、客卧、厨房、厕所、阳台等地方，而应用程序会包括多个窗体、对话框等界面，这些窗体和对话框就是这些不同的房间；在众多的窗体中，会有一个主窗体，也就是 Application 类的 MainWindow 属性，MainWindow 就像是房子的客厅，因为我们推开门进去，通常映入眼帘的就是客厅。但是类似 QQ 软件呢，打开后并不是立即进入到主窗体，而是登录窗体，只有通过权限验证后才会进入主窗体。</p><p>那么，如何在启动程序时决定先显示哪个窗体呢？答案是 Application 类的 StartupUri 属性。StartupUri 属性是 Uri 类型，即统一资源标识符 (URI)，它可以指定应用程序第一次启动时显示的用户界面 (UI)。当然，它的功能还远远不止这个，关于 URI，我们会专门拿一节内容探讨。</p><h2 id="Application-的生命周期"><a href="#Application-的生命周期" class="headerlink" title="Application 的生命周期"></a>Application 的生命周期</h2><p>App.xaml 前端代码，StartupUri=”MainWindow.xaml”表示本程序第一个启动的窗体是 MainWindow</p><ol><li>OnStartup<ol><li>OnActivated</li><li>OnDeactivated</li><li>OnActivated</li><li>OnDeactivated</li></ol></li><li>OnExit</li></ol><p>由于我们可以得出结论，当我们启动 WPF 应用时，首先被执行的是 OnStartup 方法，其次是 OnActivated 方法，如果我们把当前应用最小化或切换到其它程序时，这时 OnDeactivated 会被执行，再切回来时再次执行 OnActivated 方法，最后，当我们关闭程序时，OnDeactivated 会再次被执行，最后执行的是 OnExit 方法。</p><ul><li>OnStartup：表示启动应用程序时</li><li>OnActivated：表示激活应用程序时</li><li>OnDeactivated：表示由激活状态变为非激活状态时</li><li>OnExit：表示退出应用程序时</li></ul><p>这只是 Application 的生命周期，事实上，由于 Application 总是会启动一个界面（窗体），而窗体也会有自己的生命周期。下一节，我们将讨论一下窗体(Window)的生命周期。</p><h2 id="Window-窗体的生命周期"><a href="#Window-窗体的生命周期" class="headerlink" title="Window 窗体的生命周期"></a>Window 窗体的生命周期</h2><p>Window 窗体，其实也是一个控件，一个 Application 应用实例可能会有多个窗体，这些窗体随着用户的操作被创建于内存，最后被销毁于内存。大多数情况下，销毁的请求虽然由用户发起，但最终回收内存则是由 GC 垃圾回收器在干活儿。</p><p>窗体有以下的生命周期</p><p>SourceInitialized:创建窗体源时引发此事件<br>Activated:当前窗体成为前台窗体时引发此事件<br>Loaded:当前窗体内部所有元素完成布局和呈现时引发此事件<br>ContentRendered:当前窗体的内容呈现之后引发此事件<br>Closing:当前窗体关闭之前引发此事件<br>Deactivated:当前窗体成为后台窗体时引发此事件<br>Closed:当前窗体关闭之后引发此事件<br>Unloaded:当前窗体从元素树中删除时引发此事件</p><h2 id="Window-窗体的组成"><a href="#Window-窗体的组成" class="headerlink" title="Window 窗体的组成"></a>Window 窗体的组成</h2><p>Window 窗体本质上也是一个控件，只不过它和一般控件有所区别。比如它具有 Closing 和 Closed 事件，而一般控件是不可以关闭的；另外，Window 窗体可以容纳其它控件，最后，窗体由两部分构成，即工作区和非工作区。</p><ul><li>非工作区</li></ul><p>非工作区主要包含以下几个要素，它们分别是：图标、标题、窗体菜单、最小化按钮、最大化按钮、关闭按钮、窗体边框、右下角鼠标拖动调整窗体尺寸。</p><ul><li>工作区</li></ul><p>关于 Window 窗体的的工作区，本质上是指 Window 类的 Content 属性。Content 属性表示窗体的内容，类型为 object，即可以是任意的引用类型 。需要注意的是，Content 属性并不在 Window 类中，而在它的父类 ContentControl 类中。</p><blockquote><p>默认的<code>&lt;Window&gt;&lt;/Window&gt;</code>之中只能存在一个控件，就是因为 Content 是 object 类型，意思是只接受一个对象。那如何向窗体中增加多个控件呢？微软给出了示例，就是先放一个 Grid 布局控件，因为 Grid 控件是一个集合控件，我们可以将多个控件放在 Grid 控件中，</p></blockquote><h2 id="控件的父类"><a href="#控件的父类" class="headerlink" title="控件的父类"></a>控件的父类</h2><p>微软在设计 WPF 框架时，做了一些非常经典且合理的代码架构。我们在开发程序时可能会用到各种各样的控件，这些控件的功能可能各不相同，甚至包括它们的属性、事件和方法，于是微软的工程师们将相同的方法成员或属性成员进行了层层抽象，并写入到一个又一个的父类中，最后让这些控件去继承父类即可。</p><p>我们以最常用的 Button 控件为例。首先看看它的父类们：Button-&gt;ButtonBase-&gt;ContentControl-&gt;Control-&gt;FrameworkElement-&gt;UIElement-&gt;Visual-&gt;DependencyObject-&gt;DispatcherObject。</p><p>然后再看一个最常用的 StackPanel 控件的继承路线：StackPanel-&gt;Panel-&gt;FrameworkElement-&gt;UIElement-&gt;Visual-&gt;DependencyObject-&gt;DispatcherObject。</p><p>最后再看一个 Rectangle 矩形图形的继承路线：Rectangle-&gt;Shape-&gt;FrameworkElement-&gt;UIElement-&gt;Visual-&gt;DependencyObject-&gt;DispatcherObject。</p><p>我们会发现它们的继承路线最终都在 FrameworkElement 这一层汇合，换句话说，这三种控件的身上都流着 FrameworkElement 的血，那自然也流淌着 UIElement-&gt;Visual-&gt;DependencyObject-&gt;DispatcherObject 这四个父类的血了。</p><p>由此我们可以得出结论，控件的父类们(准确的说，应该叫父类的父类的父类)，至少有如下几个类型：</p><ul><li>DispatcherObject</li><li>DependencyObject</li><li>Visual</li><li>UIElement</li><li>FrameworkElement</li></ul><h2 id="DispatcherObject类"><a href="#DispatcherObject类" class="headerlink" title="DispatcherObject类"></a><code>DispatcherObject</code>类</h2><p>WPF 有两个线程,分别用于呈现界面（后台线程）和管理界面（UI 线程）后台线程一直隐藏于后台默默运行，我们感知不到，我们唯一能操作的就是 UI 线程。</p><p>绝大多数对象或控件都必须在 UI 线程上创建，而且，其它后台子线程不能直接访问 UI 线程上的控件，那么，后台线程非要访问 UI 线程的控件或对象，该怎么办呢？</p><p>微软说，这样吧，我在 UI 线程上给你们提供一个中间商 Dispatcher（调度员），将 Dispatcher 放到一个抽象类 DispatcherObject，然后我向你保证，我所有的控件都从这个 DispatcherObject 类继承，这样当你们在后台线程中要访问控件时，就可以从控件中找到那位中间商 Dispatcher，由中间商来完成你要对控件的操作访问。</p><p>从此，DispatcherObject 在 WPF 的世界中，便登上了至高无上的宝座，成为了几乎所有类型的终极基类。</p><p>而作为 DispatcherObject 类的成员 Dispatcher（调度员）又提供了哪些功能？</p><p>简单点说，它便是后台线程和前台线程的桥梁，虽然所有的控件都必须在前台 UI 线程中创建，但是在开发过程中，难免需要在后台线程中去操作控件，于是 Dispatcher 调度员提供了 Invoke 和 BeginInvoke 两个方法，供我们可以安全的访问 UI 线程中的控件。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Task<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button<span class="token punctuation">.</span>Dispatcher<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            button<span class="token punctuation">.</span>Content <span class="token operator">=</span> <span class="token string">"www.wpfsoft.com"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>那么DispatcherObject 类的主要方针路线到底是什么呢？主要有两个职责：</p><ul><li><p>提供对对象所关联的当前 Dispatcher 的访问权限，意思是说谁继承了它，谁就拥有了Dispatcher。</p></li><li><p>提供方法以检查 (CheckAccess) 和验证 (VerifyAccess) 某个线程是否有权访问对象（派生于 DispatcherObject）。CheckAccess 与 VerifyAccess 的区别在于 CheckAccess 返回一个布尔值，表示当前线程是否有可以使用的对象，而 VerifyAccess 则在线程无权访问对象的情况下引发异常。</p></li></ul><h2 id="DependencyObject类"><a href="#DependencyObject类" class="headerlink" title="DependencyObject类"></a>DependencyObject类</h2><p>当我们给一个控件赋值的时候,会这样写<code>button.Text = &quot;确定&quot;</code>,但是有时候我们可能需要将它显示为<code>OK</code>,这个时候我们就需要手动重新赋值了</p><p><strong>这种在需要的时候主动去改变控件的值的开发模式，我们称为事件驱动模式。</strong></p><p>但是这种方式在对象多了之后明显就不好搞了, 于是WPF有更省事的处理方式, 数据驱动模式.</p><p>控件的属性不再被直接赋值，而是绑定了另一个”变量“，当这个”变量“发生改变时，控件的属性也会跟着改变，这样的属性也被称为依赖属性。</p><p>我们来看一下DependencyObject类的定义，比较常用的是GetValue和SetValue。GetValue表示获取某一个依赖属性的值，由于不确定这个值是什么类型，所以微软把这个函数的返回值设计成object。SetValue表示设置某一个依赖属竹的值，所有它有两个参数，第一个参数dp表示要设置的依赖属性，第二个参数value表示新值。</p><h2 id="Visual类"><a href="#Visual类" class="headerlink" title="Visual类"></a><code>Visual</code>类</h2><p>Visual类是WPF框架中第三个父类，主要是为 WPF 中的呈现提供支持，其中包括命中测试、坐标转换和边界框计算。它位于程序集:PresentationCore.dll库文件中，它的命名空间:System.Windows.Media。</p><blockquote><p>Visual 类是派生每个 FrameworkElement 对象的基本抽象。 该类还用作在 WPF 中编写新控件的入口点，在 Win32 应用程序模型中，该类在许多方面可视为窗口句柄 (HWND)。Visual 对象是一个核心 WPF 对象，它的主要作用是提供呈现支持。 用户界面控件如 Button 和 TextBox）派生自 Visual 类，并使用该类来保存它们的呈现数据。 Visual 对象为以下项提供支持：<br>输出显示：呈现视觉对象的持久、序列化的绘图内容。<br>转换：针对视觉对象执行转换。<br>剪裁：为视觉对象提供剪裁区域支持。<br>命中测试：确定坐标或几何形状是否包含在视觉对象的边界内。<br>边框计算：确定视觉对象的边框。</p></blockquote><p>比较重要的属性</p><p>VisualParent属性：这个属性表示获取一个可视化父对象。因为XAML的代码结构就是一棵xml树，每个控件都对象几乎都有一个可视化父对象。</p><p>VisualChildrenCount属性：获取当前对象的子元素数量。</p><p>VisualOffset属性：指当前可视对象的偏移量值。需要注意的是这个属性被声明成protected internal。啥意思呢？VisualOffset属性只能由同一个程序集的其它类访问，或Visual的子类访问。</p><p>VisualOpacity属性：获取或设置 Visual 的不透明度。</p><p>VisualEffect属性：获取或设置要应用于 Visual 的位图效果。</p><p>VisualTransform属性：获取或设置 Transform 的 Visual 值。</p><p>这些属性都只读为了解Visual类的基础，因为这些属性都被设计成protected internal，我们的控件虽然继承了这个Visual类，但在实际的使用过程中是感知不到这些属性的，自然也不能实操它们。</p><p>我们真正能在继承的控件中直接使用的是Visual类中被声明为public的方法成员。它们有以下几个：</p><ul><li>DependencyObject FindCommonVisualAncestor(DependencyObject otherVisual); //返回两个可视对象的公共上级。</li><li>bool IsAncestorOf(DependencyObject descendant); //确定可视对象是否为后代可视对象的上级。</li><li>bool IsDescendantOf(DependencyObject ancestor); //确定可视对象是否为上级可视对象的后代。</li><li>Point PointFromScreen(Point point); //将屏幕坐标中的 Point 转换为表示 Point 的当前坐标系的 Visual。</li><li>Point PointToScreen(Point point); //将表示 Point 的当前坐标系的 Visual 转换为屏幕坐标中的 Point。</li><li>GeneralTransform2DTo3D TransformToAncestor(Visual3D ancestor); //返回一个转换，该转换可用于将 Visual 中的坐标转换为可视对象的指定 Visual3D 上级。</li><li>GeneralTransform TransformToAncestor(Visual ancestor); //返回一个转换，该转换可用于将 Visual 中的坐标转换为可视对象的指定 Visual 上级。</li><li>GeneralTransform TransformToDescendant(Visual descendant); //返回一个转换，该转换可用于将 Visual 中的坐标转换为指定的可视对象后代。</li><li>GeneralTransform TransformToVisual(Visual visual); //返回一个转换，该转换可用于将 Visual 中的坐标转换为指定的可视对象。</li></ul><h2 id="UIElement类"><a href="#UIElement类" class="headerlink" title="UIElement类"></a><code>UIElement</code>类</h2><p>这个基类非常非常重要，理解了这个类，就理解了WPF所有控件1/3的知识与用法.</p><h3 id="路由事件"><a href="#路由事件" class="headerlink" title="路由事件"></a>路由事件</h3><p>UIElement基类定义了大量的路由事件。什么是路由事件？路由事件和xaml的可视化树概念相关，控件的事件被触发后，会沿着这棵树广播，有两个方向，要么往树的根部广播，要么往树的枝叶广播，如果不广播就是直接事件。</p><p>所以，路由事件分为冒泡事件和隧道事件，冒泡，是从触发源为出发点，依次传递到父节点，直到最后的根节点。隧道事件是不管谁是触发源，都是从根节点触发，到子节点，直到触发节点。</p><p>从空间上来说，冒泡事件和隧道事件是成对出现的。从时间来说，都是先触发隧道事件，然后是冒泡事件。从命名来说，隧道事件都是以Preview开头的事件。</p><p>根据命名规则，我们可以大致猜测出一个结果，带Key的基本都是与键盘相关的事件（如按下键位、抬起键位），带Mouse的基本都是与鼠标相关的事件（如左键单击、双击），带Stylus的基本都是与触摸相关的事件，具体用到哪一类型的事件，再详细查阅一下相关说明文档即可。</p><h3 id="依赖属性"><a href="#依赖属性" class="headerlink" title="依赖属性"></a>依赖属性</h3><p>UIElement基类还定义了大量的依赖属性。前面的章节中，在DependencyObject类中我们简单提到过依赖属性。在这里我们以UIElement基类的Visibility属性为例。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> Visibility Visibility <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> DependencyProperty VisibilityProperty<span class="token punctuation">;</span></code></pre><p>上面有两个成员，Visibility是普通的属性成员，VisibilityProperty是WPF的依赖属性成员，以Property结尾的字样作为WPF的依赖属性命名规则。而这两个成员合起来，才能被称为一个完整的依赖属性。这个Visibility 属性表示设置或获取控件的可见性。当我们要设置控件的可见性时，只需要如下设置即可。</p><p>Uid属性:获取或设置控件的唯一标识符，像人们的身份证一样。这个值默认是string.Empty。</p><p>Visibility属性：获取或设置控件的可见性。默认是Visible。</p><p>ClipToBounds属性：如果该值为true，表示进行裁剪，以适配它的父控件。比如有时候我们外面有一个Panel，里面的控件尺寸太大，势必会“撑破”外面的父控件，为了布局美观，只好削足适履。</p><p>Clip属性：用于剪裁区域大小的几何图形。需要注意的是，这个属性和上面的ClipToBounds属性是有区别的。ClipToBounds是裁剪控件自身，Clip是裁剪控件里面的内容。比如Image图像控件，我们在显示一张图时，就可以运用Clip进行裁剪后显示，通常在显示用户头像时裁剪成圆形时使用。如下所示</p><p>SnapsToDevicePixels属性：如果该值为true，表示控件的呈现是否应使用特定于设备的像素设置。意思是开启后可以最大限度的防锯齿效果，默认为false。</p><p>IsFocused属性：这是一个只读属性，表示当前控件是否有焦点。</p><p>IsEnabled属性：如果该值为true，表示禁用控件，反之启用控件。</p><p>IsHitTestVisible属性：获取或设置一个值，该值声明是否可以返回此元素作为其呈现内容的某些部分的点击测试结果。</p><p>IsVisible属性：这是一个只读属性，表示当前控件是否显示。</p><p>Focusable属性：如果该值为true，表示控件可以得到焦点，大部份内容控件都默认可以获得焦点。</p><p>IsKeyboardFocused属性：表示该控件是否具有键盘焦点。</p><p>IsMouseOver属性：表示鼠标是否在控件上面。通常在设计控件的样式（Style）时会用到。</p><p>IsStylusOver属性：表示触笔指针是否在控件的上方。</p><p>IsSealed属性：表示当前类型是否为只读类。</p><p>Opacity属性：设置控件的透明度，取值范围是0-1之间的double值。</p><p>OpacityMask属性：设置一个画笔，作为控件的蒙板。比如我们给一张图片设置一个掩码，就可以使用ImageBrush这种图片画笔来实现。</p><p>AllowDrop属性：表示控件是否允许拖拽操作。</p><p>RenderTransform属性：（非常重要）如果要设置控件的移动、缩放、旋转，需要这此属性进行设置。</p><hr><p>通过上述的代码分析，我们大致可以得出以下结论，UIElement基类为我们提供了一系列的鼠标、键盘和触摸事件，并提供了一些常用的依赖属性。它可以呈现继承它的所有控件，为控件布局时调整位置和大小，响应用户的输入，引发一系列的路由事件，并继承了IAnimatable动画接口，用于支持动画的某些方面。</p><h2 id="FrameworkElement类"><a href="#FrameworkElement类" class="headerlink" title="FrameworkElement类"></a><code>FrameworkElement</code>类</h2><p>FrameworkElement类继承于UIElement类，继承关系是：Object-&gt;DispatcherObject-&gt;DependencyObject-&gt;Visual-&gt;UIElement-&gt;FrameworkElement，它也是WPF控件的众多父类中最核心的基类，从这里开始，继承树开始分支，分别是Shape图形类、Control控件类和Panel布局类三个方向。</p><ol><li><p>布局系统定义： FrameworkElement 为中 UIElement定义为虚拟成员的某些方法提供特定的 WPF 框架级实现。 最值得注意的是， FrameworkElement 会密封某些 WPF 核心级布局替代，并改为提供派生类应替代的 WPF 框架级别的等效项。 例如，密封但 FrameworkElementArrangeCore 提供 ArrangeOverride。 这些更改反映了这样一个事实，即在 WPF 框架级别，有一个可以呈现任何 FrameworkElement 派生类的完整布局系统。 在 WPF 核心级别，将构建基于 WPF 的常规布局解决方案的某些成员已就位，但未定义布局系统的实际引擎。</p></li><li><p>逻辑树： 常规 WPF 编程模型通常以元素树的方式表示。 支持将元素树表示为逻辑树，以及支持在标记中定义该树的支持是在 级别实现的 FrameworkElement 。 但请注意， FrameworkElement 故意不定义内容模型，并将该责任留给派生类。</p></li><li><p>对象生存期事件： 了解何时初始化元素 (调用构造函数) 或首次将元素加载到逻辑树中时，这通常很有用。 FrameworkElement 定义多个与对象生存期相关的事件，这些事件为涉及元素的代码隐藏操作（例如添加更多子元素）提供有用的挂钩。</p></li><li><p>支持数据绑定和动态资源引用： 对数据绑定和资源的属性级支持由 DependencyProperty 类实现，并体现在属性系统中，但解析存储为 Expression (数据绑定和动态资源的编程构造) 中存储的成员值的能力由 FrameworkElement实现。</p></li><li><p>风格：FrameworkElement 定义 Style 属性。 但是， FrameworkElement 尚未定义对模板的支持或支持修饰器。 这些功能由控件类（如 和 ContentControl）Control引入。</p></li><li><p>更多动画支持： 某些动画支持已在 WPF 核心级别定义，但 FrameworkElement 通过实现 BeginStoryboard 和相关成员扩展了此支持。</p></li></ol><h3 id="属性分析"><a href="#属性分析" class="headerlink" title="属性分析"></a>属性分析</h3><ol><li>LayoutTransform 属性：获取或设置在执行布局时应应用于此元素的图形转换。这个属性与UIElement类中的RenderTransform属性有相似之处，所以我们在此将两者进行对比说明一下。两个属性都是Transform类型，而Transform是一个抽象类，这个类可以实现控件在平面中的各种转换，包括<ul><li>旋转 (System.Windows.Media.RotateTransform)</li><li>缩放 (System.Windows.Media.ScaleTransform)、</li><li>倾斜 (System.Windows.Media.SkewTransform) 、</li><li>平移 (System.Windows.Media.TranslateTransform)。</li></ul></li><li>Width属性：这是表示控件的宽度。与之相关的还有以下几个属性。<ul><li>ActualWidth：获取此元素的呈现宽度。只读属性。</li><li>MaxWidth：获取或设置一个控件的最大宽度。</li><li>MinWidth：获取或设置一个控件的最小宽度。</li></ul></li><li>Height属性：这是表示控件的高度<ul><li>ActualHeight：获取此元素的呈现高度。只读属性。</li><li>MaxHeight：获取或设置一个控件的最大高度。</li><li>MinHeight：获取或设置一个控件的最小高度。</li></ul></li><li>Tag属性：这个属性非常重要，它是object类型，意味着可以保存任意类型的对象值。它就像FrameworkElement类身上的一个小口袋，但确能容纳万物。我们通常会将一些与控件相关的数据临时存放在Tag属性中，当把控件作为参数传递时，小口袋里面的对象也随之传递过去了。</li><li>Name属性：获取或设置控件的标识名称。在同一个窗体、页、用户控件中，Name标识是唯一的。设置了控件的名称后，我们就可以在后端代码直接以这个标识去引用控件。</li><li>Margin属性：获取或设置控件的外边距。如下所示，我们定义了一个button的margin，距离左边、上边、右边和下边的像素分别是20、40、60、80。 <code>&lt;Button Margin=&quot;20 40 60 80&quot; /&gt;</code></li><li>HorizontalAlignment属性：设置控件的水平对齐方式。这个对齐方式是相对于父元素而言的，比如我们有一个Button控件，在外面还包裹了一层Grid控件，那么，设置Button控件的HorizontalAlignment属性，可以将Button控件分别显示在Grid控件的左边、中间、右边三个位置。</li><li>VerticalAlignment属性：设置控件的垂直对齐方式。与HorizontalAlignment属性类似，只是对方的方向不同，可以设置控件在垂直方向上是居于顶部、中间、还是底部三个位置。</li><li>ToolTip属性：获取或设置用户界面 (UI) 中为此元素显示的工具提示对象。指鼠标移到控件上方时显示的提示内容，它是一个object类型，意味着可以显示任意布局外观。</li><li>Parent属性：获取此元素的逻辑父元素。它是一个只读属性。</li></ol><p>WPF样式（Style）</p><p>什么是样式？简单来说，是指控件呈现时的样子。比如我们上班时会穿上工作服，休假时会穿上更个性化的衣服，我还是那个我，但是身上的衣服却不同，不管是颜色、款式，甚至包括我们的头饰、妆容，都会有所不同。</p><p>对于控件而言，同样都是button按钮，有的按钮是方的，有的是圆的，有的是蓝色，有的是红色，有的有文字，有的有图标，如果做到这些不同的样式呢？答案是Style属性。</p><p>Style属性：获取或设置此元素呈现时所使用的样式。</p><p>WPF资源（ResourceDictionary）</p><p>什么是资源？资源，也就是资源字典，也就是ResourceDictionary类，它提供一个哈希表/字典实现，其中包含组件所使用的 WPF 资源以及 WPF 应用程序的其他元素。我们可以把WPF的控件、窗体、Application应用所用到的一切资源都放在其中，将多个ResourceDictionary元素合并起来形成一个ResourceDictionary元素（ResourceDictionary也是一个隐式集合）。所以FrameworkElement类设计一个资源属性。</p><p>Resources 属性：获取或设置本地定义的资源字典。</p><p>WPF的数据上下文（DataContext）</p><p>前面的DependencyObject类一文中提到过数据驱动模式，控件的值绑定某个“变量”，当“变量”的值发生改变，控件的值也跟着改变</p><p>这个“变量”其实也是一个属性，且必须是一个属性（重点），它是谁的属性？WPF说，它是某个ViewModel类的属性。</p><p>假定我们有一个View窗体，窗体有一个TextBox控件；又假如我们还有一个ViewModel实体，这个实体中有一个叫Name的属性。如果我们要将TextBox控件的Text属性和ViewModel实体的Name属性成功的建立绑定关系，必备的条件是什么？</p><p>首先，由于View窗体继承于FrameworkElement类，所以每个窗体（或控件）都有一个叫DataContext的数据上下文属性。所以必备的条件是：ViewModel实体必须先赋值给View窗体的DataContext，ViewModel的Name属性才能绑定到TextBox控件的Text属性。换言之，领导之间要先搭好桥，下属和下属才好配合工作。这就是DataContext的概念和用途。</p><p>13.DataContext属性：获取或设置元素参与数据绑定时的数据上下文。</p><p>14.ContextMenu属性：设置与获取控件的上下文菜单 ，就是鼠标在控件上右键时弹出来的菜单。</p><p>15.Cursor属性：获取或设置在鼠标指针位于此元素上时显示的光标。</p><h3 id="事件分析"><a href="#事件分析" class="headerlink" title="事件分析"></a>事件分析</h3><p>FrameworkElement类提供了12个事件，一般比较常用的是：Initialized、Loaded、Unloaded、SizeChanged等事件。</p><h3 id="方法成员"><a href="#方法成员" class="headerlink" title="方法成员"></a>方法成员</h3><p>1.FindName(String)：表示查找某个元素。比如我们在窗体中要查找某个控件。</p><p>2.FindResource(Object)：查找某个资源。如果在调用对象上找不到该资源，则接下来搜索逻辑树中的父元素，然后搜索应用程序、主题，最后搜索系统资源。实在找不到就抛出异常。</p><p>3.TryFindResource(Object)：尝试去找某个资源。建议使用这个方法。</p><p>4.RegisterName (string , object );注册控件的名称到父控件上。</p><h2 id="布局控件"><a href="#布局控件" class="headerlink" title="布局控件"></a>布局控件</h2><p>在WPF中，布局的方式十分丰富，有按表格布局的Grid和UniformGrid栅格控件，有类似Winform拖放的Canvas控件，有按照垂直或水平排列的StackPanel控件，也有按照东西南北中方位排列的DockPanel控件，还有以瀑布流方式WrapPanel控件，以及按Tab页切换显示的TabControl控件。</p><p>这些布局控件都有一个共性，即可以在里面放多个内容控件，毕竟一个书架只能放一本书的话，那也太浪费了。于是它们之间就有了共同的Children属性，微软将它们抽象成Panel基类，并让这个基类继承于FrameworkElement类。</p><table><thead><tr><th>控件名称</th><th>布局方式</th></tr></thead><tbody><tr><td>Grid</td><td>网格，根据自定义行和列来设置控件的布局</td></tr><tr><td>StackPanel</td><td>栈式面板，包含的元素在竖直或水平方向排成一条直线</td></tr><tr><td>WrapPanel</td><td>自动折行面板，包含的元素在排满一行后，自动换行</td></tr><tr><td>DockPanel</td><td>泊靠式面板，内部的元素可以选择泊靠方向</td></tr><tr><td>UniformGrid</td><td>网格,UniformGrid就是Grid的简化版，每个单元格的大小相同。</td></tr><tr><td>Canvas</td><td>画布，内部元素根据像素为单位绝对坐标进行定位</td></tr><tr><td>Border</td><td>装饰的控件，此控件用于绘制边框及背景，在Border中只能有一个子控件</td></tr></tbody></table><p>这里面除了Border控件，其它控件都继承于Panel基类，下一节，我们将介绍Panel类。</p><h3 id="Panel基类"><a href="#Panel基类" class="headerlink" title="Panel基类"></a>Panel基类</h3><p>Panel其实是一个抽象类，不可以实例化，WPF所有的布局控件都从Panel继承而来，所以我们在学习布局控件之前，要先了解一下这个类。</p><p>从它的代码定义来看，它继承于FrameworkElement基类和IAddChild接口。所以，所有 Panel 元素都支持 FrameworkElement 定义的基本大小调整和定位属性，包括 Height、Width、HorizontalAlignment、VerticalAlignment、Margin 和 LayoutTransform。</p><p>它有一个Background属性，意味着所有的布局控件都可以设置背景颜色。另外，它还有一个Children属性，这是一个集合属性，也就是说，所有的布局控件都可以添加多个子元素。这一点从它继承的IAddChild接口也能得到印证。</p><p>Panel提供了GetZIndex和SetZIndex方法成员，分别表示获取某个元素的ZIndex顺序和设置某个元素的ZIndex顺序。</p><p>什么是ZIndex？这是Panel提供的一个附加属性。假如一个单行单列的Grid布局控件中有两个Button,正常情况下，这两个Button都会以撑满Grid的方式呈现在Grid中，那么，到底哪一个Button在上面，哪一个Button在下面呢？就看这两个Button的Panel.ZIndex附加属性的值，值越大越在上面，而值较小的那个Button将被上面的Button遮盖，从而在视觉上，用户只能看到一个Button。</p><h2 id="Control基类"><a href="#Control基类" class="headerlink" title="Control基类"></a>Control基类</h2><p>Control是许多控件的基类。比如最常见的按钮（Button）、单选(RadioButton)、复选（CheckBox）、文本框（TextBox）、ListBox、DataGrid、日期控件等等。这些控件通常用于展示程序的数据或获取用户输入的数据，我们可以将这一类型的控件称为内容控件或数据控件，它们与前面的布局控件有一定的区别，布局控件更专注于界面，而内容控件更专注于数据（业务）。</p><p>Control类虽然可以实例化，但是在界面上是不会有任何显示的。只有那些继承了Control的子类（控件）才会在界面上显示，而且所呈现的样子各不相同，为什么会是这样呢？</p><p>因为Control类提供了一个控件模板（ControlTemplate），而几乎所有的子类都对这个ControlTemplate进行了各自的实现，所以在呈现子类时，我们才会看到Button拥有Button的样子，TextBox拥有TextBox的样子。</p><p>可以这样定义template</p><pre class=" language-xaml"><code class="language-xaml"><Window x:Class="HelloWorld.MainWindow"        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"        xmlns:local="clr-namespace:HelloWorld"        mc:Ignorable="d"        Title="HelloWorld - www.wpfsoft.com" Height="350" Width="500">    <Control Margin="10">        <Control.Template>            <ControlTemplate TargetType="Control">                <Border Background="LightBlue">                    <TextBlock Text="WPF中文网" FontSize="20" HorizontalAlignment="Center" VerticalAlignment="Center"/>                </Border>            </ControlTemplate>        </Control.Template>    </Control></Window></code></pre><p>我们为Control的Template实例化了一个ControlTemplate对象，并在这个对象中增加了一个Border，在Border中又增加了一个TextBlock子元素，于是Control就有了这样一件新衣服。</p><p>在这里，我们要明白一个要点是，Control类的Template属性是ControlTemplate类型的。所以上面的代码才必须这样写才可以。而ControlTemplate又是什么东东？为什么在xaml中实例化时，后面要跟一句TargetType=”Control”？</p><h2 id="ContentControl类"><a href="#ContentControl类" class="headerlink" title="ContentControl类"></a><code>ContentControl</code>类</h2><p>它有一个Content属性，关键是这个属性的类型是object。也就是说，本质上，它可以接收任意引用类型的实例。</p><p>但是，通常情况下，Content属性接收UI控件。因为，ContentControl控件最终会把Content属性里面的内容显示到界面上。</p><pre class=" language-xaml"><code class="language-xaml"><Window x:Class="HelloWorld.MainWindow"        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"        xmlns:local="clr-namespace:HelloWorld"        mc:Ignorable="d"        Title="HelloWorld - www.wpfsoft.com" Height="350" Width="500">    <ContentControl Foreground="Red" FontSize="36" HorizontalAlignment="Center" VerticalAlignment="Center">        <ContentControl.ContentTemplate>            <DataTemplate>                <TextBlock Text="&#123;Binding&#125;" Foreground="Green" FontSize="16"/>            </DataTemplate>        </ContentControl.ContentTemplate>        WPF中文网    </ContentControl></Window></code></pre><p>ContentControl类的ContentTemplate属性是DataTemplate类型，所以我们在xaml中实例化了一个DataTemplate（数据模板）对象，并在其中增加了一个TextBlock控件，将TextBlock控件的Text属性写成了Binding形式，并设置了字体颜色和大小。</p><p>最终呈现的效果上图所示，字体颜色为绿色，大小为16。虽然ContentControl也设置了字体颜色为红色，大小为36，但是已经失效了。好比ContentControl给Content提供了一件红色的外衣，但是，我们又特地提供了一件绿色的外衣，于是，ContentControl就被绿了。</p><p>ContentControl控件能不能容纳多个子控件？</p><p>不能！因为ContentControl控件只能显示Content属性里面的内容，而Content属性是object，只能接收一个对象。</p><p>HasContent属性：表示ContentControl是否有内容。</p><p>ContentStringFormat属性：获取或设置ContentControl要显示字符串的格式。</p><p>ContentTemplateSelector属性：模板选择器，</p><h2 id="ButtonBase基类"><a href="#ButtonBase基类" class="headerlink" title="ButtonBase基类"></a>ButtonBase基类</h2><p>ButtonBase是一个抽象类，所以，它不能被实例化。我们只能在它的子类中去使用它提供的一些属性、事件或方法成员。它只有一个事件，就是Click单击事件，毕竟鼠标双击事件在它的Control基类就有了嘛。另外，它还有一个非常厉害的Command属性，这个属性其实是一个接口，起什么作用呢？就是在单击按钮时，去执行这个Command属性所指定的一个具体命令。</p><p>这个Command命令是WPF命令系统里面的角色，也是WPF优于Winform的一个具体表现，Command命令也是MVVM模式中最重要的一环。我们会在后面专门探讨WPF的命令系统。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.wpfsoft.com/">WPF中文网-重庆教主的教程</a></p>]]></content>
      
      
      <categories>
          
          <category> wpf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wpf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rabbit_mq-学习笔记1</title>
      <link href="2023/10/11/study-notes-mq-2023-10-11-rabbit-mq-xue-xi-bi-ji-1/"/>
      <url>2023/10/11/study-notes-mq-2023-10-11-rabbit-mq-xue-xi-bi-ji-1/</url>
      
        <content type="html"><![CDATA[<h2 id="MQ-的基础概念"><a href="#MQ-的基础概念" class="headerlink" title="MQ 的基础概念"></a>MQ 的基础概念</h2><h3 id="什么是-MQ"><a href="#什么是-MQ" class="headerlink" title="什么是 MQ"></a>什么是 MQ</h3><p>MQ(message queue)，从字面意思上看就个 FIFO 先入先出的队列，只不过队列中存放的内容是 message 而已，它是一种具有接收数据、存储数据、发送数据等功能的技术服务</p><h3 id="为啥要用-MQ"><a href="#为啥要用-MQ" class="headerlink" title="为啥要用 MQ"></a>为啥要用 MQ</h3><p>常见的 MQ 消息中间件有很多，例如 ActiveMQ、RabbitMQ、Kafka、RocketMQ 等等。那么为什么我们要使用它呢？因为它能很好的帮我解决一些复杂特殊的场景：</p><ul><li><p>削峰</p><p>举个例子，假设某订单系统每秒最多能处理一万次订单，也就是最多承受的 10000qps，这个处理能力应付正常时段的下单时绰绰有余，正常时段我们下单一秒后就能返回结果。但是在高峰期，如果有两万次下单操作系统是处理不了的，只能限制订单超过一万后不允许用户下单。使用消息队列做缓冲，我们可以取消这个限制，把一秒内下的订单分散成一段时间来处理，这时有些用户可能在下单十几秒后才能收到下单成功的操作，但是比不能下单的体验要好。</p></li><li><p>解耦</p><p>以电商应用为例，应用中有订单系统、库存系统、物流系统、支付系统。用户创建订单后，如果耦合调用库存系统、物流系统、支付系统，任何一个子系统出了故障，都会造成下单操作异常。当转变成基于消息队列的方式后，系统间调用的问题会减少很多，比如物流系统因为发生故障，需要几分钟来修复。在这几分钟的时间里，物流系统要处理的内存被缓存在消息队列中，用户的下单操作可以正常完成。当物流系统恢复后，继续处理订单信息即可，中单用户感受不到物流系统的故障，提升系统的可用性。</p></li><li><p>异步</p><p>有些服务间调用是异步的，例如 A 调用 B，B 需要花费很长时间执行，但是 A 需要知道 B 什么时候可以执行完，以前一般有两种方式，A 过一段时间去调用 B 的查询 api 查询。或者 A 提供一个 callback api， B 执行完之后调用 api 通知 A 服务。这两种方式都不是很优雅，使用消息队列，可以很方便解决这个问题，A 调用 B 服务后，只需要监听 B 处理完成的消息，当 B 处理完成后，会发送一条消息给 MQ，MQ 会将此消息转发给 A 服务。这样 A 服务既不用循环调用 B 的查询 api，也不用提供 callback api。同样 B 服务也不用做这些操作。A 服务还能及时的得到异步处理成功的消息。</p></li><li><p>分布式事务</p><p>分布式环境中, 订单,支付,物流系统可能是 3 个不同的应用, 相互之间进行服务的调用,但这会带来分布式事务的问题, 但是使用 MQ 可以解决这个问题, 通过二次提交, 详细看这里<a href="https://blog.csdn.net/qq_41714882/article/details/104324767">分布式事务,基于 MQ 实现最终一致性分布式事务</a></p></li></ul><h3 id="常见的-MQ"><a href="#常见的-MQ" class="headerlink" title="常见的 MQ"></a>常见的 MQ</h3><h4 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h4><p>优点：单机吞吐量万级，时效性 ms 级，可用性高，基于主从架构实现高可用性，消息可靠性较低的概率丢失数据<br>缺点：官方社区现在对 ActiveMQ 5.x 维护越来越少，高吞吐量场景较少使用。</p><h4 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h4><p>大数据的杀手锏，谈到大数据领域内的消息传输，则绕不开 Kafka，这款为大数据而生的消息中间件，以其百万级 TPS 的吞吐量名声大噪，迅速成为大数据领域的宠儿，在数据采集、传输、存储的过程中发挥着举足轻重的作用。目前已经被 LinkedIn，Uber, Twitter, Netflix 等大公司所采纳。</p><p>优点：性能卓越，吞吐量高，单机写入 TPS 约在百万条/秒，时效性 ms 级，可用性非常高；其次 kafka 是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据导致服务不可用，消费者采用 Pull 方式获取消息，消息有序，通过控制能够保证所有消息被消费且仅被消费一次。此外 kafka 有优秀的第三方 Kafka Web 管理界面 Kafka-Manager，在日志领域比较成熟，被多家公司和多个开源项目使用；最后 kafka 在功能支持方便面它功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用。</p><p>缺点：Kafka 单机超过 64 个队列/分区，Load 会发生明显的飙高现象，队列越多，load 越高，发送消息响应时间变长，使用短轮询方式，实时性取决于轮询间隔时间，消费失败不支持重试；支持消息顺序，但是一台代理宕机后，就会产生消息乱序，社区更新较慢；</p><p>选用场景：Kafka 主要特点是基于 Pull 的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输，适合产生大量数据的互联网服务的数据收集业务。大型公司建议可以选用，如果有日志采集功能，肯定是首选 kafka 了。</p><h4 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h4><p>RocketMQ 出自阿里巴巴的开源产品，用 Java 语言实现，在设计时参考了 Kafka，并做出了自己的一些改进。被阿里巴巴广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理，binglog 分发等场景。</p><p>优点：单机吞吐量十万级，可用性非常高，采用分布式架构，消息可以做到 0 丢失，MQ 功能较为完善，扩展性好，支持 10 亿级别的消息堆积，不会因为堆积导致性能下降，采用 java 语言实现。</p><p>缺点：支持的客户端语言不多，目前是 java 及 c++，其中 c++不成熟；社区活跃度一般,没有在 MQ 核心中去实现 JMS 等接口，有些系统要迁移需要修改大量代码。</p><p>选用场景：天生为金融互联网领域而生，对于可靠性要求很高的场景，尤其是电商里面的订单扣款，以及业务削峰，在大量交易涌入时，后端可能无法及时处理的情况。RoketMQ 在稳定性上可能更值得信赖，这些业务场景在阿里双 11 已经经历了多次考验，如果你的业务有上述并发场景，建议可以选择 RocketMQ。</p><h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><p>2007 年发布，是一个在 AMQP(高级消息队列协议)基础上完成的，可复用的企业消息系统，是当前最主流的消息中间件之一。</p><p>优点：由于 erlang 语言的高并发特性，性能较好；吞吐量到万级，MQ 功能比较完备、健壮、稳定、易用、跨平台、支持多种语言如 Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP 等，支持 AJAX 文档齐全；开源提供的管理界面非常棒，用起来很好用，社区活跃度高；更新频率相当高。</p><p>缺点：商业版需要收费，学习成本较高。</p><p>选用场景：结合 erlang 语言本身的并发优势，性能好时效性微秒级，社区活跃度也比较高，管理界面用起来十分方便，如果你的数据量没有那么大，中小型公司优先选择功能比较完备的 RabbitMQ。</p><h2 id="消息队列的协议"><a href="#消息队列的协议" class="headerlink" title="消息队列的协议"></a>消息队列的协议</h2><p>什么是协议<br>协议：是在 TCP/IP 协议基础之上构建的种约定成的规范和机制，目的是让客户端进行沟通和通讯。并且这种协议下规范必须具有持久性，高可用，高可靠的性能。</p><p>为什么不直接采用 TCP/IP 协议去传递消息？因为 TCP/IP 协议太过于简单，并不能承载消息的内容和载体，因此在此之上增加一些内容，给消息的传递分发高可用提供基础。</p><p>我们知道消息中间件负责数据的传递，存储，和分发消费三个部分，数据的存储和分发的过程中肯定要遵循某种约定成俗的规范，是采用底层的 TCP/IP，UDP 协议还是在这基础上自己构建等，而这些约定成俗的规范就称之为：协议。</p><h3 id="网络协议的三要素"><a href="#网络协议的三要素" class="headerlink" title="网络协议的三要素"></a>网络协议的三要素</h3><p>语法：语法是用户数据与控制信息的结构与格式，以及数据出现的顺序。</p><p>语义：语义是解控制信息每个部分的意义。它规定了需要发出何种控制信息以及完成的动作与做出什么样的响应。</p><p>时序：时序是对事件发生顺序的详细说明。</p><p>而消息中间件采用的并不是 http 协议，而常见的消息中间件协议有：OpenWire、AMQP、MQTT、Kafka、OpenMessage 协议</p><h3 id="为什么消息中间件不直接使用-http-协议呢？"><a href="#为什么消息中间件不直接使用-http-协议呢？" class="headerlink" title="为什么消息中间件不直接使用 http 协议呢？"></a>为什么消息中间件不直接使用 http 协议呢？</h3><ol><li><p>因为 http 请求报文头和响应报文头是比较复杂的，包含了 cookie、数据的加密解密、状态码、晌应码等附加的功能，但是对于个消息而言，我们并不需要这么复杂，也没有这个必要性，它其实就是负责数据传递，存储，分发就够，要追求的是高性能。尽量简洁，快速。</p></li><li><p>大部分情况下 http 大部分都是短链接，在实际的交互过程中，一个请求到响应很有可能会中断，中断以后就不会就行持久化，就会造成请求的丢失。这样就不利于消息中间件的业务场景，因为消息中间件可能是一个长期的获取消息的过程，出现问题和故障要对数据或消息就行持久化等，目的是为了保证消息和数据的高可靠和稳健的运行。</p></li></ol><h3 id="常用消息中间件协议"><a href="#常用消息中间件协议" class="headerlink" title="常用消息中间件协议"></a>常用消息中间件协议</h3><ul><li><p>AMQP 协议（Advanced Message Queuing Protocol—高级消息队列协议）</p><p>特性：分布式事务支、消息的持久化支持、高性能和高可靠的消息处理优势</p><p>AMQP 典型的实现者是 RabbitMQ、ACTIVEMQ 等，其中 RabbitMQ 由 Erlang 开发</p></li><li><p>MQTT 协议（Message Queueing Telemetry Transport—消息队列遥测传输协议）</p><p>它是一种基于发布/订阅（publish/subscribe）模式的”轻量级”通讯协议，该协议构建于 TCP/IP 协议上，由 IBM 在 1999 年发布。</p><p>特点：轻量、结构简单、传输快、不支持事务、没有持久化设计</p><p>应用场景：适用于计算能力有限、低带宽、网络不稳定的场景</p><p>支持者：RabbitMQ、ACTIVEMQ（默认情况下关闭，需要打开）</p></li><li><p>OpenMessage 协议</p><p>是近几年由阿里、雅虎和滴滴出行、 Stremalio 等公司共同参与创立的分布式消息中间件、流处理等领域的应用开发标准。</p><p>特点：结构简单、解析速度快、支持事务和持久化设计</p></li><li><p>Kafka 协议</p><p>基于 TCP/IP 的二进制协议。消息内部是通过长度来分割，由些基本数据类型组成。</p><p>特点：结构简单、解析速度快、无事务支持、有持久化设计</p></li></ul><h2 id="消息分发策略"><a href="#消息分发策略" class="headerlink" title="消息分发策略"></a>消息分发策略</h2><p>消息队列一般有以下几个角色</p><ol><li><code>Producer</code>: 生产者。负责产生和发送消息</li><li><code>Broker</code>: 消息处理中心。负责消息存储、确认、重试等，一般其中会包含多个 queue</li><li><code>Consumer</code>：消息消费者。负责从 Broker 中获取消息，并进行相应处理</li></ol><p>生产者产生消息后，MQ 进行存储，消费者如何获得消息呢？</p><p>一般的获取方式无外乎外推（push）或者（pull）两种方式，典型的 git 就有推拉机制，我们发送的 http 请求就是一种典型的拉取数据库数据返回的过程。而消息队列 MQ 是一种推送过程，而这些推机制会适用到很多的业务场景，也有很多对应的推机制策略</p><h3 id="场景分析一"><a href="#场景分析一" class="headerlink" title="场景分析一"></a>场景分析一</h3><p>比如我在 APP 上下了一个订单，我们的系统和服务很多，我们如何得知这个消息被那个系统或者那些服务或者系统进行消费，此时就需要一个消费策略，或称为消费的方法论。</p><h3 id="场景分析二"><a href="#场景分析二" class="headerlink" title="场景分析二"></a>场景分析二</h3><p>在发送消息的过程中可能会出现异常，或者网络的抖动，故障等等因为造成消息的无法消费，比如用户在下订单，消费 MQ 接受，订单系统出现故障，导致用户支付失败，那么这个时候就需要消息中间件就必须支持消息重试机制策略。也就是支持：出现问题和故障的情况下，消息不丢失还可以进行重发</p><p>消息分发策略的机制和对比</p><table><thead><tr><th></th><th>ActiveMQ</th><th>RabbitMQ</th><th>Kafka</th><th>RocketMQ</th></tr></thead><tbody><tr><td>发布订阅</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>轮询分发</td><td>支持</td><td>支持</td><td>支持</td><td>/</td></tr><tr><td>公平分发</td><td>/</td><td>支持</td><td>支持</td><td>/</td></tr><tr><td>重发</td><td>支持</td><td>支持</td><td>/</td><td>支持</td></tr><tr><td>消息拉取</td><td>/</td><td>支持</td><td>支持</td><td>支持</td></tr></tbody></table><h2 id="消息的高可用"><a href="#消息的高可用" class="headerlink" title="消息的高可用"></a>消息的高可用</h2><p>所谓高可用：是指产品在规定的条件和规定的时刻或时间内处于可执行规定功能状态的能力。</p><p>当业务量增加时，请求也过大，一台消息中间件服务器的会触及硬件（CPU、内存、磁盘）的极限，一台消息服务器你已经无法满足业务的需求，所以消息中间件必须支持集群部署，来达到高可用的目的。</p><h3 id="Master-slave-主从共享数据"><a href="#Master-slave-主从共享数据" class="headerlink" title="Master-slave 主从共享数据"></a>Master-slave 主从共享数据</h3><p>将多个消息服务器 Broker 连接共享一块消息存储空间，其中 Master 节点负责消息的写入。客户端会将消息写入到 Master 节点，一旦 Master 挂掉，slave 节点继续服务，从而形成高可用。</p><h3 id="Master-slave-主从同步部署方式"><a href="#Master-slave-主从同步部署方式" class="headerlink" title="Master-slave 主从同步部署方式"></a>Master-slave 主从同步部署方式</h3><p>该模式写入消息同样在 Master 节点上，但是主结点会同步数据到 slave 节点形成副本，和 zookeeper 或者 redis 主从机制很类似。这样可以达到负载均衡的效果，如果消费者有多个，就可以到不同的节点进行消费，但是消息的拷贝和同步会占用很大的贷款和网络资源。在 rabbitMQ 中会有使用</p><h3 id="多主集群同步部署模式"><a href="#多主集群同步部署模式" class="headerlink" title="多主集群同步部署模式"></a>多主集群同步部署模式</h3><p>todo</p><h3 id="多主集群转发部署模式"><a href="#多主集群转发部署模式" class="headerlink" title="多主集群转发部署模式"></a>多主集群转发部署模式</h3><p>todo</p><h3 id="Master-slave-与-Breoker-cluster-组合的方案"><a href="#Master-slave-与-Breoker-cluster-组合的方案" class="headerlink" title="Master-slave 与 Breoker-cluster 组合的方案"></a>Master-slave 与 Breoker-cluster 组合的方案</h3><p>todo</p><h2 id="安装启动"><a href="#安装启动" class="headerlink" title="安装启动"></a>安装启动</h2><p>这里使用 docker 安装</p><pre class=" language-shell"><code class="language-shell"># 拉取镜像, 带management结尾的会有一个网页的管理插件,推荐用这个镜像docker pull rabbitmq:management# 运行镜像docker run -d --name rabbitmq -e RABBITMQ_DEFAULT_USER=guest -e RABBITMQ_DEFAULT_PASS=123456 -v=/d/DB/RabbitMQ:/var/lib/rabbitmq -p 15672:15672 -p 5672:5672 rabbitmq:management</code></pre><h2 id="RabbitMQ-架构组成"><a href="#RabbitMQ-架构组成" class="headerlink" title="RabbitMQ 架构组成"></a>RabbitMQ 架构组成</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/028770482d7562c40fd7a4408d22a57d.png" alt="img"></p><ul><li><p><code>Broker</code>：就是 RabbitMQ 服务，用于接收和分发消息，接受客户端的连接，实现 AMQP 实体服务。</p></li><li><p><code>Virtual host</code>：出于多租户和安全因素设计的，把 AMQP 的基本组件划分到一个虚拟的分组中，类似于网络中的 namespace 概念。当多个不同的用户使用同一个 RabbitMQ server 提供的服务时，可以划分出多个 vhost，每个用户在自己的 vhost 创建 exchange 或 queue 等。</p></li><li><p><code>Connection</code>：连接，生产者/消费者与 Broker 之间的 TCP 网络连接。</p></li><li><p><code>Channel</code>：网络信道，如果每一次访问 RabbitMQ 都建立一个 Connection，在消息量大的时候建立连接的开销将是巨大的，效率也较低。Channel 是在 connection 内部建立的逻辑连接，如果应用程序支持多线程，通常每个 thread 创建单独的 channel 进行通讯，AMQP method 包含了 channel id 帮助客户端和 message broker 识别 channel，所以 channel 之间是完全隔离的。<strong>Channel 作为轻量级的 Connection 极大减少了操作系统建立 TCP connection 的开销。</strong></p></li><li><p><code>Message</code>：消息，服务与应用程序之间传送的数据，由 Properties 和 body 组成，Properties 可是对消息进行修饰，比如消息的优先级，延迟等高级特性，Body 则就是消息体的内容。</p></li><li><p><code>Virtual Host</code>：虚拟节点，用于进行逻辑隔离，最上层的消息路由，一个虚拟主机理由可以有若干个 Exhange 和 Queue，同一个虚拟主机里面不能有相同名字的 Exchange</p></li><li><p><code>Exchange</code>：交换机，是 message 到达 broker 的第一站，用于根据分发规则、匹配查询表中的 routing key，分发消息到 queue 中去，不具备消息存储的功能。常用的类型有：direct、topic、fanout。</p></li><li><p><code>Bindings</code>：exchange 和 queue 之间的虚拟连接，binding 中可以包含 routing key，Binding 信息被保存到 exchange 中的查询表中，用于 message 的分发依据。</p></li><li><p><code>Routing key</code>：是一个路由规则，虚拟机可以用它来确定如何路由一个特定消息</p></li><li><p><code>Queue</code>：消息队列，保存消息并将它们转发给消费者进行消费。</p></li></ul><h2 id="RabbitMQ-四大核心概念"><a href="#RabbitMQ-四大核心概念" class="headerlink" title="RabbitMQ 四大核心概念"></a>RabbitMQ 四大核心概念</h2><ul><li><p>生产者：产生数据发送消息的程序是生产者。</p></li><li><p>交换机：交换机是 RabbitMQ 非常重要的一个部件，一方面它接收来自生产者的消息，另一方面它将消息推送到队列中。交换机必须确切知道如何处理它接收到的消息，是将这些消息推送到特定队列还是推送到多个队列，亦或者是把消息丢弃，这个是由交换机类型决定的。</p></li><li><p>队列：队列是 RabbitMQ 内部使用的一种数据结构，尽管消息流经 RabbitMQ 和应用程序，但它们只能存储在队列中。队列仅受主机的内存和磁盘限制的约束，本质上是一个大的消息缓冲区。许多生产者可以将消息发送到一个队列，许多消费者可以尝试从一个队列接收数据。</p></li><li><p>消费者：消费与接收具有相似的含义。消费者大多时候是一个等待接收消息的程序。请注意生产者，消费者和消息中间件很多时候并不在同一机器上。同一个应用程序既可以是生产者又是可以是消费者。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/8e2a59f880be1b32a45465c2de9912a7.png" alt="img"></p><h2 id="RabbitMQ-角色分类"><a href="#RabbitMQ-角色分类" class="headerlink" title="RabbitMQ 角色分类"></a>RabbitMQ 角色分类</h2><p>打开 rabbitmq 的网页管理之后,登录之后,用户有以下几种角色</p><ul><li><code>none</code>: 不能访问 management plugin</li><li><code>management</code>: 查看自己相关节点信息<ul><li>列出自己可以通过 AMQP 登入的虚拟机</li><li>查看自己的虚拟机节点 virtual hosts 的 queues，exchanges 和 bindings 信息</li><li>查看和关闭自己的 channels 和 connections</li><li>查看有关自己的虚拟机节点 virtual hosts 的统计信息。包括其他用户在这个节点 virtual hosts 中的活动信息</li></ul></li><li><code>Policymaker</code>:<ul><li>包含 management 所有权跟</li><li>查看和创建和删除自己的 virtual hosts 所属的 policies 和 parameters 信息</li></ul></li><li><code>Monitoring</code><ul><li>包含 management 所有权限</li><li>罗列出所有的 virtual hosts，包括不能登录的 virtual hosts</li><li>查看其他用户的 connections 和 channels 信息</li><li>查看节点级别的数据如 clustering 和 memory 使用情况</li><li>查看所有的 virtual hosts 的全局统计信息。</li></ul></li><li><code>Administrator</code><ul><li>最高权限</li><li>可以创建和删除 virtual hosts</li><li>可以查看，创建和删除 users</li><li>查看创建 permissions</li><li>关闭所有用户的 connections</li></ul></li></ul><h2 id="RabbitMQ-交换机"><a href="#RabbitMQ-交换机" class="headerlink" title="RabbitMQ 交换机"></a>RabbitMQ 交换机</h2><p>RabbitMQ 消息传递模型的核心思想是：<strong>生产者生产的消息从不会直接发送到队列</strong>。实际上，通常生产者甚至都不知道这些消息传递传递到了哪些队列中。</p><p>相反，<strong>生产者只能将消息发送到交换机(exchange)，</strong>交换机工作的内容非常简单，一方面它接收来自生产者的消息，另一方面将它们推入队列。交换机必须确切知道如何处理收到的消息。是应该把这些消息放到特定队列还是说把他们到许多队列中还是说应该丢弃它们。这就的由交换机的类型来决定。</p><p>Exchanges 的类型总共有四种：直接(<code>direct</code>)、主题(<code>topic</code>)、标题(<code>headers</code>)、扇出(<code>fanout</code>)</p><h3 id="无名交换机"><a href="#无名交换机" class="headerlink" title="无名交换机"></a>无名交换机</h3><p>如果我们在代码中不指定交换机,但仍然能够将消息发送到队列。这是因为我们使用的是默认交换机，我们通过空字符串(“”)进行标识。</p><p><code>MQChannel.BasicPublish(exchange: string.Empty,routingKey: &quot;hello&quot;,basicProperties: null,body: body);</code></p><h3 id="临时队列"><a href="#临时队列" class="headerlink" title="临时队列"></a>临时队列</h3><p>上文所有例子中我们都使用的是具有特定名称的队列，队列的名称我们来说至关重要，用于指定消费者去消费哪个队列的消息。每当我们连接到 RabbitMQ 时都需要一个全新的空队列，但很多时候我们可能不想指定队列名字，只想实验测试一下，此时我们可以创建一个具有<strong>随机名称的队列，一旦我们断开了消费者的连接，该队列将被自动删除。这就是临时队列。</strong></p><h3 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h3><p>生产者发消息都是发给交换机，由交换机对消息进行路由到队列，那么交换机这么知道将消息发给哪个队列呢？这就是 routing-key 要做的事，它是 exchange 和 queue 之间的桥梁，告诉我们 exchange 和那个队列进行了绑定关系。比如说下面这张图告诉我们的就是 X 与 Q1 和 Q2 进行了绑定</p><h3 id="Fanout模式——RabbitMQ-发布订阅模式"><a href="#Fanout模式——RabbitMQ-发布订阅模式" class="headerlink" title="Fanout模式——RabbitMQ 发布订阅模式"></a><code>Fanout</code>模式——RabbitMQ 发布订阅模式</h3><p>Fanout 这种类型非常简单，它是将接收到的所有消息广播到它知道的所有队列中。RabbitMQ 系统中默认有一个 fanout 类型的交换机。</p><p>todo:写代码演示</p><h3 id="Direct模式——RabbitMQ-路由模式"><a href="#Direct模式——RabbitMQ-路由模式" class="headerlink" title="Direct模式——RabbitMQ 路由模式"></a><code>Direct</code>模式——RabbitMQ 路由模式</h3><p>上述 Fanout 这种交换类型并不能给我们带来很大的灵活性，它只能进行无意识的广播，在这里我们将使用 direct 类型来替换，direct 类型的工作方式是：消息只去到它绑定的 routingKey 队列中去。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3d7c96c1569ca173ad7522b8f1444e9a.png" alt="Direct"></p><p>交换机 X 为 direct 模式，绑定了两个队列，队列 Q1 绑定键为 orange，队列 Q2 绑定键有两个：一个绑定键为 black，另一个绑定键为 green。</p><p>在这种绑定情况下，生产者发布消息到 exchange 上，绑定键为 orange 的消息会被发布到队列 Q1。绑定键为 blackgreen 和的消息会被发布到队列 Q2，其他消息类型的消息将被丢弃。</p><p>Fanout 模式本质就是 Direct 模式的一种特殊情况，如果 direct 类型的交换机绑定的多个队列的 routing-key 都相同，也就类似 fanout 模式，就跟广播差不多。</p><p>todo:写代码演示</p><h3 id="Topics模式——RabbitMQ-主题模式"><a href="#Topics模式——RabbitMQ-主题模式" class="headerlink" title="Topics模式——RabbitMQ 主题模式"></a><code>Topics</code>模式——RabbitMQ 主题模式</h3><p>尽管使用 direct 交换机改进了我们的系统，但是它仍然存在局限性。比方说我们想接收的日志类型有 error 和 warning 两种，但某个队列只想 error 的消息，那这个时候 direct 交换机就办不到了。这就引入了 topic 类型。</p><p>发送到类型是 topic 交换机的消息的 routing_key 不能随意写，必须满足一定的要求，它必须是一个单词列表，以点号分隔开。这些单词可以是任意单词，比如说：“stock.usd.nyse”、“nyse.vmw”、“quick.orange.rabbit” 这种类型的。当然这个单词列表最多不能超过 255 个字节。</p><ul><li>星号<code>*</code>可以代替一个单词</li><li>井号<code>#</code>可以替代零个或多个单词</li></ul><p>此外，当队列绑定关系是下列情况时需要引起注意：</p><p>在这个规则列表中，其中有两个替换符是大家需要注意的：</p><ul><li>当一个队列绑定键是<code>#</code>,那么这个队列将接收所有数据，就有点像 fanout</li><li>如果队列绑定键当中没有<code>#</code>和<code>*</code>出现，那么该队列绑定类型就是 direct</li></ul><p>假设有两个队列, 分别绑定的 routing_key 是</p><ol><li>Q1:<code>*.orange.*</code></li><li>Q2:<code>*.*.rabbit</code>和<code>lazy.#</code></li></ol><p>那么使用以下 routing_key 发送,接受情况如下</p><p>quick.orange.rabbit 被队列 Q1Q2 接收到<br>lazy.orange.elephant 被队列 Q1Q2 接收到<br>quick.orange.fox 被队列 Q1 接收到<br>lazy.brown.fox 被队列 Q2 接收到<br>lazy.pink.rabbit 虽然满足两个绑定但只被队列 Q2 接收一次<br>quick.brown.fox 不匹配任何绑定不会被任何队列接收到会被丢弃<br>quick.orange.male.rabbit 是四个单词不匹配任何绑定会被丢弃<br>lazy.orange.male.rabbit 是四个单词但匹配 Q2</p><h2 id="RabbitMQ-消息模式"><a href="#RabbitMQ-消息模式" class="headerlink" title="RabbitMQ 消息模式"></a>RabbitMQ 消息模式</h2><p>官方提供了 6 中模式: Hello World、Work Queues、Publish/Subscribe、Routing、Topics、RPC。</p><p>其中 Publish/Subscribe、Routing、Topics 三种模式可以统一归为 Exchange 模式，只是创建时交换机的类型不一样，分别是 fanout、direct、topic 三种交换机类型。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/41d4a9039e12467eff83e0d3dee7fb0b.png" alt="img"></p><p>注意：简单模式和工作模式虽然途中没有画出交换机，但是都会有一个默认的交换机，类型为 direct</p><h3 id="简单模式"><a href="#简单模式" class="headerlink" title="简单模式"></a>简单模式</h3><p>一个生产者，一个消费者，一个队列，采用默认交换机。可以理解为生产者 P 发送消息到队列 Q，一个消费者 C 接收。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//生产者</span><span class="token comment" spellcheck="true">// 注意队列声明之后不可以修改,比如把durable改成true</span>MQChannel<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span>queue<span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> durable<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span> exclusive<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span> autoDelete<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span> arguments<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">string</span> message <span class="token operator">=</span> <span class="token function">TimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> body <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>MQChannel<span class="token punctuation">.</span><span class="token function">BasicPublish</span><span class="token punctuation">(</span>exchange<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">,</span> routingKey<span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> basicProperties<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> body<span class="token punctuation">:</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//消费者</span><span class="token keyword">var</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventingBasicConsumer</span><span class="token punctuation">(</span>MQChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>consumer<span class="token punctuation">.</span>Received <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>sender<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> body <span class="token operator">=</span> args<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> message <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    Logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;consumerName&amp;#125;已消费: &amp;#123;message&amp;#125;"</span><span class="token punctuation">,</span> consumerName<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>MQChannel<span class="token punctuation">.</span><span class="token function">BasicConsume</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><p>一个生产者，多个消费者，一个队列，采用默认交换机。可以理解为生产者 P 发送消息到队列 Q，可以由多个消费者 C1、C2 进行接收。</p><p>生产者</p><pre class=" language-csharp"><code class="language-csharp"> <span class="token comment" spellcheck="true">// 同时使用 durable 和 Persistent 为true,就可以将消息持久化到Mq中</span> MQChannel<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span><span class="token string">"task_queue"</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将 BasicQos 方法与 prefetchCount = 1 设置一起使用。这告诉 RabbitMQ 不要付出更多 一次给工作人员一条消息。或者，换句话说，不要调度 给工作人员的新消息，直到它处理并确认 前一个</span> MQChannel<span class="token punctuation">.</span><span class="token function">BasicQos</span><span class="token punctuation">(</span>prefetchSize<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> prefetchCount<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">global</span><span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token function">TimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> messageByte <span class="token operator">=</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">.</span>Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> properties <span class="token operator">=</span> MQChannel<span class="token punctuation">.</span><span class="token function">CreateBasicProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> properties<span class="token punctuation">.</span>Persistent <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span> <span class="token keyword">using</span> PeriodicTimer periodicTimer <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromMilliseconds</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">await</span> periodicTimer<span class="token punctuation">.</span><span class="token function">WaitForNextTickAsync</span><span class="token punctuation">(</span>stoppingToken<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         MQChannel<span class="token punctuation">.</span><span class="token function">BasicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"task_queue"</span><span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">,</span> properties<span class="token punctuation">,</span> messageByte<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//Logger.LogInformation("生产者已发送消息");</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OperationCanceledException</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     periodicTimer<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>消费者</p><pre class=" language-csharp"><code class="language-csharp"><span class="token function">CreateBasicConsumer</span><span class="token punctuation">(</span><span class="token string">"Consumer1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">CreateBasicConsumer</span><span class="token punctuation">(</span><span class="token string">"Consumer2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">CreateBasicConsumer</span><span class="token punctuation">(</span><span class="token string">"Consumer3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">CreateBasicConsumer</span><span class="token punctuation">(</span><span class="token string">"Consumer4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">CreateBasicConsumer</span><span class="token punctuation">(</span><span class="token string">"Consumer5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">CreateBasicConsumer</span><span class="token punctuation">(</span><span class="token string">"Consumer6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">CreateBasicConsumer</span><span class="token punctuation">(</span><span class="token string">"Consumer7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">CreateBasicConsumer</span><span class="token punctuation">(</span><span class="token keyword">string</span> consumerName<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncEventingBasicConsumer</span><span class="token punctuation">(</span>MQChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span>Received <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>sender<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> Task<span class="token punctuation">.</span><span class="token function">Delay</span><span class="token punctuation">(</span>Random<span class="token punctuation">.</span>Shared<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> body <span class="token operator">=</span> args<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> message <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        Logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;consumerName&amp;#125;已消费: &amp;#123;message&amp;#125;"</span><span class="token punctuation">,</span> consumerName<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 手动ack</span>        MQChannel<span class="token punctuation">.</span><span class="token function">BasicAck</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>DeliveryTag<span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    MQChannel<span class="token punctuation">.</span><span class="token function">BasicConsume</span><span class="token punctuation">(</span><span class="token string">"task_queue"</span><span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="发布-订阅模式（fanout）"><a href="#发布-订阅模式（fanout）" class="headerlink" title="发布/订阅模式（fanout）"></a>发布/订阅模式（fanout）</h3><p>功能：一个生产者、一个 fanout 类型的交换机、多个队列、多个消费者。一个生产者发送的消息会被多个消费者获取。其中 fanout 类型就是发布订阅模式，只有订阅该生产者的消费者会收到消息。</p><ol><li>先声明两个队列, Type 是<code>classic</code></li><li>然后在交换机用默认的<code>amq.fanout</code>绑定两个队列</li><li>然后在交换机中发送一条消息</li><li>回到队列中,就能看到两个队列都收到这个消息了</li></ol><pre class=" language-csharp"><code class="language-csharp">MQChannel<span class="token punctuation">.</span><span class="token function">ExchangeDeclare</span><span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">,</span> ExchangeType<span class="token punctuation">.</span>Fanout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当我们不向 QueueDeclare（） 提供任何参数时，我们会创建一个具有生成名称的非持久、独占、自动删除队列</span><span class="token keyword">var</span> queueName <span class="token operator">=</span> MQChannel<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span><span class="token string">"subAndPub"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//我们已经创建了一个扇出交换和一个队列。现在我们需要 告诉交易所将消息发送到我们的队列。这种关系 交换和队列之间称为绑定。</span>MQChannel<span class="token punctuation">.</span><span class="token function">QueueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">:</span> queueName<span class="token punctuation">,</span>          exchange<span class="token punctuation">:</span> <span class="token string">"logs"</span><span class="token punctuation">,</span>          routingKey<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//发送接受和其他无异</span></code></pre><h3 id="路由模式（direct）"><a href="#路由模式（direct）" class="headerlink" title="路由模式（direct）"></a>路由模式（direct）</h3><p>功能：一个生产者，一个 direct 类型的交换机，多个队列，交换机与队列之间通过 routing-key 进行关联绑定，多个消费者。生产者发送消息到交换机并且要指定 routing-key，然后消息根据这交换机与队列之间的 routing-key 绑定规则进行路由被指定消费者消费。</p><ol><li>首先我们使用<code>direct</code>类型的交换机</li><li>然后声明两个队列, 并绑定刚才的交换机, 设置两者绑定的 routing-key, 比如一个可以叫<code>course</code>,另外一个叫<code>order</code></li><li>然后在交换机中发一条消息, 指定 routing-key,就能看到只有指定的队列才会收到消息</li></ol><p>生产者</p><pre class=" language-csharp"><code class="language-csharp">MQChannel<span class="token punctuation">.</span><span class="token function">ExchangeDeclare</span><span class="token punctuation">(</span>exchange<span class="token punctuation">:</span> <span class="token string">"direct_logs"</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> ExchangeType<span class="token punctuation">.</span>Direct<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> severity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"info"</span><span class="token punctuation">,</span> <span class="token string">"warning"</span><span class="token punctuation">,</span> <span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"Critical"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> severity<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">string</span> queueName <span class="token operator">=</span> item <span class="token operator">+</span> <span class="token string">"_queue"</span><span class="token punctuation">;</span>    MQChannel<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span>queue<span class="token punctuation">:</span> queueName<span class="token punctuation">)</span><span class="token punctuation">;</span>    MQChannel<span class="token punctuation">.</span><span class="token function">QueueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token string">"direct_logs"</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> body <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span><span class="token function">TimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">using</span> PeriodicTimer periodicTimer <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>TimeSpan<span class="token punctuation">.</span><span class="token function">FromSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">await</span> periodicTimer<span class="token punctuation">.</span><span class="token function">WaitForNextTickAsync</span><span class="token punctuation">(</span>stoppingToken<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> Random<span class="token punctuation">.</span>Shared<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MQChannel<span class="token punctuation">.</span><span class="token function">BasicPublish</span><span class="token punctuation">(</span><span class="token string">"direct_logs"</span><span class="token punctuation">,</span> severity<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>消费者</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">protected</span> <span class="token keyword">override</span> Task <span class="token function">ExecuteAsync</span><span class="token punctuation">(</span>CancellationToken stoppingToken<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> severity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"info"</span><span class="token punctuation">,</span> <span class="token string">"warning"</span><span class="token punctuation">,</span> <span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"Critical"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> severity<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        _eventingBasicConsumers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">CreateConsumer</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Task<span class="token punctuation">.</span>CompletedTask<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">private</span> EventingBasicConsumer <span class="token function">CreateConsumer</span><span class="token punctuation">(</span><span class="token keyword">string</span> routingKey<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventingBasicConsumer</span><span class="token punctuation">(</span>MQChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">string</span> caseKey <span class="token operator">=</span> routingKey<span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span>Received <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>model<span class="token punctuation">,</span> ea<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> ea<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> message <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>caseKey<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"Critical"</span><span class="token punctuation">:</span>                Logger<span class="token punctuation">.</span><span class="token function">LogCritical</span><span class="token punctuation">(</span><span class="token string">" [x] &amp;#123;message&amp;#125;"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"info"</span><span class="token punctuation">:</span>                Logger<span class="token punctuation">.</span><span class="token function">LogInformation</span><span class="token punctuation">(</span><span class="token string">" [x] &amp;#123;message&amp;#125;"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"warning"</span><span class="token punctuation">:</span>                Logger<span class="token punctuation">.</span><span class="token function">LogWarning</span><span class="token punctuation">(</span><span class="token string">" [x] &amp;#123;message&amp;#125;"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                Logger<span class="token punctuation">.</span><span class="token function">LogDebug</span><span class="token punctuation">(</span><span class="token string">" [x] &amp;#123;message&amp;#125;"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    MQChannel<span class="token punctuation">.</span><span class="token function">BasicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">:</span> routingKey <span class="token operator">+</span> <span class="token string">"_queue"</span><span class="token punctuation">,</span> autoAck<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span> consumer<span class="token punctuation">:</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> consumer<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="主题模式（topic）"><a href="#主题模式（topic）" class="headerlink" title="主题模式（topic）"></a>主题模式（topic）</h3><p>一个生产者，一个 topic 类型的交换机，多个队列，交换机与队列之间通过 routing-key 进行关联绑定，多个消费者。生产者发送消息到交换机并且要指定 routing-key，然后消息根据这交换机与队列之间的 routing-key 绑定规则进行路由被指定消费者消费。与路由模式不同是 routing-key 有指定的队则，可以更加的通用，满足更过的场景。routing-key 的规则如下：</p><ul><li><code>#</code>：匹配一个或者多个词，例如 lazy.# 可以匹配 lazy.xxx 或者 lazy.xxx.xxx</li><li><code>*</code>：只能匹配一个词，例如 lazy.* 只能匹配 lazy.xxx</li></ul><ol><li>依旧使用一个 type 是<code>topic</code>的交换机</li><li>绑定两个队列, key 分别是<code>com.#</code>,<code>*com.*</code></li><li>发送消息设置 key 为<code>com.abc.123</code></li></ol><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">using</span> RabbitMQ<span class="token punctuation">.</span>Client<span class="token punctuation">;</span><span class="token keyword">using</span> RabbitMQ<span class="token punctuation">.</span>Client<span class="token punctuation">.</span>Events<span class="token punctuation">;</span><span class="token keyword">var</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> HostName <span class="token operator">=</span> <span class="token string">"localhost"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">var</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">CreateConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">var</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">CreateModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">ExchangeDeclare</span><span class="token punctuation">(</span>exchange<span class="token punctuation">:</span> <span class="token string">"topic_logs"</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> ExchangeType<span class="token punctuation">.</span>Topic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// declare a server-named queue</span><span class="token keyword">var</span> queueName <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>QueueName<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>Length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span>Error<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Usage: &amp;#123;0&amp;#125; [binding_key...]"</span><span class="token punctuation">,</span>                            Environment<span class="token punctuation">.</span><span class="token function">GetCommandLineArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">" Press [enter] to exit."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Environment<span class="token punctuation">.</span>ExitCode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> bindingKey <span class="token keyword">in</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    channel<span class="token punctuation">.</span><span class="token function">QueueBind</span><span class="token punctuation">(</span>queue<span class="token punctuation">:</span> queueName<span class="token punctuation">,</span>                      exchange<span class="token punctuation">:</span> <span class="token string">"topic_logs"</span><span class="token punctuation">,</span>                      routingKey<span class="token punctuation">:</span> bindingKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">" [*] Waiting for messages. To exit press CTRL+C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventingBasicConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>consumer<span class="token punctuation">.</span>Received <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>model<span class="token punctuation">,</span> ea<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> body <span class="token operator">=</span> ea<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> message <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> routingKey <span class="token operator">=</span> ea<span class="token punctuation">.</span>RoutingKey<span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">" [x] Received '&amp;#123;routingKey&amp;#125;':'&amp;#123;message&amp;#125;'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">BasicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">:</span> queueName<span class="token punctuation">,</span>                     autoAck<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>                     consumer<span class="token punctuation">:</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">" Press [enter] to exit."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="RPC-模式"><a href="#RPC-模式" class="headerlink" title="RPC 模式"></a>RPC 模式</h3><p>一般来说，在 RabbitMQ 上做 RPC 很容易。客户端发送请求 消息，服务器回复响应消息。为了 收到我们需要发送“回调”队列地址的响应，其中包含 请求：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">var</span> props <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">CreateBasicProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>props<span class="token punctuation">.</span>ReplyTo <span class="token operator">=</span> replyQueueName<span class="token punctuation">;</span><span class="token keyword">var</span> messageBytes <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">BasicPublish</span><span class="token punctuation">(</span>exchange<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">,</span>                     routingKey<span class="token punctuation">:</span> <span class="token string">"rpc_queue"</span><span class="token punctuation">,</span>                     basicProperties<span class="token punctuation">:</span> props<span class="token punctuation">,</span>                     body<span class="token punctuation">:</span> messageBytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ... then code to read a response message from the callback_queue ...</span></code></pre><blockquote><p>消息属性<br>AMQP 0-9-1 协议预定义了一组 14 个属性，这些属性与 一条消息。大多数属性很少使用，除了 以下内容：</p><p>持久：将邮件标记为持久（值为 true） 或瞬态（任何其他值）。请看第二个教程。<br>交付模式：熟悉协议的人可以选择使用这个 属性而不是持久。他们控制着同样的事情。<br>内容类型：用于描述编码的 MIME 类型。 例如，对于常用的 JSON 编码，这是一种很好的做法 将此属性设置为：应用程序/JSON。<br>回复：通常用于命名回调队列。<br>关联 ID：用于将 RPC 响应与请求相关联。</p></blockquote><p>在上面介绍的方法中，我们建议创建一个回调队列 每个 RPC 请求。这是非常低效的，但幸运的是有 更好的方法 - 让我们为每个客户端创建一个回调队列。</p><p>这引发了一个新问题，在该队列中收到响应后，它是 不清楚响应属于哪个请求。这就是使用 CorrelationId 属性的时候。我们将它设置为唯一的 每个请求的值。稍后，当我们在 回调队列 我们将查看此属性，并基于该属性 能够将响应与请求匹配。如果我们看到未知的相关 Id 值，我们可以安全地丢弃该消息 - 它 不属于我们的要求。</p><p>你可能会问，我们为什么要忽略回调中的未知消息 队列，而不是因错误而失败？这是由于有可能 服务器端的争用条件。虽然不太可能，但有可能 RPC 服务器将在向我们发送答案后立即死亡，但是 在为请求发送确认消息之前。如果那样的话 发生时，重新启动的 RPC 服务器将再次处理请求。 这就是为什么在客户端上我们必须处理重复的响应 优雅地，理想情况下，RPC 应该是幂等的。</p><p>总结:</p><p><img src="https://www.rabbitmq.com/img/tutorials/python-six.png" alt="RPC模式"></p><p>RPC 将会这样工作</p><ul><li>当客户端启动时，它会创建一个匿名独占 回调队列。</li><li>对于 RPC 请求，客户端发送具有两个属性的消息：<code>ReplyTo</code>（设置为回调队列）和 <code>CorrelationId</code>， 设置为每个请求的唯一值。</li><li>请求将发送到<code>rpc_queue</code>队列。</li><li>RPC 工作线程（又名：服务器）正在等待该队列上的请求。 当请求出现时，它会完成作业并发送一条消息，其中包含 结果返回到客户端，使用 <code>ReplyTo</code> 属性中的队列。</li><li>客户端等待回调队列中的数据。当消息 出现时，它将检查相关 ID 属性。如果匹配 请求中的值，它将响应返回到 应用。</li></ul><p>服务端,接受请求,计算水仙数</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">using</span> RabbitMQ<span class="token punctuation">.</span>Client<span class="token punctuation">;</span><span class="token keyword">using</span> RabbitMQ<span class="token punctuation">.</span>Client<span class="token punctuation">.</span>Events<span class="token punctuation">;</span><span class="token keyword">var</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> HostName <span class="token operator">=</span> <span class="token string">"localhost"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">var</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">CreateConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">var</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">CreateModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span>queue<span class="token punctuation">:</span> <span class="token string">"rpc_queue"</span><span class="token punctuation">,</span>                     durable<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>                     exclusive<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>                     autoDelete<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>                     arguments<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">BasicQos</span><span class="token punctuation">(</span>prefetchSize<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> prefetchCount<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">global</span><span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventingBasicConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">BasicConsume</span><span class="token punctuation">(</span>queue<span class="token punctuation">:</span> <span class="token string">"rpc_queue"</span><span class="token punctuation">,</span>                     autoAck<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>                     consumer<span class="token punctuation">:</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">" [x] Awaiting RPC requests"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>consumer<span class="token punctuation">.</span>Received <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>model<span class="token punctuation">,</span> ea<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">string</span> response <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>    <span class="token keyword">var</span> body <span class="token operator">=</span> ea<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> props <span class="token operator">=</span> ea<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">;</span>    <span class="token keyword">var</span> replyProps <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">CreateBasicProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    replyProps<span class="token punctuation">.</span>CorrelationId <span class="token operator">=</span> props<span class="token punctuation">.</span>CorrelationId<span class="token punctuation">;</span>    <span class="token keyword">try</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> message <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">" [.] Fib(&amp;#123;message&amp;#125;)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response <span class="token operator">=</span> <span class="token function">Fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">" [.] &amp;#123;e.Message&amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">finally</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> responseBytes <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">BasicPublish</span><span class="token punctuation">(</span>exchange<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">,</span>                             routingKey<span class="token punctuation">:</span> props<span class="token punctuation">.</span>ReplyTo<span class="token punctuation">,</span>                             basicProperties<span class="token punctuation">:</span> replyProps<span class="token punctuation">,</span>                             body<span class="token punctuation">:</span> responseBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">BasicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">:</span> ea<span class="token punctuation">.</span>DeliveryTag<span class="token punctuation">,</span> multiple<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">" Press [enter] to exit."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Assumes only valid positive integer input.</span><span class="token comment" spellcheck="true">// Don't expect this one to work for big numbers, and it's probably the slowest recursive implementation possible.</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">Fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token keyword">is</span> <span class="token number">0</span> or <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">Fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>服务器代码相当简单：</p><ul><li>像往常一样，我们首先建立连接、通道并声明 队列。</li><li>我们可能希望运行多个服务器进程。挨次 要将负载平均分布在多个服务器上，我们需要在通道中设置预取计数设置。基本 Qos。</li><li>我们使用 BasicConsumption 来访问队列。然后我们注册一个传递处理程序，其中 我们完成工作并将响应发回。</li></ul><p>客户端,发出请求,获取水仙数</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Concurrent<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">using</span> RabbitMQ<span class="token punctuation">.</span>Client<span class="token punctuation">;</span><span class="token keyword">using</span> RabbitMQ<span class="token punctuation">.</span>Client<span class="token punctuation">.</span>Events<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcClient</span> <span class="token punctuation">:</span> IDisposable<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">string</span> QUEUE_NAME <span class="token operator">=</span> <span class="token string">"rpc_queue"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> IConnection connection<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> IModel channel<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token keyword">string</span> replyQueueName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">readonly</span> ConcurrentDictionary<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> TaskCompletionSource<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token operator">></span> callbackMapper <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RpcClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> HostName <span class="token operator">=</span> <span class="token string">"localhost"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">CreateConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">CreateModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// declare a server-named queue</span>        replyQueueName <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>QueueName<span class="token punctuation">;</span>        <span class="token keyword">var</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventingBasicConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span>Received <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>model<span class="token punctuation">,</span> ea<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>callbackMapper<span class="token punctuation">.</span><span class="token function">TryRemove</span><span class="token punctuation">(</span>ea<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">.</span>CorrelationId<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">var</span> tcs<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> body <span class="token operator">=</span> ea<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> response <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>            tcs<span class="token punctuation">.</span><span class="token function">TrySetResult</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">BasicConsume</span><span class="token punctuation">(</span>consumer<span class="token punctuation">:</span> consumer<span class="token punctuation">,</span>                             queue<span class="token punctuation">:</span> replyQueueName<span class="token punctuation">,</span>                             autoAck<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Task<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> <span class="token function">CallAsync</span><span class="token punctuation">(</span><span class="token keyword">string</span> message<span class="token punctuation">,</span> CancellationToken cancellationToken <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        IBasicProperties props <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">CreateBasicProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> correlationId <span class="token operator">=</span> Guid<span class="token punctuation">.</span><span class="token function">NewGuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span>CorrelationId <span class="token operator">=</span> correlationId<span class="token punctuation">;</span>        props<span class="token punctuation">.</span>ReplyTo <span class="token operator">=</span> replyQueueName<span class="token punctuation">;</span>        <span class="token keyword">var</span> messageBytes <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> tcs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskCompletionSource</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        callbackMapper<span class="token punctuation">.</span><span class="token function">TryAdd</span><span class="token punctuation">(</span>correlationId<span class="token punctuation">,</span> tcs<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">BasicPublish</span><span class="token punctuation">(</span>exchange<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">,</span>                             routingKey<span class="token punctuation">:</span> QUEUE_NAME<span class="token punctuation">,</span>                             basicProperties<span class="token punctuation">:</span> props<span class="token punctuation">,</span>                             body<span class="token punctuation">:</span> messageBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        cancellationToken<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> callbackMapper<span class="token punctuation">.</span><span class="token function">TryRemove</span><span class="token punctuation">(</span>correlationId<span class="token punctuation">,</span> <span class="token keyword">out</span> _<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tcs<span class="token punctuation">.</span>Task<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rpc</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">async</span> Task <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"RPC Client"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">string</span> n <span class="token operator">=</span> args<span class="token punctuation">.</span>Length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">"30"</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">InvokeAsync</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">" Press [enter] to exit."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">async</span> Task <span class="token function">InvokeAsync</span><span class="token punctuation">(</span><span class="token keyword">string</span> n<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">using</span> <span class="token keyword">var</span> rpcClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RpcClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">" [x] Requesting fib(&amp;#123;0&amp;#125;)"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token keyword">await</span> rpcClient<span class="token punctuation">.</span><span class="token function">CallAsync</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">" [.] Got '&amp;#123;0&amp;#125;'"</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>客户端代码稍微复杂一些：</p><ul><li>我们建立连接和渠道，并声明 用于回复的独占“回调”队列。</li><li>我们订阅“回调”队列，以便 我们可以接收 RPC 响应。</li><li>我们的调用方法发出实际的 RPC 请求。</li><li>在这里，我们首先生成一个唯一的 <code>CorrelationId</code> 编号，并将其保存，以便在响应到达时识别相应的响应。</li><li>接下来，我们发布具有两个属性的请求消息：<code>回复</code>和<code>关联 ID</code>。</li><li>在这一点上，我们可以坐下来等待适当的 响应到达。</li><li>对于每条响应消息，客户端都会检查<code>相关 ID</code> 是否是我们正在寻找的 <code>CorrelationId</code>。如果是这样，它将保存响应。</li><li>最后，我们将响应返回给用户。</li></ul><h3 id="参数模式"><a href="#参数模式" class="headerlink" title="参数模式"></a>参数模式</h3><p>可以携带参数，根据参数进行过滤</p><ol><li>使用<code>header</code>类型的交换机</li><li>绑定队列的设置参数</li><li>发送消息设置参数</li></ol><h2 id="RabbitMQ-一些机制"><a href="#RabbitMQ-一些机制" class="headerlink" title="RabbitMQ 一些机制"></a>RabbitMQ 一些机制</h2><h3 id="消息应答"><a href="#消息应答" class="headerlink" title="消息应答"></a>消息应答</h3><blockquote><p>默认情况下，RabbitMQ 一旦向消费者发送了一条消息后，便立即将该消息标记为删除。由于消费者处理一个消息可能需要一段时间，假如在处理消息中途消费者挂掉了，我们会丢失其正在处理的消息以及后续发送给该消费这的消息。</p><p>为了保证消息在发送过程中不丢失，RabbitMQ 引入消息应答机制，消息应答意思就是：消费者在接收消息并且处理完该消息之后，才告知 RabbitMQ 可以把该消息删除了。</p><p>RabbitMQ 中消息应答方式有两种：自动应答（默认）、手动应答</p></blockquote><h3 id="自动应答"><a href="#自动应答" class="headerlink" title="自动应答"></a>自动应答</h3><p>自动应答即消息发送后立即被认为已经传送成功，也就是 RabbitMQ 默认采用的消息应答方式。</p><p>这种模式需要在高吞吐量和数据传输安全性方面做权衡，因为该模式下如果消息在被接收之前，消费者的 connection 或者 channel 关闭，消息就丢失了。</p><p>此外，由于消费者没有对传递的消息数量进行限制，发送方可以传递过载的消息，可能会造成消费者这边由于接收太多消息来不及处理，导致这些消息的积压，使得内存耗尽，最终使得这些消费者线程被操作系统杀死。</p><p>所以这种模式仅适用在消费者可以高效并以某种速率能够处理这些消息的情况下使用。</p><h3 id="手动应答"><a href="#手动应答" class="headerlink" title="手动应答"></a>手动应答</h3><p>采用手动应答后的消息自动重新入队可以避免自动应答中消息丢失的情况。</p><p>如果消费者由于某些原因失去连接(其通道已关闭，连接已关闭或 TCP 连接丢失)，导致消息未发送 ACK 确认，RabbitMQ 将了解到消息未完全处理，并将对其重新排队。</p><p>如果此时其他消费者可以处理，它将很快将其重新分发给另一个消费者。这样，即使某个消费者偶尔死亡，也可以确保不会丢失任何消息。</p><blockquote><p>RabbitMQ 的 Web 管理平台上可以看到当前队列中的 “Ready” 状态和 “Unacknowledged” 状态的消息数，分别对应等待投递给消费者的消息数和已经投递给消费者但是未收到确认信号的消息数</p></blockquote><p>RabbitMQ 消息确认机制分为两大类：发送方确认、接收方确认。</p><p>其中发送方确认又分为：生产者到交换器到确认、交换器到队列的确认。</p><p>消费者确认发生在监听队列的消费者处理业务失败，如：发生了异常，不符合要求的数据等，这些场景我们就需要手动处理，比如重新发送或者丢弃。</p><p>RabbitMQ 消息确认机制（ACK）默认是自动确认的，自动确认会在消息发送给消费者后立即确认，但存在丢失消息的可能，如果消费端消费逻辑抛出异常，假如你用回滚了也只是保证了数据的一致性，但是消息还是丢了，也就是消费端没有处理成功这条消息，那么就相当于丢失了消息。</p><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><blockquote><p>前面我们通过手动应答处理了消息丢失的情况，但是如何保障当 RabbitMQ 服务停掉以后消息生产者发送过来的消息不丢失。默认情况下 RabbitMQ 退出或由于某种原因崩溃时，它会清空队列和消息，除非告知它不要这样做。确保消息不会丢失需要做两件事：我们需要将队列和消息都标记为持久化。</p></blockquote><p>之前我们创建的队列都是非持久化的，RabbitMQ 如果重启，该队列就会被删除掉，如果要队列实现持久化就需要在声明队列的时候把 durable 参数设置为 true</p><p>需要注意的是如果之前声明的队列不是持久化的，需要把原先队列先删除，或者重新创建一个持久化的队列，不然就会错误：</p><p>消息持久化还要把<code>BasicProperties</code>的<code>Persistent</code>设置成<code>true</code></p><h3 id="RabbitMQ-消息分发"><a href="#RabbitMQ-消息分发" class="headerlink" title="RabbitMQ 消息分发"></a>RabbitMQ 消息分发</h3><p>前面我们了解到 RabbitMQ 默认分发消息采用的轮训分发模式，但是在某种场景下这种策略并不是很好，比方说有两个消费者在处理任务，其中 consumer01 处理任务的速度非常快，而 consumer02 处理速度却很慢，此时如果我们还是采用轮训分发的化就会使处理速度快的 consumer01 很大一部分时间处于空闲状态，而 consumer02 一直在干活，这种分配方式在这种情况下其实就不太好，但是 RabbitMQ 并不知道这种情况它依然很公平的进行分发。</p><p>为了避免这种情况，我们可以设置参数 channel.basicQos(1)，意思就是每个消费者只能处理完当前消息才能接受新的消息。</p><p>可以理解如果当前消息我没有处理完的话或者还没有应答的话，新的消息就先别分配给我，我目前只能处理一个消息，然后 RabbitMQ 就会把该任务分配给没有那么忙的那个空闲消费者，当然如果所有的消费者都没有完成手上任务，队列还在不停的添加新任务，队列有可能就会遇到队列被撑满的情况，这个时候就只能添加新的消费者 或者改变其他存储任务的策略。</p><h3 id="RabbitMQ-发布确认"><a href="#RabbitMQ-发布确认" class="headerlink" title="RabbitMQ 发布确认"></a>RabbitMQ 发布确认</h3><p>发布确认机制有三种策略：单个确认发布、批量确认发布、异步确认发布。其中前两者是同步确认的方式，也就是发布一个/一批消息之后只有被确认发布，后续的消息才能继续发布，后者是异步确认的方式，我们只管发布消息即可，消息是否被确认可以通过回调函数来接收到。</p><p>另外还有个 tx 的机制也可以作为发布确认</p><p>C#的RabbitMQ API中，有三个与Confirm相关的方法：<code>ConfirmSelect</code>,<code>WaitForConfirms</code>和<code>WaitForConfirmOrDie</code></p><ul><li><code>ConfirmSelect</code>: 表示开启Confirm模式</li><li><code>WaitForConfirms</code>: 等待所有消息确认，如果所有的消息都被服务端成功接收返回true，只要有一条没有被成功接收就返回false</li><li><code>WaitForConfirmOrDie</code>: 和<code>WaitForConfirms</code>作用类型，也是等待所有消息确认，区别在于该方法没有返回值(Void)，如果有任意一条消息没有被成功接收，该方法会立即抛出一个<code>OperationInterrupedException</code>类型异常</li></ul><h4 id="单个确认发布"><a href="#单个确认发布" class="headerlink" title="单个确认发布"></a>单个确认发布</h4><p>这是一种简单的确认方式，它是一种同步确认发布的方式，也就是发布一个消息之后只有它被确认发布，后续的消息才能继续发布，waitForConfirmsOrDie(long)这个方法只有在消息被确认的时候才返回，如果在指定时间范围内这个消息没有被确认那么它将抛出异常。</p><p>这种确认方式有一个最大的缺点就是：<strong>发布速度特别的慢</strong>，因为如果没有确认发布的消息就会阻塞所有后续消息的发布，这种方式最多提供每秒不超过数百条发布消息的吞吐量。当然对于某些应用程序来说这可能已经足够了。</p><h4 id="批量确认发布"><a href="#批量确认发布" class="headerlink" title="批量确认发布"></a>批量确认发布</h4><p>上面那种方式非常慢，与单个等待确认消息相比，先发布一批消息然后一起确认可以极大地提高吞吐量，当然这种方式的缺点就是：当发生故障导致发布出现问题时，不知道是哪个消息出现问题了，我们必须将整个批处理保存在内存中，以记录重要的信息而后重新发布消息。当然这种方案仍然是同步的，也一样阻塞消息的发布。</p><h4 id="异步确认发布"><a href="#异步确认发布" class="headerlink" title="异步确认发布"></a>异步确认发布</h4><p>异步确认虽然编程逻辑比上两个要复杂，但是性价比最高，无论是可靠性还是效率都没得说，他是利用回调函数来达到消息可靠性传递的，这个中间件也是通过函数回调来保证是否投递成功，下面就让我们来详细讲解异步确认是怎么实现的。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ebdb4fed8bea0cddb8e7b2f3b555ddf6.png" alt="异步确认发布"></p><h4 id="TX-机制发布确认"><a href="#TX-机制发布确认" class="headerlink" title="TX 机制发布确认"></a>TX 机制发布确认</h4><p>tx机制可以叫做事务机制，RabbitMQ中有三个与tx机制的方法：txSelect(), txCommit()和txRollback()。 channel.txSelect() 用于将当前channel设置成transaction模式， channel.txCommit() 提交事务， channel.txRollback() 回滚事务。使用tx机制，我们首先要通过txSelect方法开启事务，然后发布消息给broker服务器了，如果txCommit提交成功了，则说明消息成功被broker接收了;如果在txCommit执行之前broker异常崩溃或者由于其他原因抛出异常，这个时候我们可以捕获异常，通过txRollback回滚事务。看一个tx机制的简单实现：</p><pre class=" language-csharp"><code class="language-csharp"> <span class="token keyword">var</span> body <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//开启事务机制</span>    channel<span class="token punctuation">.</span><span class="token function">TxSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//发送消息</span>    channel<span class="token punctuation">.</span><span class="token function">BasicPublish</span><span class="token punctuation">(</span>exchange<span class="token punctuation">:</span> <span class="token string">"myexchange"</span><span class="token punctuation">,</span>                            routingKey<span class="token punctuation">:</span> <span class="token string">"mykey"</span><span class="token punctuation">,</span>                            basicProperties<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                            body<span class="token punctuation">:</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//事务提交</span>    channel<span class="token punctuation">.</span><span class="token function">TxCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"【&amp;#123;message&amp;#125;】发送到Broke成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"【&amp;#123;message&amp;#125;】发送到Broker失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    channel<span class="token punctuation">.</span><span class="token function">TxRollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="RabbitMQ的消费模式"><a href="#RabbitMQ的消费模式" class="headerlink" title="RabbitMQ的消费模式"></a>RabbitMQ的消费模式</h3><h4 id="EventingBasicConsumer"><a href="#EventingBasicConsumer" class="headerlink" title="EventingBasicConsumer"></a>EventingBasicConsumer</h4><p>EventingBasicConsumer是发布/订阅模式的消费者，即只要订阅的queue中有了新消息，Broker就会立即把消息推送给消费者，这种模式可以保证消息及时地被消费者接收到。EventingBasicConsumer是长连接的：只需要创建一个Connection,然后在Connection的基础上创建通道channel，消息的发送都是通过channel来执行的，这样可以减少Connection的创建，比较节省资源。</p><h4 id="BasicGet"><a href="#BasicGet" class="headerlink" title="BasicGet"></a>BasicGet</h4><p>那么能不能让消费者作为主动的一方，消费者什么时候想要消息了，就自己发送一个请求去找Broker要？答案使用Get方式。Get方式是短连接的，消费者每次想要消息的时候，首先建立一个Connection，发送一次请求，Broker接收到请求后，响应一条消息给消费者，然后断开连接。RabbitMQ中Get方式和HTTP的请求响应流程基本一样，Get方式的实时性比较差，也比较耗费资源。</p><h3 id="RabbitMQ-死信队列"><a href="#RabbitMQ-死信队列" class="headerlink" title="RabbitMQ 死信队列"></a>RabbitMQ 死信队列</h3><p>“死信”是 RabbitMQ 中的一种消息机制，当你在消费消息时，如果队列里的消息出现以下情况：</p><ol><li>消息被否定确认，使用 channel.basicNack 或 channel.basicReject ，并且此时 requeue 属性被设置为 false。</li><li>消息在队列的存活时间超过设置的 TTL 时间。</li><li>消息队列的消息数量已经超过最大队列长度。</li></ol><p>那么该消息将成为“死信”。</p><p>“死信”消息会被 RabbitMQ 进行特殊处理，如果配置了死信队列信息，那么该消息将会被丢进死信队列中，如果没有配置，则该消息将会被丢弃。</p><p>应用场景</p><ol><li>为了保证订单业务的消息数据不丢失，需要使用到 RabbitMQ 的死信队列机制，当消息消费发生异常时，将消息投入死信队列中。</li><li>还有比如说: 用户在商城下单成功并点击去支付后在指定时间未支付时自动失效</li></ol><h4 id="配置死信队列"><a href="#配置死信队列" class="headerlink" title="配置死信队列"></a>配置死信队列</h4><ol><li>配置业务队列，绑定到业务交换机上</li><li>为业务队列配置死信交换机和路由 key</li><li>为死信交换机配置死信队列</li></ol><p>注意，并不是直接声明一个公共的死信队列，然后所以死信消息就自己跑到死信队列里去了。</p><p>而是为每个需要使用死信的业务队列配置一个死信交换机，这里同一个项目的死信交换机可以共用一个，然后为每个业务队列分配一个单独的路由 key。</p><p>有了死信交换机和路由 key 后，接下来，就像配置业务队列一样，配置死信队列，然后绑定在死信交换机上。也就是说，死信队列并不是什么特殊的队列，只不过是绑定在死信交换机上的队列。死信交换机也不是什么特殊的交换机，只不过是用来接受死信的交换机，所以可以为任何类型【Direct、Fanout、Topic】。一般来说，会为每个业务队列分配一个独有的路由 key，并对应的配置一个死信队列进行监听，也就是说，一般会为每个重要的业务队列配置一个死信队列。</p><p>todo</p><h4 id="死信消息的变化"><a href="#死信消息的变化" class="headerlink" title="死信消息的变化"></a>死信消息的变化</h4><p>那么“死信”被丢到死信队列中后，会发生什么变化呢？</p><p>如果队列配置了参数 <code>x-dead-letter-routing-key</code> 的话，“死信”的路由 key 将会被替换成该参数对应的值。如果没有设置，则保留该消息原有的路由 key。</p><p>举个栗子：</p><p>如果原有消息的路由 key 是 testA，被发送到业务 Exchage 中，然后被投递到业务队列 QueueA 中，如果该队列没有配置参数<code>x-dead-letter-routing-key</code>，则该消息成为死信后，将保留原有的路由 keytestA，如果配置了该参数，并且值设置为 testB，那么该消息成为死信后，路由 key 将会被替换为 testB，然后被抛到死信交换机中。</p><p>另外，由于被抛到了死信交换机，所以消息的 Exchange Name 也会被替换为死信交换机的名称。</p><p>消息的 Header 中，也会添加很多奇奇怪怪的字段，修改一下上面的代码，在死信队列的消费者中添加一行日志输出：</p><h4 id="死信小结"><a href="#死信小结" class="headerlink" title="死信小结"></a>死信小结</h4><p>死信队列其实并没有什么神秘的地方，不过是绑定在死信交换机上的普通队列，而死信交换机也只是一个普通的交换机，不过是用来专门处理死信的交换机。</p><p>总结一下死信消息的生命周期：</p><ol><li>业务消息被投入业务队列</li><li>消费者消费业务队列的消息，由于处理过程中发生异常，于是进行了 nck 或者 reject 操作</li><li>被 nck 或 reject 的消息由 RabbitMQ 投递到死信交换机中</li><li>死信交换机将消息投入相应的死信队列</li><li>死信队列的消费者消费死信消息<br>死信消息是 RabbitMQ 为我们做的一层保证，其实我们也可以不使用死信队列，而是在消息消费异常时，将消息主动投递到另一个交换机中，当你明白了这些之后，这些 Exchange 和 Queue 想怎样配合就能怎么配合。比如从死信队列拉取消息，然后发送邮件、短信、钉钉通知来通知开发人员关注。或者将消息重新投递到一个队列然后设置过期时间，来进行延时消费。</li></ol><h3 id="RabbitMQ-延时队列"><a href="#RabbitMQ-延时队列" class="headerlink" title="RabbitMQ 延时队列"></a>RabbitMQ 延时队列</h3><p>延时队列，首先，它是一种队列，队列意味着内部的元素是有序的，元素出队和入队是有方向性的，元素从一端进入，从另一端取出。</p><p>其次，延时队列，最重要的特性就体现在它的延时属性上，跟普通的队列不一样的是，普通队列中的元素总是等着希望被早点取出处理，而延时队列中的元素则是希望被在指定时间得到取出和处理，所以延时队列中的元素是都是带时间属性的，通常来说是需要被处理的消息或者任务。</p><p>简单来说，延时队列就是用来存放需要在指定时间被处理的元素的队列。</p><p>那么什么时候需要用延时队列呢？考虑一下以下场景：</p><ul><li>订单在十分钟之内未支付则自动取消。</li><li>新创建的店铺，如果在十天内都没有上传过商品，则自动发送消息提醒。</li><li>账单在一周内未支付，则自动结算。</li><li>用户注册成功后，如果三天内没有登陆则进行短信提醒。</li><li>用户发起退款，如果三天内没有得到处理则通知相关运营人员。</li><li>预定会议后，需要在预定的时间点前十分钟通知各个与会人员参加会议。</li></ul><p>为什么不用定时任务</p><p>如果数据量比较少，确实可以这样做，但对于数据量比较大，并且时效性较强的场景，如：“订单十分钟内未支付则关闭“，短期内未支付的订单数据可能会有很多，活动期间甚至会达到百万甚至千万级别，对这么庞大的数据量仍旧使用轮询的方式显然是不可取的，很可能在一秒内无法完成所有订单的检查，同时会给数据库带来很大压力，无法满足业务要求而且性能低下。</p><h3 id="RabbitMQ-优先队列"><a href="#RabbitMQ-优先队列" class="headerlink" title="RabbitMQ 优先队列"></a>RabbitMQ 优先队列</h3><p>我们知道queue是先进先出的，即先发送的消息，先被消费。但是在具体业务中可能会遇到要提前处理某些消息的需求，如一个常见的需求：普通客户的消息按先进先出的顺序处理，Vip客户的消息要提前处理。消息实现优先级控制的实现方式是：首先在声明queue是设置队列的x-max-priority属性，然后在publish消息时，设置消息的优先级等级即可。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//声明队列queue</span>channel<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span>queue<span class="token punctuation">:</span> <span class="token string">"myqueue"</span><span class="token punctuation">,</span>                    durable<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>                    exclusive<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>                    autoDelete<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>                    arguments<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//队列优先级最高为10，不加x-max-priority的话，计算发布时设置了消息的优先级也不会生效</span>                            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"x-max-priority"</span><span class="token punctuation">,</span><span class="token number">10</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> props <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">CreateBasicProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>props<span class="token punctuation">.</span>Priority <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置优先级为多少</span>channel<span class="token punctuation">.</span><span class="token function">BasicPublish</span><span class="token punctuation">(</span>exchange<span class="token punctuation">:</span> <span class="token string">"myexchange"</span><span class="token punctuation">,</span>                    routingKey<span class="token punctuation">:</span> <span class="token string">"mykey"</span><span class="token punctuation">,</span>                    basicProperties<span class="token punctuation">:</span> props<span class="token punctuation">,</span>                    body<span class="token punctuation">:</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="RabbitMQ-惰性队列"><a href="#RabbitMQ-惰性队列" class="headerlink" title="RabbitMQ 惰性队列"></a>RabbitMQ 惰性队列</h3><h3 id="RabbitMQ-集群"><a href="#RabbitMQ-集群" class="headerlink" title="RabbitMQ 集群"></a>RabbitMQ 集群</h3><p>RabbitMQ 要求集群中至少有一个磁盘节点，其他节点可以是内存节点，当节点加入或离开集群时，必须要将该变更通知到至少一个磁盘节点。如果只有一个磁盘节点，刚好又是该节点崩溃了，那么集群可以继续路由消息，但不能创建队列、创建交换器、创建绑定、添加用户、更改权限、添加或删除集群节点。也就是说集群中的唯一磁盘节点崩溃的话，集群仍然可以运行，但直到该节点恢复前，无法更改任何东西。</p><h2 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h2><p>todo</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/qq_45173404/article/details/121687489">RabbitMQ 超详细学习笔记（章节清晰+通俗易懂）</a></li><li><a href="https://blog.csdn.net/pan_junbiao/article/details/112956537">RabbitMQ 消息确认机制（ACK）</a></li><li><a href="https://www.rabbitmq.com/getstarted.html">官网</a></li><li><a href="https://cloud.tencent.com/developer/article/1463065">【RabbitMQ】一文带你搞定 RabbitMQ 死信队列</a></li><li><a href="https://www.cnblogs.com/Leo_wl/p/15542878.html">.NetCore(.NET5) - RabbitMQ 死信队列，延时队列 - HackerVirus - 博客园</a></li><li><a href="https://www.cnblogs.com/wyy1234/p/10868416.html#top">快速掌握RabbitMQ(三)——消息确认、持久化、优先级的C#实现</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> mq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mq </tag>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis-学习笔记3_事务</title>
      <link href="2023/10/09/study-notes-redis-2023-10-09-redis-xue-xi-bi-ji-3-shi-wu/"/>
      <url>2023/10/09/study-notes-redis-2023-10-09-redis-xue-xi-bi-ji-3-shi-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis事务的概念"><a href="#Redis事务的概念" class="headerlink" title="Redis事务的概念"></a>Redis事务的概念</h2><p>Redis 事务的本质是一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。</p><p>总结说：redis事务就是一次性、顺序性、排他性的执行一个队列中的一系列命令。</p><h2 id="Redis事务没有隔离级别的概念"><a href="#Redis事务没有隔离级别的概念" class="headerlink" title="Redis事务没有隔离级别的概念"></a>Redis事务没有隔离级别的概念</h2><p>批量操作在发送 EXEC 命令前被放入队列缓存，并不会被实际执行，也就不存在事务内的查询要看到事务里的更新，事务外查询不能看到。</p><h2 id="Redis不保证原子性"><a href="#Redis不保证原子性" class="headerlink" title="Redis不保证原子性"></a>Redis不保证原子性</h2><p>Redis中，单条命令是原子性执行的，但事务不保证原子性，且没有回滚。事务中任意命令执行失败，其余的命令仍会被执行。</p><h2 id="Redis事务的三个阶段"><a href="#Redis事务的三个阶段" class="headerlink" title="Redis事务的三个阶段"></a>Redis事务的三个阶段</h2><ol><li>开始事务</li><li>命令入队</li><li>执行事务</li></ol><h2 id="Redis事务相关命令"><a href="#Redis事务相关命令" class="headerlink" title="Redis事务相关命令"></a>Redis事务相关命令</h2><p><code>watch key1 key2</code> … : 监视一或多个key,如果在事务执行之前，被监视的key被其他命令改动，则事务被打断 （类似乐观锁）</p><p><code>multi</code> : 标记一个事务块的开始（queued）</p><p><code>exec</code> : 执行所有事务块的命令 （一旦执行exec后，之前加的监控锁都会被取消掉）</p><p><code>discard</code> : 取消事务，放弃事务块中的所有命令</p><p><code>unwatch</code> : 取消watch对所有key的监控</p><h2 id="若在事务队列中存在命令性错误（类似于编译性错误），则执行EXEC命令时，所有命令都不会执行"><a href="#若在事务队列中存在命令性错误（类似于编译性错误），则执行EXEC命令时，所有命令都不会执行" class="headerlink" title="若在事务队列中存在命令性错误（类似于编译性错误），则执行EXEC命令时，所有命令都不会执行"></a>若在事务队列中存在命令性错误（类似于编译性错误），则执行EXEC命令时，所有命令都不会执行</h2><p>比如中间有条错误的命令<code>getset xxx</code>,这样所有任务都不会执行</p><h2 id="若在事务队列中存在语法性错误（类似于运行时异常），则执行EXEC命令时，其他正确命令会被执行，错误命令抛出异常"><a href="#若在事务队列中存在语法性错误（类似于运行时异常），则执行EXEC命令时，其他正确命令会被执行，错误命令抛出异常" class="headerlink" title="若在事务队列中存在语法性错误（类似于运行时异常），则执行EXEC命令时，其他正确命令会被执行，错误命令抛出异常"></a>若在事务队列中存在语法性错误（类似于运行时异常），则执行EXEC命令时，其他正确命令会被执行，错误命令抛出异常</h2><p>比如中间有条错误的命令<code>incr key</code>(对字符串进行自增的错误操作)</p><h2 id="使用watch"><a href="#使用watch" class="headerlink" title="使用watch"></a>使用<code>watch</code></h2><p>案例一：使用watch检测balance，事务期间balance数据未变动，事务执行成功</p><p>案例二：使用watch检测balance，在开启事务后（标注1处），在新窗口执行标注2中的操作，更改balance的值，模拟其他客户端在事务执行期间更改watch监控的数据，然后再执行标注1后命令，执行EXEC后，事务未成功执行。</p><p>一但执行 EXEC 开启事务的执行后，无论事务使用执行成功， WARCH 对变量的监控都将被取消。</p><p>故当事务执行失败后，需重新执行WATCH命令对变量进行监控，并开启新的事务进行操作。</p><p>小结: watch指令类似于乐观锁，在事务提交时，如果watch监控的多个KEY中任何KEY的值已经被其他客户端更改，则使用EXEC执行事务时，事务队列将不会被执行，同时返回Nullmulti-bulk应答以通知调用者事务执行失败。</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux_interview_question</title>
      <link href="2023/10/09/interview-questions-2023-10-09-linux-interview-question/"/>
      <url>2023/10/09/interview-questions-2023-10-09-linux-interview-question/</url>
      
        <content type="html"><![CDATA[<h2 id="你在Linux中使用过哪些常用命令？请分别简述其作用"><a href="#你在Linux中使用过哪些常用命令？请分别简述其作用" class="headerlink" title="你在Linux中使用过哪些常用命令？请分别简述其作用"></a>你在Linux中使用过哪些常用命令？请分别简述其作用</h2><ol><li>ls命令<br>作用：列出指定目录下的文件和目录，显示文件的详细信息，如文件名、文件类型、文件大小、修改日期等。<br>常用参数：</li></ol><p>-a：显示所有文件，包括隐藏文件。<br>-l：以长格式显示文件信息，包括权限、所有者、文件大小、修改日期等。<br>-h：人性化显示文件大小，如1K、1M等。</p><ol start="2"><li>cp命令<br>作用：将一个或多个文件复制到指定目录或文件中。<br>常用参数：</li></ol><p>-r：递归复制目录及其子目录。<br>-i：询问是否覆盖已存在的同名文件。<br>-v：显示每个文件的复制进程。</p><ol start="3"><li>mv命令<br>作用：移动文件或重命名文件。<br>常用参数：</li></ol><p>-i：询问是否覆盖已存在的同名文件。<br>-v：显示每个文件移动的进程。</p><ol start="4"><li>rm命令<br>作用：删除文件或目录。<br>常用参数：</li></ol><p>-r：递归删除目录及其子目录。<br>-f：强制删除，无需确认。</p><ol start="5"><li>mkdir命令<br>作用：创建目录。<br>常用参数：</li></ol><p>-p：递归创建目录，若路径中存在不存在的目录，则同时创建。</p><ol start="6"><li>rmdir命令<br>作用：删除空目录。<br>常用参数：</li></ol><p>-p：递归删除目录及其父级目录，若该目录为空。</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker_interview_question</title>
      <link href="2023/10/09/interview-questions-2023-10-09-docker-interview-question/"/>
      <url>2023/10/09/interview-questions-2023-10-09-docker-interview-question/</url>
      
        <content type="html"><![CDATA[<h2 id="在Docker中如何对容器进行监控和管理？请简述工具和方法"><a href="#在Docker中如何对容器进行监控和管理？请简述工具和方法" class="headerlink" title="在Docker中如何对容器进行监控和管理？请简述工具和方法"></a>在Docker中如何对容器进行监控和管理？请简述工具和方法</h2><p>在Docker中，可以使用以下工具和方法对容器进行监控和管理：</p><ol><li><p>Docker CLI：可以使用Docker CLI来查看所有正在运行的容器、停止或删除容器、以及查看容器日志等。例如，使用docker ps命令可以列出所有正在运行的容器，使用docker stop命令可以停止指定的容器。</p></li><li><p>Docker Dashboard：是一个基于Web的UI管理工具，可以用于查看所有的Docker容器、镜像和网络等，以及启动、停止、重启和删除这些容器。Docker Dashboard还提供了一些基本的容器监控功能，例如CPU、内存和网络使用情况等。</p></li><li><p>cAdvisor（Container Advisor）：是一个开源的容器监控工具，可以监控每个容器的资源使用情况，例如CPU、内存、网络和磁盘I/O等。cAdvisor可以与Docker集成，通过Docker API获取各个容器的资源使用情况，同时还可以将这些数据导出到其他监控系统中。</p></li></ol><h2 id="如何在Docker中部署-NET-Core应用程序？请简述步骤"><a href="#如何在Docker中部署-NET-Core应用程序？请简述步骤" class="headerlink" title="如何在Docker中部署.NET Core应用程序？请简述步骤"></a>如何在Docker中部署.NET Core应用程序？请简述步骤</h2><p>在Docker中部署.NET Core应用程序需要以下步骤：</p><ol><li><p>创建Dockerfile文件。可以在该文件中选择可用的.NET Core官方镜像，设置工作目录、复制应用程序到容器中以及执行运行指令等。</p></li><li><p>在应用程序根目录下构建Docker镜像。使用docker build命令从Dockerfile文件中创建镜像</p></li><li><p>运行应用程序容器。使用docker run命令从新构建的镜像中启动容器</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>参考MediatR实现的一种责任链模式</title>
      <link href="2023/10/06/study-notes-algorithm-2023-10-06-can-kao-mediatr-shi-xian-de-yi-chong-ze-ren-lian-mo-shi/"/>
      <url>2023/10/06/study-notes-algorithm-2023-10-06-can-kao-mediatr-shi-xian-de-yi-chong-ze-ren-lian-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>有这么个需求,分别请求多个接口获取同一种信息,比如根据ip获取位置,现有多个接口都可以提供这种服务,需要都请求这些接口,但是这些接口希望是请求之后获取到结果了就不再请求其他接口,</p><p>接口一个一个请求, 上一个获取到了,就不执行下一个</p><p>后面有了个特殊的要求, 需要可以自定义其中一个接口是否使用,和调用接口的顺序, 这基于<code>MediatR</code>做不到</p><p>但是参考了<code>MediatR</code>的设计之后, 有所感想,可以参考这里的实现方式,去实现此要求,特此记录</p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>有一个接口和一个委托的定义非常重要</p><p>定义责任链接口,里面有一个处理,方法,</p><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">/// &lt;summary></span><span class="token comment" spellcheck="true">/// Represents an async continuation for the next task to execute in the pipeline</span><span class="token comment" spellcheck="true">/// &lt;/summary></span><span class="token comment" spellcheck="true">/// &lt;typeparam name="TResponse">Response type&lt;/typeparam></span><span class="token comment" spellcheck="true">/// &lt;returns>Awaitable task returning a &lt;typeparamref name="TResponse"/>&lt;/returns></span><span class="token keyword">public</span> <span class="token keyword">delegate</span> Task<span class="token operator">&lt;</span>TResponse<span class="token operator">></span> <span class="token generic-method function">RequestHandlerDelegate<span class="token punctuation">&lt;</span>TResponse<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPipelineBehavior</span><span class="token operator">&lt;</span><span class="token keyword">in</span> TRequest<span class="token punctuation">,</span> TResponse<span class="token operator">></span> <span class="token keyword">where</span> TRequest <span class="token punctuation">:</span> notnull<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// Pipeline handler. Perform any additional behavior and await the &lt;paramref name="next"/> delegate as necessary</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="request">Incoming request&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;param name="next">Awaitable delegate for the next action in the pipeline. Eventually this delegate represents the handler.&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;param name="cancellationToken">Cancellation token&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>Awaitable task returning the &lt;typeparamref name="TResponse"/>&lt;/returns></span>    Task<span class="token operator">&lt;</span>TResponse<span class="token operator">></span> <span class="token function">Handle</span><span class="token punctuation">(</span>TRequest request<span class="token punctuation">,</span> RequestHandlerDelegate<span class="token operator">&lt;</span>TResponse<span class="token operator">></span> next<span class="token punctuation">,</span> CancellationToken cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestHandlerWrapperImpl</span><span class="token operator">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token operator">></span> <span class="token punctuation">:</span> RequestHandlerWrapper<span class="token operator">&lt;</span>TResponse<span class="token operator">></span>    <span class="token keyword">where</span> TRequest <span class="token punctuation">:</span> IRequest<span class="token operator">&lt;</span>TResponse<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">async</span> Task<span class="token operator">&lt;</span><span class="token keyword">object</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token keyword">object</span> request<span class="token punctuation">,</span> IServiceProvider serviceProvider<span class="token punctuation">,</span>        CancellationToken cancellationToken<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>        <span class="token keyword">await</span> <span class="token function">Handle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>IRequest<span class="token operator">&lt;</span>TResponse<span class="token operator">></span><span class="token punctuation">)</span> request<span class="token punctuation">,</span> serviceProvider<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token keyword">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> Task<span class="token operator">&lt;</span>TResponse<span class="token operator">></span> <span class="token function">Handle</span><span class="token punctuation">(</span>IRequest<span class="token operator">&lt;</span>TResponse<span class="token operator">></span> request<span class="token punctuation">,</span> IServiceProvider serviceProvider<span class="token punctuation">,</span>        CancellationToken cancellationToken<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Task<span class="token operator">&lt;</span>TResponse<span class="token operator">></span> <span class="token function">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> serviceProvider<span class="token punctuation">.</span>GetRequiredService<span class="token operator">&lt;</span>IRequestHandler<span class="token operator">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TRequest<span class="token punctuation">)</span> request<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> serviceProvider            <span class="token punctuation">.</span>GetServices<span class="token operator">&lt;</span>IPipelineBehavior<span class="token operator">&lt;</span>TRequest<span class="token punctuation">,</span> TResponse<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">Aggregate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>RequestHandlerDelegate<span class="token operator">&lt;</span>TResponse<span class="token operator">></span><span class="token punctuation">)</span> Handler<span class="token punctuation">,</span>                <span class="token punctuation">(</span>next<span class="token punctuation">,</span> pipeline<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> pipeline<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TRequest<span class="token punctuation">)</span> request<span class="token punctuation">,</span> next<span class="token punctuation">,</span> cancellationToken<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><code>TRequest</code>是自定义的入参类型, <code>TResponse</code>是自定义的返回类型</p><p><code>RequestHandlerDelegate&lt;TResponse&gt;</code>是一个委托, 返回了一个<code>TResponse</code>.</p><p>接下来定义一个包装类, 这个包装类用来获取继承了<code>IPipelineBehavior</code>的接口的实现</p><p>然后执行这些每个链上的处理方法</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>以上的关键其实就在于<code>RequestHandlerWrapperImpl</code>包装类的执行</p><p><code>Handler</code>是一个局部方法, 这个方法返回了<code>Task&lt;TResponse&gt;</code>类型,这就刚好跟之前定义的委托的一致了, 没有参数,返回值一致,里面看到执行了最后的执行者, 虽然说最后的执行者有入参,但是被包装了一次,相当于没有入参</p><p>然后就是获取了继承了<code>IPipelineBehavior&lt;TRequest, TResponse&gt;</code>的类型</p><p>然后是<code>Reverse</code>, 这是干什么呢,这个方法用于反转数组, 假设我获取到1,2,3,4这样顺序的实现类,反转之后就变成了4,3,2,1, 用意就是为了构建一个委托链</p><p>再到了<code>Aggregate</code>方法,这个就是用来累计用的,可以用来求和,第一个参数是seed,起始值,第二个参数是累计函数,第三个参数是结果函数,这里没有用上</p><p>具体可以看圣杰举的例子</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">var</span> nums <span class="token operator">=</span> Enumerable<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[2,3,4]</span><span class="token comment" spellcheck="true">// 计算1到5的累加之和，再将结果乘以2</span><span class="token keyword">var</span> sum <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">Aggregate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>total<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> total <span class="token operator">+</span> next<span class="token punctuation">,</span> result <span class="token operator">=</span><span class="token operator">></span> result <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 相当于 (((1+2)+3)+4)*2=20</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//20</span><span class="token keyword">var</span> sum1 <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">Aggregate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>total<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> total <span class="token operator">+</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 相当于 ((1+2)+3)+4=10</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>sum1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span></code></pre><p>想想看, 我们现在想实现这么个责任链, 顺序是先经过1,然后2,3,4, 执行顺序便是1,2,3,4,于是我在每个实现类中写了一个<code>Handle</code>,里面有个一参数<code>next</code>,指向了下一个实现类, 那么我需要构建这么一个东西</p><table><thead><tr><th>实现类</th><th>next指向谁</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr><tr><td>2</td><td>3</td></tr><tr><td>3</td><td>4</td></tr><tr><td>4</td><td>下一个没有了</td></tr></tbody></table><p>回到上面, 反转之后得到了4,3,2,1,这里要结合<code>Aggregate</code>方法</p><p>这里的<code>Aggregate</code>方法第一个参数是种子, 传入的参数是类型转换成<code>RequestHandlerDelegate&lt;TResponse&gt;</code>的局部方法<code>Handler</code>.</p><p>第二个参数是一个<code>Func</code>,定义是这样的</p><p><code>Func&lt;RequestHandlerDelegate&lt;TResponse&gt;,IPipelineBehavior&lt;TRequest, TResponse&gt;,RequestHandlerDelegate&lt;TResponse&gt;&gt;</code></p><p>这里些许复杂, 意思是这是一个入参是<code>RequestHandlerDelegate&lt;TResponse&gt;</code>和<code>IPipelineBehavior&lt;TRequest, TResponse&gt;</code>两个类型, 返回值是<code>RequestHandlerDelegate&lt;TResponse&gt;</code></p><p>也就是说入参是方法和当前的责任链处理者, 返回也是一个方法</p><p>在这个<code>Func</code>里面做了啥? 把<code>next</code>作为参数传入到了当前的<code>pipeline</code>里面.想想需求,我需要构建1,2,3,4,越大的数字反而在最后执行, 这里的,next其实意思就是下一个要执行的<code>pipeline</code>,下一个<code>pipeline</code>是怎么被执行的呢, 仔细看这里的<code>Func</code>, 并不是直接返回了<code>TResponse</code>,而是先返回一个方法,也就是<code>RequestHandlerDelegate&lt;TResponse&gt;</code>,这个方法里面执行了<code>IPipelineBehavior&lt;TRequest, TResponse&gt;</code>中的<code>Handle</code></p><p>我们来模拟下每次运行这里的参数都是什么</p><table><thead><tr><th>seed</th><th>next参数是什么</th><th>pipeline</th></tr></thead><tbody><tr><td>局部方法<code>Handle</code>,也就是最后要执行的</td><td>第一次<code>next</code>和<code>seed</code>一样</td><td>4</td></tr><tr><td>无</td><td><code>() =&gt; 4(Handle)</code></td><td>3</td></tr><tr><td>无</td><td><code>() =&gt; 3(4)</code></td><td>2</td></tr><tr><td>无</td><td><code>() =&gt; 4(3)</code></td><td>1</td></tr></tbody></table><p>先反转,然后通过累计函数,通过委托设计调用链,把最后要执行的方法设置在上一个<code>pipeline</code>的<code>next</code>参数中,然后将再上一个的<code>next</code>设置成这个返回的委托,一层套一层,实属精妙</p><p>通过这个设计,我们实际可以定义对应的委托类型和管理接口, 然后获取实现,再反转设置调用链</p><p>在这里,也可以对是否启用某个<code>pipeline</code>和设置<code>pipeline</code>的顺序了, 通过筛选和排序之后,再去反转和构建责任链,这样就达成了对应的责任链一环启用和筛选的功能</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/sheng-jie/p/10280336.html#autoid-4-2-0">圣杰大佬的文章</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 责任链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雪花id学习笔记</title>
      <link href="2023/10/06/study-notes-algorithm-2023-10-13-xue-hua-id-xue-xi-bi-ji/"/>
      <url>2023/10/06/study-notes-algorithm-2023-10-13-xue-hua-id-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="雪花-Id-是什么"><a href="#雪花-Id-是什么" class="headerlink" title="雪花 Id 是什么"></a>雪花 Id 是什么</h2><p>snowflake 中文的意思是雪花，所以常被称为雪花算法</p><p>它是 twitter 用 scala 语言编写的一个用于简单规则运算就能高效生成唯一 ID 的算法，下面是源码地址</p><p>(https%253A%252F%252Fgithub.com%252Ftwitter-archive%252Fsnowflake%252Fblob%252Fsnowflake-2010%252Fsrc%252Fmain%252Fscala%252Fcom%252Ftwitter%252Fservice%252Fsnowflake%252FIdWorker.scala)</p><p>雪花算法生成的 Id 由：1bit(不用) + 41bit 时间戳+10bit 工作机器 id+12bit 序列号</p><p>不用： 1bit，因为最高位是符号位，0 表示正，1 表示负，所以这里固定为 0</p><p>时间戳： 41bit，服务上线的时间毫秒级的时间戳（为当前时间-服务第一次上线时间），这里为（2^41-1）/1000/60/60/24/365 = 49.7 年</p><p>工作机器 id： 10bit，表示工作机器 id，用于处理分布式部署 id 不重复问题，可支持 2^10 = 1024 个节点</p><p>工作机器 id 也可以用数据中心和机器 id 各 5 位表示</p><p>序列号： 12bit，用于离散同一机器同一毫秒级别生成多条 Id 时，可允许同一毫秒生成 2^12 = 4096 个 Id，则一秒就可生成 4096*1000 = 400w 个 Id</p><p>说明：上面总体是 64 位，具体位数可自行配置，如想运行更久，需要增加时间戳位数；如想支持更多节点，可增加工作机器 id 位数；如想支持更高并发，增加序列号位数</p><p>实现请参考 linqpad 中保存的文件</p><p>有几个重点的</p><pre class=" language-csharp"><code class="language-csharp"><span class="token operator">-</span>1L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span>1L <span class="token operator">&lt;</span><span class="token operator">&lt;</span> sequenceBits<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个是求什么?</p><p>主要是计算二进制多少位能表示的十进制的最大数字,比如 5 个 bit 最大能表示<code>11111</code>即<code>31</code></p><p>然后-1 在二进制是如何表示的?</p><p>首先 1 的肯定就是<code>1</code>前面多少位就补 0, 然后负号就是最高位是<code>1</code>,那么<code>1000..1</code>就是<code>-1</code>的原码,然后还要转换成反码就是符号位不变,其他位取反,就变成了<code>1111..0</code>,最后再补码加一,最后<code>-1</code>在 int64 里面就是 64 个 1</p><p>这里的运算就是一堆 11111 向前移动了 N 位,这里的补上的位是 0,</p><p>然后再和<code>-1</code>异或,也就是同样的是 0,不同的是 1,这样就只有补出来的位才是 1,这样就求出了最大的数值</p><p>然后实现逻辑就是对比时间,如果新时间小于上一个时间,说明发生了时间回拨,如果相等,就用 seq 来对比,如果真的在同一个时间 seq 都用完了,那就等到下一个毫秒再获取</p><p>最后使用或运算将这些数值组合就是雪花 id 了</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">int</span> count <span class="token operator">=</span> 5_000_000<span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">long</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>Parallel<span class="token punctuation">.</span><span class="token function">For</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> index <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> IdWorker<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">NextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">"完成"</span><span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdWorker</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//起始的时间戳 DateTimeOffset.UtcNow.ToUnixTimeMilliseconds().Dump();</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> START_STMP <span class="token operator">=</span> 1697177092704L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//每一部分占用的位数</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> SEQUENCE_BIT <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//序列号占用的位数</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MACHINE_BIT <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//机器标识占用的位数</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> DATACENTER_BIT <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据中心占用的位数</span>    <span class="token comment" spellcheck="true">/*        每一部分的最大值 L指long类型,int64        -1L ^ (-1L &lt;&lt; DATACENTER_BIT): 这里是求出五个bit能表示的最大数字        二进制:11111->10进制:31, 也就是说5个bit能表示最多31个不同的数字        其他同理 */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> MAX_DATACENTER_NUM <span class="token operator">=</span> <span class="token operator">-</span>1L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span>1L <span class="token operator">&lt;</span><span class="token operator">&lt;</span> DATACENTER_BIT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> MAX_MACHINE_NUM <span class="token operator">=</span> <span class="token operator">-</span>1L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span>1L <span class="token operator">&lt;</span><span class="token operator">&lt;</span> MACHINE_BIT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> MAX_SEQUENCE <span class="token operator">=</span> <span class="token operator">-</span>1L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span>1L <span class="token operator">&lt;</span><span class="token operator">&lt;</span> SEQUENCE_BIT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//每一部分向左的位移</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MACHINE_LEFT <span class="token operator">=</span> SEQUENCE_BIT<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> DATACENTER_LEFT <span class="token operator">=</span> SEQUENCE_BIT <span class="token operator">+</span> MACHINE_BIT<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> TIMESTMP_LEFT <span class="token operator">=</span> DATACENTER_LEFT <span class="token operator">+</span> DATACENTER_BIT<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> datacenterId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//数据中心</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> machineId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//机器标识</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> sequence <span class="token operator">=</span> 0L<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//序列号</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> lastStmp <span class="token operator">=</span> <span class="token operator">-</span>1L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上一次时间戳</span>    <span class="token comment" spellcheck="true">//单例:完全懒汉</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> Lazy<span class="token operator">&lt;</span>IdWorker<span class="token operator">></span> lazy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lazy</span><span class="token operator">&lt;</span>IdWorker<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">IdWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> IdWorker Instance <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> lazy<span class="token punctuation">.</span>Value<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">IdWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">IdWorker</span><span class="token punctuation">(</span><span class="token keyword">long</span> cid<span class="token punctuation">,</span> <span class="token keyword">long</span> mid<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cid <span class="token operator">></span> MAX_DATACENTER_NUM <span class="token operator">||</span> cid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>$<span class="token string">"数据中心Id应在(0,&amp;#123;MAX_DATACENTER_NUM&amp;#125;)之间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">></span> MAX_MACHINE_NUM <span class="token operator">||</span> mid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span>$<span class="token string">"机器Id应在(0,&amp;#123;MAX_MACHINE_NUM&amp;#125;)之间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        datacenterId <span class="token operator">=</span> cid<span class="token punctuation">;</span>        machineId <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 产生下一个ID</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">NextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">lock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>         <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取下一个时间</span>            <span class="token keyword">long</span> currStmp <span class="token operator">=</span> <span class="token function">GetNewstmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果当前时间大于上一次保存的时间,说明发生了时钟回拔</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>currStmp <span class="token operator">&lt;</span> lastStmp<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"时钟倒退，Id生成失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>currStmp <span class="token operator">==</span> lastStmp<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*相同毫秒内，序列号自增            &amp;符号就是逻辑and, 二进制下, 1&amp;1=1 1&amp;0=0 0&amp;0=0            比如12位最大是4095这里就是4096 &amp; 4095 = 0            */</span>                sequence <span class="token operator">=</span> <span class="token punctuation">(</span>sequence <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> MAX_SEQUENCE<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//同一毫秒的序列数已经达到最大</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence <span class="token operator">==</span> 0L<span class="token punctuation">)</span> currStmp <span class="token operator">=</span> <span class="token function">WaitForNextMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//不同毫秒内，序列号置为0</span>                sequence <span class="token operator">=</span> 0L<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            lastStmp <span class="token operator">=</span> currStmp<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>currStmp <span class="token operator">-</span> START_STMP<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> TIMESTMP_LEFT       <span class="token comment" spellcheck="true">//时间戳部分</span>                          <span class="token operator">|</span> datacenterId <span class="token operator">&lt;</span><span class="token operator">&lt;</span> DATACENTER_LEFT       <span class="token comment" spellcheck="true">//数据中心部分</span>                          <span class="token operator">|</span> machineId <span class="token operator">&lt;</span><span class="token operator">&lt;</span> MACHINE_LEFT             <span class="token comment" spellcheck="true">//机器标识部分</span>                          <span class="token operator">|</span> sequence<span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">//序列号部分</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">WaitForNextMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> mill <span class="token operator">=</span> <span class="token function">GetNewstmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>mill <span class="token operator">&lt;=</span> lastStmp<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            mill <span class="token operator">=</span> <span class="token function">GetNewstmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mill<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">GetNewstmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> DateTimeOffset<span class="token punctuation">.</span>UtcNow<span class="token punctuation">.</span><span class="token function">ToUnixTimeMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>测试并行 500w 个 id 生成只要 1.232 秒,相当不错</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 雪花ID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mq_interview_question</title>
      <link href="2023/10/04/interview-questions-2023-10-04-mq-interview-question/"/>
      <url>2023/10/04/interview-questions-2023-10-04-mq-interview-question/</url>
      
        <content type="html"><![CDATA[<h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><h3 id="请简述Kafka的使用场景及其主要特点"><a href="#请简述Kafka的使用场景及其主要特点" class="headerlink" title="请简述Kafka的使用场景及其主要特点"></a>请简述Kafka的使用场景及其主要特点</h3><p>Kafka是一个分布式流处理平台，它主要用于处理大量实时数据流。它具有高吞吐量、高可靠性和可伸缩性等特点，被广泛应用于日志收集、实时数据处理等场景。</p><p>在.NET Core中，可以使用Confluent.Kafka客户端库来连接Kafka集群。可以使用Producer API来向Kafka主题发送消息，使用Consumer API来消费Kafka主题中的消息。同时，Confluent.Kafka库还提供了一些高级特性，比如支持异步操作、批量发送、压缩等功能。</p><h3 id="在使用Kafka时，你是如何确保消息的可靠传递和顺序性的？"><a href="#在使用Kafka时，你是如何确保消息的可靠传递和顺序性的？" class="headerlink" title="在使用Kafka时，你是如何确保消息的可靠传递和顺序性的？"></a>在使用Kafka时，你是如何确保消息的可靠传递和顺序性的？</h3><p>在使用Kafka时，我会采用以下几种方式来确保消息的可靠传递和顺序性：</p><ol><li><p>生产者端ACK确认机制：在生产者发送消息时，通过设置ACK参数，让生产者等待Broker的确认信息，只有当Broker确认接收到消息后，生产者才会发送下一条消息，从而确保消息的可靠传递。</p></li><li><p>保存副本机制：Kafka使用了一种基于日志的消息存储机制来保证消息的可靠传递和顺序性。在Kafka集群中每个Partition都有多个副本，当一个主副本故障时，Kafka自动选举一个新的主副本，从而确保消费者可以继续消费消息。</p></li><li><p>有序分区机制：Kafka的分区机制可以确保相同的Key在同一个分区中，从而保证了同一批次的数据可以按照顺序被消费。</p></li><li><p>消费者采用轮询机制：Kafka的消费者采用轮询机制，在一个Consumer Group中，每个消费者都会从不同的Partition中拉取数据进行消费，从而确保每个分区只被一个消费者消费，避免了重复消费和漏消费的问题。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue_interview_question</title>
      <link href="2023/10/04/interview-questions-2023-10-04-vue-interview-question/"/>
      <url>2023/10/04/interview-questions-2023-10-04-vue-interview-question/</url>
      
        <content type="html"><![CDATA[<p>todo</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>other_interview_question</title>
      <link href="2023/10/04/interview-questions-2023-10-04-other-interview-question/"/>
      <url>2023/10/04/interview-questions-2023-10-04-other-interview-question/</url>
      
        <content type="html"><![CDATA[<h2 id="请简述ELK的主要组成部分及其作用"><a href="#请简述ELK的主要组成部分及其作用" class="headerlink" title="请简述ELK的主要组成部分及其作用"></a>请简述ELK的主要组成部分及其作用</h2><p>ELK是一个开源的日志收集和分析平台，它由Elasticsearch、Logstash和Kibana三个组件组成。Elasticsearch是一个分布式的搜索和分析引擎，可以用于存储和搜索大量的日志数据。Logstash是一个数据处理管道，可以从各种来源采集数据并转换为Elasticsearch可读的格式。Kibana是一个数据可视化平台，可以用于展示和分析日志数据。<br>使用ELK进行日志收集和分析的步骤如下：</p><ol><li>在应用程序中配置日志输出，将日志输出到文件或其他支持的日志收集器中。</li><li>使用Logstash采集这些日志数据，并将其转换为Elasticsearch可读的格式。</li><li>将转换后的日志数据存储到Elasticsearch中。</li><li>使用Kibana来展示和分析这些日志数据，比如创建仪表盘、可视化数据等。</li></ol><h2 id="Fastdfs是什么？它有哪些使用场景？"><a href="#Fastdfs是什么？它有哪些使用场景？" class="headerlink" title="Fastdfs是什么？它有哪些使用场景？"></a>Fastdfs是什么？它有哪些使用场景？</h2><p>Fastdfs是一个开源的分布式文件系统，它主要用于大规模文件存储和访问。它具有高性能、高可靠性、可扩展性等特点，被广泛应用于图片、音频、视频等大文件的存储和访问。<br>在.NET Core中，可以使用Fastdfs.Client组件来访问Fastdfs文件系统。可以使用FastdfsStorageManager类来上传、下载、删除文件，同时还可以获取文件元数据等信息。使用Fastdfs.Client组件进行文件存储的基本步骤如下：</p><ol><li>创建一个FastdfsStorageManager对象，并配置连接参数。</li><li>使用UploadFile方法上传文件到Fastdfs服务器，方法返回文件在Fastdfs系统中的文件名和组名。</li><li>使用DownloadFile方法下载文件，方法返回文件的二进制数据。</li><li>使用DeleteFile方法删除Fastdfs系统中的文件。</li></ol><h2 id="Skywalking是什么？如何使用Skywalking进行应用程序性能监控？"><a href="#Skywalking是什么？如何使用Skywalking进行应用程序性能监控？" class="headerlink" title="Skywalking是什么？如何使用Skywalking进行应用程序性能监控？"></a>Skywalking是什么？如何使用Skywalking进行应用程序性能监控？</h2><p>Skywalking是一个开源的应用程序性能监控系统，它可以用于监控分布式应用程序的性能指标。它具有分布式跟踪、性能指标收集、告警等功能，可以帮助开发人员快速定位性能瓶颈和故障。<br>在.NET Core中，可以使用SkyAPM.NET.Client客户端库来连接Skywalking服务端，并收集应用程序性能指标。使用SkyAPM.NET.Client进行性能监控的基本步骤如下：</p><ol><li>在应用程序中添加SkyAPM.NET.Client客户端库的引用。</li><li>配置SkyAPM.NET.Client客户端库连接Skywalking服务端的参数，如服务地址、端口号等。</li><li>在应用程序中添加SkyAPM.NET.Client的拦截器，以收集应用程序的性能指标。</li><li>在Skywalking服务端上创建应用程序，并查看应用程序的性能指标。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb_interview_question</title>
      <link href="2023/10/04/interview-questions-2023-10-04-mongodb-interview-question/"/>
      <url>2023/10/04/interview-questions-2023-10-04-mongodb-interview-question/</url>
      
        <content type="html"><![CDATA[<p>todo</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis_interview_question</title>
      <link href="2023/10/04/interview-questions-2023-10-04-redis-interview-question/"/>
      <url>2023/10/04/interview-questions-2023-10-04-redis-interview-question/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis-为何这么快？"><a href="#Redis-为何这么快？" class="headerlink" title="Redis 为何这么快？"></a>Redis 为何这么快？</h2><ol><li><p>基于内存；</p></li><li><p>单线程减少上下文切换，同时保证原子性；</p></li><li><p>IO 多路复用；</p></li><li><p>高级数据结构（如 SDS、Hash 以及跳表等. 。</p></li></ol><h2 id="为何使用单线程？"><a href="#为何使用单线程？" class="headerlink" title="为何使用单线程？"></a>为何使用单线程？</h2><ul><li>官方回答</li></ul><p>因为 Redis 是基于内存的操作，CPU 不会成为 Redis 的瓶颈，而最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且 CPU 不会成为瓶颈，那就顺理成章地采用单线程的方案了。</p><ul><li>不需要各种锁的性能消耗</li></ul><p>Redis 的数据结构并不全是简单的 Key-Value，还有 List，Hash 等复杂的结构，这些结构有可能会进行很细粒度的操作，比如在很长的列表后面添加一个元素，在 hash 当中添加或者删除一个对象。这些操作可能就需要加非常多的锁，导致的结果是同步开销大大增加。</p><ul><li>单线程多进程集群方案</li></ul><p>单线程的威力实际上非常强大，每核心效率也非常高，多线程自然是可以比单线程有更高的性能上限，但是在今天的计算环境中，即使是单机多线程的上限也往往不能满足需要了，需要进一步摸索的是多服务器集群化的方案，这些方案中多线程的技术照样是用不上的。</p><p>所以单线程、多进程的集群不失为一个时髦的解决方案。</p><h2 id="缓存三大问题以及解决方案？"><a href="#缓存三大问题以及解决方案？" class="headerlink" title="缓存三大问题以及解决方案？"></a>缓存三大问题以及解决方案？</h2><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>查询的数据不存在, 请求打到了数据库</p><ol><li>缓存空值</li><li>使用布隆过滤器</li></ol><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>热点 key 过期,大量请求达到数据库</p><ol><li>请求数据库使用互斥锁, 避请求直接把数据库干停止</li><li>热点数据不要过期(不确定这个方案是不是比较好)</li><li>服务垄断降级</li></ol><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>大量热点 key 同时过期</p><ol><li>随机过期时间</li></ol><h2 id="缓存一致性-先删后写还是先写后删"><a href="#缓存一致性-先删后写还是先写后删" class="headerlink" title="缓存一致性,先删后写还是先写后删"></a>缓存一致性,先删后写还是先写后删</h2><h3 id="先删除缓存后写-DB"><a href="#先删除缓存后写-DB" class="headerlink" title="先删除缓存后写 DB"></a>先删除缓存后写 DB</h3><p>产生脏数据的概率较大（若出现脏数据，则意味着再不更新的情况下，查询得到的数据均为旧的数据. 。</p><p>比如两个并发操作，一个是更新操作，另一个是查询操作，更新操作删除缓存后，查询操作没有命中缓存，先把老数据读出来后放到缓存中，然后更新操作更新了数据库。于是，在缓存中的数据还是老的数据，导致缓存中的数据是脏的，而且还一直这样脏下去了。</p><h3 id="先写-DB-再删缓存"><a href="#先写-DB-再删缓存" class="headerlink" title="先写 DB 再删缓存"></a>先写 DB 再删缓存</h3><p>产生脏数据的概率较小，但是会出现一致性的问题；若更新操作的时候，同时进行查询操作并命中，则查询得到的数据是旧的数据。但是不会影响后面的查询。</p><p>比如一个是读操作，但是没有命中缓存，然后就到数据库中取数据，此时来了一个写操作，写完数据库后，让缓存失效，然后之前的那个读操作再把老的数据放进去，所以会造成脏数据。</p><hr><ol><li><p>缓存设置过期时间，实现最终一致性；</p></li><li><p>使用 Cannel 等中间件监听 binlog 进行异步更新；</p></li><li><p>通过 2PC 或 Paxos 协议保证一致性。</p></li></ol><hr><p>补充有一些详细的问题,来源<a href="https://juejin.cn/post/7287026079066800168">零壹技术栈</a></p><ul><li>为什么写操作是删除缓存, 而不是更新缓存</li></ul><p>答：假设线程A先发起一个写操作，第一步先更新数据库。线程B再发起一个写操作，紧接着也更新了数据库。由于网络等原因，线程B比线程A先更新了缓存，然后线程A更新缓存。</p><p>这时候，缓存保存的是A的数据（老数据），而数据库保存的是B的数据（新数据），数据就不一致了，脏数据出现啦。如果是「删除缓存取代更新缓存」则不会出现这个脏数据问题。</p><p>实际上要写操作的时候更新缓存也是可以的，不过我们需要加一个锁/分布式锁来保证更新cache的时候不存在线程安全问题。</p><ul><li>在写数据的过程中,为什么要先更新DB再删除缓存</li></ul><p>答：假设请求1 是写操作，要是先删除缓存A，这时候来了请求2，请求2是读操作，先读缓存A，发现缓存被删除了(被请求1删除了)，然后去读数据库，但是此时请求1还没来得及把数据及时更新，那么请求2读的就是旧数据，并且请求2还会把读到的旧数据放到缓存中，造成了数据的不一致。</p><p>其实要先删缓存，再更新数据库也是可以，如采用 <strong>延时双删策略</strong>。</p><p>休眠一段时间，再次淘汰缓存。这么做，可以将这段时间内所造成的缓存脏数据，再次删除。</p><p>注意sleep休眠的时间不能小于修改数据库数据的时间小，基本上1秒就够了。</p><h2 id="如何保证-Redis-的高并发？"><a href="#如何保证-Redis-的高并发？" class="headerlink" title="如何保证 Redis 的高并发？"></a>如何保证 Redis 的高并发？</h2><p>Redis 通过主从加集群架构，实现读写分离，主节点负责写，并将数据同步给其他从节点，从节点负责读，从而实现高并发。</p><h2 id="Redis-如何保证原子性？"><a href="#Redis-如何保证原子性？" class="headerlink" title="Redis 如何保证原子性？"></a>Redis 如何保证原子性？</h2><p>因为 Redis 是单线程的，所以 Redis 提供的 API 也是原子操作。</p><p>但我们业务中常常有先 get 后 set 的业务常见，在并发下会导致数据不一致的情况。</p><ol><li><p>使用 incr、decr、setnx 等原子操作；</p></li><li><p>客户端加锁；</p></li><li><p>使用 Lua 脚本实现 CAS 操作。</p></li></ol><h2 id="讲讲应用场景"><a href="#讲讲应用场景" class="headerlink" title="讲讲应用场景"></a>讲讲应用场景</h2><ol><li><p>String：缓存、限流、分布式锁、计数器、分布式 Session 等。</p></li><li><p>Hash：用户信息、用户主页访问量、组合查询等。</p></li><li><p>List：简单队列、关注列表时间轴。</p></li><li><p>Set：赞、踩、标签等。</p></li><li><p>ZSet：排行榜、好友关系链表。</p></li><li><p>缓存, 比如简单的 key-value</p></li><li><p>分布式锁, 当我们在应用中部署了多个节点，这些节点需要操作同一个资源的时候会存在竞争。此时，我们可以使用 Redis 来作为分布式锁，以协调多个节点对共享资源的操作。</p></li><li><p>速率限制器, 比如通过计数器,配合超时时间实现速率限制器,比如请求限流</p></li><li><p>排行榜, 由于 Redis 提供了排序集合（Sorted Sets. 的功能，所以很多游戏应用采用 Redis 来实现各种排行榜功能</p></li><li><p>配合<code>incr</code>可以生成不重复流水号</p></li><li><p>配合<code>List</code>实现消息队列</p></li><li><p>配合 bitmap 实现 user retention</p></li></ol><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="string-的数据结构"><a href="#string-的数据结构" class="headerlink" title="string 的数据结构"></a>string 的数据结构</h3><p>Redis 中所有的 key 都是字符串，这些字符串是通过一个名为简单动态字符串（SDS.  的抽象数据类型实现的。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> sdshdr <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//记录buf数组中已使用字节的数量</span>    <span class="token comment" spellcheck="true">//等于 SDS 保存字符串的长度</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//记录 buf 数组中未使用字节的数量</span>    <span class="token keyword">int</span> free<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//字节数组，用于保存字符串</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><code>SDS</code>的好处</p><ol><li>常数复杂度获取字符串长度</li><li>杜绝缓冲区溢出</li><li>减少修改字符串的内存重新分配次数</li><li>二进制安全</li><li>兼容部分 C 字符串函数</li></ol><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> list<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//表头节点</span>     listNode <span class="token operator">*</span>head<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//表尾节点</span>     listNode <span class="token operator">*</span>tail<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//链表所包含的节点数量</span>     <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//节点值复制函数</span>     <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>free<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//节点值释放函数</span>     <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>free<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//节点值对比函数</span>     <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>match<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>list<span class="token punctuation">;</span><span class="token keyword">typedef</span>  <span class="token keyword">struct</span> listNode<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//前置节点</span>       <span class="token keyword">struct</span> listNode <span class="token operator">*</span>prev<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//后置节点</span>       <span class="token keyword">struct</span> listNode <span class="token operator">*</span>next<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//节点的值</span>       <span class="token keyword">void</span> <span class="token operator">*</span>value<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>listNode</code></pre><ol><li><p>双端：链表具有前置节点和后置节点的引用，获取这两个节点时间复杂度都为 O(1)。</p></li><li><p>无环：表头节点的 prev 指针和表尾节点的 next 指针都指向 NULL,对链表的访问都是以 NULL 结束。</p></li><li><p>带长度计数器：通过 len 属性获取链表长度的时间复杂度为 O(1)。</p></li><li><p>多态：链表节点使用指针来保存节点值，可以保存各种不同类型的值。</p></li></ol><h3 id="Redis-是如何实现字典的？"><a href="#Redis-是如何实现字典的？" class="headerlink" title="Redis 是如何实现字典的？"></a>Redis 是如何实现字典的？</h3><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> dictht<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//哈希表数组</span>     dictEntry <span class="token operator">*</span><span class="token operator">*</span>table<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//哈希表大小</span>     <span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//哈希表大小掩码，用于计算索引值</span>     <span class="token comment" spellcheck="true">//总是等于 size-1</span>     <span class="token keyword">unsigned</span> <span class="token keyword">long</span> sizemask<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//该哈希表已有节点的数量</span>     <span class="token keyword">unsigned</span> <span class="token keyword">long</span> used<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>dictht</code></pre><p>当字典被用作数据库的底层实现，或者哈希键的底层实现时，Redis 使用 MurmurHash2 算法来计算键的哈希值。这种算法的优点在于，即使输入的键是有规律的，算法仍能给出一个很好的随机分布性，并且算法的计算速度也非常快。</p><h3 id="有序集合-Zset-的底层实现？"><a href="#有序集合-Zset-的底层实现？" class="headerlink" title="有序集合 Zset 的底层实现？"></a>有序集合 Zset 的底层实现？</h3><p>zset 是 Redis 中一个非常重要的数据结构，其底层是基于跳表（skip list.  实现的。</p><p>跳表是一种随机化的数据结构，基于并联的链表，实现简单，插入、删除、查找的复杂度均为 O(logN)。简单说来跳表也是链表的一种，只不过它在链表的基础上增加了跳跃功能，正是这个跳跃的功能，使得在查找元素时，跳表能够提供 O(logN) 的时间复杂度。</p><p>跳表为了避免每次插入或删除带来的额外操作，不要求上下相邻两层链表之间的节点个数有严格的对应关系，而是为每个节点随机出一个层数（level. 。而且新插入一个节点不会影响其它节点的层数。因此，插入操作只需要修改插入节点前后的指针，而不需要对很多节点都进行调整。</p><h3 id="什么是-Redis-的-intset？"><a href="#什么是-Redis-的-intset？" class="headerlink" title="什么是 Redis 的 intset？"></a>什么是 Redis 的 intset？</h3><p>整数集合（intset.  是 Redis 用于保存整数值的集合抽象数据类型，它可以保存类型为 int16_t、int32_t 或者 int64_t 的整数值，并且保证集合中不会出现重复元素。</p><p>整数集合的每个元素都是 contents 数组的一个数据项，它们按照从小到大的顺序排列，并且不包含任何重复项。需要注意的是虽然 contents 数组声明为 int8_t 类型，但是实际上 contents 数组并不保存任何 int8_t 类型的值，其真正类型有 encoding 来决定。</p><h2 id="五种类型分别对于哪种实现？"><a href="#五种类型分别对于哪种实现？" class="headerlink" title="五种类型分别对于哪种实现？"></a>五种类型分别对于哪种实现？</h2><ul><li>字符串对象的 encoding 有三种，分别是：int、raw、embstr。</li></ul><ol><li><p>如果一个字符串对象保存的是整数值，并且这个整数值可以用 long 类型标识，那么字符串对象会讲整数值保存在 ptr 属性中，并将 encoding 设置为 int。比如 set number 10086 命令。</p></li><li><p>如果字符串对象保存的是一个字符串值，并且这个字符串的长度大于 44 字节，那么字符串对象将使用一个简单动态字符串（SDS. 来保存这个字符串值，并将对象的编码设置为 raw。</p></li><li><p>如果字符串对象保存的是一个字符串值，并且这个字符串的长度小于等于 44 字节，那么字符串对象将使用 embstr 编码的方式来保存这个字符串。</p></li></ol><p>embstr 的编码方式的一些优点：</p><p>embstr 存储形式是这样一种存储形式，它将 RedisObject 对象头和 SDS 对象连续存在一起，使用 malloc 方法一次分配。embstr 最小占用空间为 19（16+3. ，而 64-19-1（结尾的\0. =44，所以 embstr 只能容纳 44 字节。</p><ol><li><p>embstr 编码将创建字符串对象所需的内存分配次数从 raw 编码的两次降低为一次。</p></li><li><p>释放 embstr 编码的字符串对象只需要调用一次内存释放函数，而释放 raw 编码的字符串对象需要调用两次内存释放函数。</p></li><li><p>因为 embstr 编码的字符串对象的所有数据都保存在一块连续的内存里面，所以这种编码的字符串对象比起 raw ，编码的字符串对象能够更好地利用缓存带来的优势。</p></li></ol><ul><li>哈希对象（hash）</li></ul><p>哈希对象的编码有 ziplist 和 hashtable 两种。当哈希对象保存的键值对数量小于 512，并且所有键值对的长度都小于 64 字节时，使用压缩列表存储；否则使用 hashtable 存储。</p><ul><li>列表对象（list）</li></ul><p>列表对象的编码有 ziplist 和 linkedlist 两种。当列表的长度小于 512，并且所有元素的长度都小于 64 字节时，使用压缩列表存储，否则使用 linkedlist 存储。</p><ul><li>集合对象（set）</li></ul><p>列表对象的编码有 intset 和 hashtable 两种。当集合的长度小于 512，并且所有元素都是整数时，使用整数集合存储；否则使用 hashtable 存储。</p><ul><li>有序集合对象（sort set）</li></ul><p>有序集合对象的编码有 ziplist 和 skiplist 两种。当有序集合的长度小于 128，并且所有元素的长度都小于 64 字节时，使用压缩列表存储；否则使用 skiplist 存储。</p><p>intset（整数集合. 和 ziplist（压缩列表. 主要是为节省内存而设计的内存结构，它的优点就是节省内存，但缺点就是比其他结构要消耗更多的时间，所以 Redis 在数据量小的时候使用整数集合存储。</p><h2 id="Redis-的数据过期策略是什么？"><a href="#Redis-的数据过期策略是什么？" class="headerlink" title="Redis 的数据过期策略是什么？"></a>Redis 的数据过期策略是什么？</h2><h3 id="如何设置过期时间"><a href="#如何设置过期时间" class="headerlink" title="如何设置过期时间"></a>如何设置过期时间</h3><ol><li><code>expire key time</code></li><li><code>setex(String key, int seconds, String value)</code>这是字符串独有的</li></ol><p>如果没有设置时间，那缓存就是永不过期</p><h3 id="常见的过期策略"><a href="#常见的过期策略" class="headerlink" title="常见的过期策略"></a>常见的过期策略</h3><ul><li>定时删除</li></ul><p>创建一个定时器，当key设置有过期时间，且过期时间到达时，由定时器任务立即执行对键的删除操作<br>优点：节约内存，到时就删除，快速释放掉不必要的内存占用<br>缺点：CPU压力很大，无论CPU此时负载量多高，均占用CPU，会影响redis服务器响应时间和指令吞吐量</p><ul><li>惰性删除</li></ul><p>数据到达过期时间，不做处理。等下次访问该数据时，如果未过期，返回数据 ；发现已过期，删除，返回不存在。<br>优点：节约CPU性能，发现必须删除的时候才删除<br>缺点：内存压力很大，出现长期占用内存的数据</p><ul><li>定期删除</li></ul><p>周期性轮询redis库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度<br>特点1：CPU性能占用设置有峰值，检测频度可自定义设置<br>特点2：内存压力不是很大，长期占用内存的冷数据会被持续清理</p><h2 id="持久化文件对过期策略的处理？"><a href="#持久化文件对过期策略的处理？" class="headerlink" title="持久化文件对过期策略的处理？"></a>持久化文件对过期策略的处理？</h2><p>过期 key 是不会写入 RDB 和 AOF 文件，同时数据恢复时也会做过期验证。</p><h2 id="Redis-有哪些内存淘汰机制？"><a href="#Redis-有哪些内存淘汰机制？" class="headerlink" title="Redis 有哪些内存淘汰机制？"></a>Redis 有哪些内存淘汰机制？</h2><p>Redis 作为一个内存数据库，在内存空间不足的时候，为了保证命中率，就会和我们操作系统中的页面置换算法类似，选择一定的数据淘汰策略。</p><ul><li>volatile（设置过期时间的数据集）</li></ul><ol><li><p>volatile-lru：从已设置过期时间的数据集中挑选最近最少使用的数据淘汰。</p></li><li><p>volatile-ttl：从已设置过期时间的数据集中挑选将要过期的数据淘汰。</p></li><li><p>volatile-random：从已设置过期时间的数据集中任意选择数据淘汰。</p></li><li><p>volatile-lfu：从已设置过期时间的数据集挑选使用频率最低的数据淘汰。</p></li></ol><ul><li>allkeys（所以数据集）</li></ul><ol><li><p>allkeys-lru：从数据集中挑选最近最少使用的数据淘汰</p></li><li><p>allkeys-lfu：从数据集中挑选使用频率最低的数据淘汰。</p></li><li><p>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</p></li></ol><ul><li>no-enviction</li></ul><ol><li>no-enviction（驱逐）：禁止驱逐数据，这也是默认策略。</li></ol><p>意思是当内存不足以容纳新入数据时，新写入操作就会报错，请求可以继续进行，线上任务也不能持续进行，采用 no-enviction 策略可以保证数据不被丢失。</p><p>PS：在 redis.config 文件中，我们可以设置 maxmemory 的值来配置 Redis 的最大占用内存字节数。</p><h2 id="Redis-有哪些持久化机制？"><a href="#Redis-有哪些持久化机制？" class="headerlink" title="Redis 有哪些持久化机制？"></a>Redis 有哪些持久化机制？</h2><p>RDB 和 AOF。</p><h2 id="说说-Redis-的-RDB？"><a href="#说说-Redis-的-RDB？" class="headerlink" title="说说 Redis 的 RDB？"></a>说说 Redis 的 RDB？</h2><p>RDB 持久化是指在指定的时间间隔内将内存中的数据集快照写入磁盘。也是默认的持久化方式。也就是将内存中数据以快照的方式写入到二进制文件中，默认的文件名为 dump.rdb。</p><p>RDB 支持 同步（save 命令）、后台异步（bgsave）以及自动配置三种方式触发。</p><ul><li>优点</li></ul><p>RDB 文件紧凑，全量备份，非常适合用于进行备份和灾难恢复<br>生成 RDB 文件时支持异步处理，主进程不需要进行任何磁盘IO操作<br>RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快</p><ul><li>缺点</li></ul><p>RDB 快照是一次全量备份，存储的是内存数据的二进制序列化形式，存储上非常紧凑。且在快照持久化期间修改的数据不会被保存，可能丢失数据。</p><h2 id="说说-Redis-的-AOF？"><a href="#说说-Redis-的-AOF？" class="headerlink" title="说说 Redis 的 AOF？"></a>说说 Redis 的 AOF？</h2><p>全量备份总是耗时的，有时候我们提供一种更加高效的方式 AOF，其工作机制更加简单：会将每一个收到的写命令追加到文件中。</p><p>随着时间推移，AOF 持久化文件也会变的越来越大。为了解决此问题，Redis 提供了 bgrewriteaof 命令，作用是 fork 出一条新进程将内存中的数据以命令的方式保存到临时文件中，完成对AOF 文件的重写。</p><p>AOF 也有三种触发方式：1）每修改同步 always 2）每秒同步 everysec 3）不同no：从不同步。</p><ul><li>优点</li></ul><p>AOF 可以更好的保护数据不丢失，一般 AOF 隔 1 秒通过一个后台线程执行一次 fsync 操作<br>AOF 日志文件没有任何磁盘寻址的开销，写入性能非常高，文件不容易破损<br>AOF 日志文件即使过大的时候，出现后台重写操作，也不会影响客户端的读写<br>AOF 日志文件的命令通过非常可读的方式进行记录，这个特性非常适合做灾难性的误删除的紧急恢复</p><ul><li>缺点</li></ul><p>对于同一份数据来说，AOF 日志文件通常比 RDB 数据快照文件更大</p><p>AOF开启后，支持的写 QPS 会比RDB支持的写 QPS 低，因为 AOF 一般会配置成每秒 fsync 一次日志文件，当然，每秒一次 fsync，性能也还是很高的</p><h2 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h2><h3 id="什么是Redis的Pipeline"><a href="#什么是Redis的Pipeline" class="headerlink" title="什么是Redis的Pipeline"></a>什么是Redis的Pipeline</h3><p>在出现 Pipeline 之前，我们梳理一下 Redis 客户端执行一条命令需要经过哪些步骤： 发送命令－〉命令排队－〉命令执行－〉返回结果。</p><p>这个过程称为 Round trip time(简称RTT, 往返时间)，mget 和 mset 有效节约了 RTT，但大部分命令（如 hgetall 并没有 mhgetall）不支持批量操作，需要消耗 N 次 RTT ，这个时候需要 pipeline 来解决这个问题。</p><h3 id="原生批命令-mset-mget-与-Pipeline-区别"><a href="#原生批命令-mset-mget-与-Pipeline-区别" class="headerlink" title="原生批命令 (mset, mget) 与 Pipeline 区别?"></a>原生批命令 (mset, mget) 与 Pipeline 区别?</h3><ol><li><p>原生批命令是原子性的，而 pipeline 是非原子操作。</p></li><li><p>原生批命令一命令多个 key, 但 pipeline 支持多命令（存在事务），非原子性。</p></li><li><p>原生批命令是服务端实现，而 pipeline 需要服务端与客户端共同完成。</p></li></ol><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="Redis-6-之前真的是单线程吗？"><a href="#Redis-6-之前真的是单线程吗？" class="headerlink" title="Redis 6 之前真的是单线程吗？"></a>Redis 6 之前真的是单线程吗？</h3><p>Redis 在处理客户端的请求时，包括获取 (socket 读)、解析、执行、内容返回 (socket 写) 等都由一个顺序串行的主线程处理，这就是所谓的单线程。但如果严格来讲从 Redis 4 之后并不是单线程，除了主线程外，它也有后台线程在处理一些较为缓慢的操作，例如清理脏数据、无用连接的释放、大 key 的删除等等。</p><h3 id="Redis-6-之前为什么使用单线程？"><a href="#Redis-6-之前为什么使用单线程？" class="headerlink" title="Redis 6 之前为什么使用单线程？"></a>Redis 6 之前为什么使用单线程？</h3><p>使用了单线程后，可维护性高。多线程模型虽然在某些方面表现优异，但是它却引入了程序执行顺序的不确定性，带来了并发读写的一系列问题，增加了系统复杂度、同时可能存在线程切换、甚至加锁解锁、死锁造成的性能损耗。</p><p>同时 Redis 通过 AE 事件模型以及 IO 多路复用等技术，即使单线程处理性能也非常高，因此没有必要使用多线程。单线程机制使得 Redis 内部实现的复杂度大大降低，Hash 的惰性 Rehash、Lpush 等等 “线程不安全” 的命令都可以无锁进行。</p><h3 id="Redis-6-为何引入多线程？"><a href="#Redis-6-为何引入多线程？" class="headerlink" title="Redis 6 为何引入多线程？"></a>Redis 6 为何引入多线程？</h3><p>随着目前行业内越来越复杂的业务场景，有些公司动不动就上亿的交易量，因此需要更大的 QPS。常见的解决方案是在分布式架构中对数据进行分区并采用多个服务器，但该方案有非常大的缺点，比如：</p><ol><li><p>要管理的 Redis 服务器太多，维护代价大；</p></li><li><p>某些适用于单个 Redis 服务器的命令不适用于数据分区；</p></li><li><p>数据分区无法解决热点读/写问题；</p></li><li><p>数据偏斜，重新分配和放大/缩小变得更加复杂等等。</p></li></ol><p>从 Redis 自身角度来说，因为读写网络的 read/write 系统调用占用了 Redis 执行期间大部分 CPU 时间，瓶颈主要在于网络的 IO 消耗, 优化主要有两个方向:</p><ol><li><p>提高网络 IO 性能，典型的实现比如使用 DPDK 来替代内核网络栈的方式；</p></li><li><p>使用多线程充分利用多核，典型的实现比如 Memcached。</p></li></ol><p>协议栈优化的这种方式跟 Redis 关系不大，支持多线程是一种最有效最便捷的操作方式。所以总结起来，Redis 支持多线程主要就是两个原因：</p><ul><li>可以充分利用服务器 CPU 资源，目前主线程只能利用一个核；</li><li>多线程任务可以分摊 Redis 同步 IO 读写负荷。</li></ul><h3 id="多线程如何开启以及配置？"><a href="#多线程如何开启以及配置？" class="headerlink" title="多线程如何开启以及配置？"></a>多线程如何开启以及配置？</h3><p>Redis 6 的多线程默认是禁用的，只使用主线程。如需开启需要修改 redis.conf 配置文件中的 io-threads-do-reads yes。</p><p>开启多线程后，还需要设置线程数，否则是不生效的。同样修改 redis.conf 文件中的 io-threads [n] 配置。</p><p>关于线程数的设置，官方有一个建议：4 核的机器建议设置为 2 或 3 个线程，8 核的建议设置为 6 个线程，线程数一定要小于机器核数。还需要注意的是，线程数并不是越大越好，官方认为超过了 8 个基本就没什么意义了。</p><h3 id="Redis-多线程的实现机制？"><a href="#Redis-多线程的实现机制？" class="headerlink" title="Redis 多线程的实现机制？"></a>Redis 多线程的实现机制？</h3><p>大致流程如下：</p><ol><li><p>主线程负责接收建立连接请求，获取 socket 放入全局等待读处理队列；</p></li><li><p>主线程处理完读事件之后，通过 RR(Round Robin) 将这些连接分配给这些 IO 线程；</p></li><li><p>主线程阻塞等待 IO 线程读取 socket 完毕；</p></li><li><p>主线程通过单线程的方式执行请求命令，请求数据读取并解析完成，但并不执行；</p></li><li><p>主线程阻塞等待 IO 线程将数据回写 socket 完毕；</p></li><li><p>解除绑定，清空等待队列。</p></li></ol><p>该设计的特点：</p><ol><li><p>IO 线程要么同时在读 socket，要么同时在写，不会同时读或写。</p></li><li><p>IO 线程只负责读写 socket 解析命令，不负责命令处理。</p></li></ol><h3 id="多线程是否会导致线程安全问题？"><a href="#多线程是否会导致线程安全问题？" class="headerlink" title="多线程是否会导致线程安全问题？"></a>多线程是否会导致线程安全问题？</h3><p>从上面的实现机制可以看出，Redis 的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程顺序执行。所以我们不需要去考虑控制 key、lua、事务，LPUSH/LPOP 等等的并发及线程安全问题。</p><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><h3 id="Redis-集群搭建有几种模式？"><a href="#Redis-集群搭建有几种模式？" class="headerlink" title="Redis 集群搭建有几种模式？"></a>Redis 集群搭建有几种模式？</h3><ul><li>主从模式</li></ul><p>和 MySQL 需要主从复制的原因一样，Redis 虽然读写速度非常快，但是也会产生性能瓶颈，特别是在读压力上，为了分担压力，Redis 支持主从复制。Redis 的主从结构一主一从，一主多从或级联结构，复制类型可以根据是否是全量而分为全量同步和增量同步。</p><ul><li>哨兵模式</li></ul><p>在主从复制实现之后，如果想对 master 进行监控，Redis 提供了一种哨兵机制，哨兵的含义就是监控 Redis 系统的运行状态，通过投票机制，从 slave 中选举出新的 master 以保证集群正常运行。</p><p>还可以启用多个哨兵进行监控以保证集群足够稳健，这种情况下，哨兵不仅监控主从服务，哨兵之间也会相互监控。</p><ul><li>Cluster 集群模式</li></ul><h3 id="Redis-主从复制的实现？"><a href="#Redis-主从复制的实现？" class="headerlink" title="Redis 主从复制的实现？"></a>Redis 主从复制的实现？</h3><p>主从复制可以根据需要分为全量同步的增量同步两种方式。</p><ul><li>全量同步</li></ul><p>Redis 全量复制一般发生在 slave 的初始阶段，这时 slave 需要将 master 上的数据都复制一份，具体步骤如下：</p><ol><li><p>slave 连接 master，发送 SYNC 命令；</p></li><li><p>master 接到 SYNC 命令后执行 BGSAVE 命令生产 RDB 文件，并使用缓冲区记录此后执行的所有写命令；</p></li><li><p>master 执行完 BGSAVE 后，向所有的 slave 发送快照文件，并在发送过程中继续记录执行的写命令；</p></li><li><p>slave 收到快照后，丢弃所有的旧数据，载入收到的数据；</p></li><li><p>master 快照发送完成后就会开始向 slave 发送缓冲区的写命令；</p></li><li><p>slave 完成对快照的载入，并开始接受命令请求，执行来自 master 缓冲区的写命令；</p></li><li><p>slave 完成上面的数据初始化后就可以开始接受用户的读请求了。</p></li></ol><ul><li>增量同步</li></ul><p>增量复制实际上就是在 slave 初始化完成后开始正常工作时 master 发生写操作同步到 slave 的过程。增量复制的过程主要是 master 每执行一个写命令就会向 slave 发送相同的写命令，slave 接受并执行写命令，从而保持主从一致。</p><h3 id="Redis-的主从同步策略？"><a href="#Redis-的主从同步策略？" class="headerlink" title="Redis 的主从同步策略？"></a>Redis 的主从同步策略？</h3><p>主从同步刚连接的时候进行全量同步，全量同步结束后开始增量同步。</p><h3 id="哨兵模式的原理？"><a href="#哨兵模式的原理？" class="headerlink" title="哨兵模式的原理？"></a>哨兵模式的原理？</h3><p>哨兵主要用于管理多个 Redis 服务器，主要有以下三个任务：监控、提醒以及故障转移。</p><p>每个哨兵会向其它哨兵、master、slave 定时发送消息，以确认对方是否还存活。如果发现对方在配置的指定时间内未回应，则暂时认为对方已挂。若“哨兵群”中的多数 sentinel 都报告某一 master 没响应，系统才认为该 master “彻底死亡”，通过一定的 vote 算法从剩下的 slave 节点中选一台提升为 master，然后自动修改相关配置。</p><h3 id="什么是一致性-Hash-以及解决什么问题？"><a href="#什么是一致性-Hash-以及解决什么问题？" class="headerlink" title="什么是一致性 Hash 以及解决什么问题？"></a>什么是一致性 Hash 以及解决什么问题？</h3><p>一致性 hash 其实是普通 hash 算法的改良版，其 hash 计算方法没有变化，但是 hash 空间发生了变化，由原来的线性的变成了环。</p><p>缓存 key 通过 hash 计算之后得到在 hash 环中的位置，然后顺时针方向找到第一个节点，这个节点就是存放 key 的节点。</p><p>由此可见，一致性 hash 主要是为了解决普通 hash 中扩容和宕机的问题。</p><p>同时还可以通过虚拟节点来解决数据倾斜的问题：就是在节点稀疏的 hash 环上对物理节点虚拟出一部分虚拟节点，key 会打到虚拟节点上面，而虚拟节点上的 key 实际也是映射到物理节点上的，这样就避免了数据倾斜导致单节点压力过大导致节点雪崩的问题。</p><blockquote><p>后面集群还有请看参考链接</p></blockquote><h2 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h2><h3 id="如何设置Key当天失效"><a href="#如何设置Key当天失效" class="headerlink" title="如何设置Key当天失效"></a>如何设置Key当天失效</h3><ul><li>使用<code>expireAt</code></li><li>key值带上时间戳</li></ul><h3 id="如何实现分布式锁"><a href="#如何实现分布式锁" class="headerlink" title="如何实现分布式锁"></a>如何实现分布式锁</h3><p>分布式锁的要求</p><ul><li>「互斥性」: 任意时刻，只有一个客户端能持有锁</li><li>「锁超时释放」：持有锁超时，可以释放，防止不必要的资源浪费，也可以防止死锁</li><li>「可重入性」:一个线程如果获取了锁之后,可以再次对其请求加锁</li><li>「高性能和高可用」：加锁和解锁需要开销尽可能低，同时也要保证高可用，避免分布式锁失效</li><li>「安全性」：锁只能被持有的客户端删除，不能被其他客户端删除</li></ul><h3 id="如何实现排行榜功能"><a href="#如何实现排行榜功能" class="headerlink" title="如何实现排行榜功能"></a>如何实现排行榜功能</h3><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="为什么和如何优化大key"><a href="#为什么和如何优化大key" class="headerlink" title="为什么和如何优化大key"></a>为什么和如何优化大key</h3><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>什么是大key问题, 就是说这个key存储的value过大</p><p>带来的问题:</p><ul><li>string类型的大key,加上redis是单线程, 读写大key会使性能下降, 甚至阻塞服务</li><li>如果是hash,list,zset,等类型的key,删除egekey也会严重阻塞redis进程,因为删除时间复杂度是O(n)</li></ul><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul><li>单个简单的key存储的value很大<ol><li>拆分成多个key, 用mget获取值</li><li>把大value拆到一个hash中,用hget去获取值</li></ol></li><li>hash,list,set,zset中存储过多元素<ol><li>拆分</li></ol></li></ul><h3 id="如何优化热点key"><a href="#如何优化热点key" class="headerlink" title="如何优化热点key"></a>如何优化热点key</h3><p>热 key 带来的问题：请求到的分片过于集中，超过单台 Server 的性能极限。</p><ol><li><p>服务端缓存：即将热点数据缓存至服务端的内存中；</p></li><li><p>备份热点Key：即将热点Key+随机数，随机分配至 Redis 其它节点中。</p></li></ol><h2 id="在使用-Redis-时，你是如何处理并发读写操作的？"><a href="#在使用-Redis-时，你是如何处理并发读写操作的？" class="headerlink" title="在使用 Redis 时，你是如何处理并发读写操作的？"></a>在使用 Redis 时，你是如何处理并发读写操作的？</h2><p>在处理并发读写操作时，我会采用以下几种方式：</p><ol><li><p>使用 Redis 事务。通过 MULTI、EXEC、WATCH 等命令，将一组需要同时执行的操作集合在一起，一次性完成所有操作的执行，并且在执行期间对相关键进行监视，保证在执行期间没有其他客户端修改这些键。如果被监视的键在执行期间被其他客户端修改，则该事务执行失败，需要重试。</p></li><li><p>使用 Redis 锁。通过 SETNX、GETSET 等命令，获取或设置一个键的值。如果该键当前没有被占用，则该操作成功，客户端可以开始进行操作；如果该键已经被占用，则该操作失败，客户端需要等待一段时间后重试。</p></li><li><p>使用 Redis Lua 脚本。通过编写 Lua 脚本，将多个 Redis 命令封装在一起，以原子方式执行多个操作，避免了在使用事务和锁时可能存在的问题。此外，Lua 脚本还支持执行复杂的计算逻辑，可以大大简化代码的编写和维护。</p></li></ol><h2 id="在使用-Redis-时，你是如何确保缓存数据的有效性和一致性的？"><a href="#在使用-Redis-时，你是如何确保缓存数据的有效性和一致性的？" class="headerlink" title="在使用 Redis 时，你是如何确保缓存数据的有效性和一致性的？"></a>在使用 Redis 时，你是如何确保缓存数据的有效性和一致性的？</h2><p>在使用 Redis 时，为确保缓存数据的有效性和一致性，有以下几种方式：</p><ol><li><p>设置过期时间：在将数据写入缓存时，可以为每个键设置相应的过期时间。当缓存到期时，Redis 会自动将其删除，并且该键将自动失效，从而确保缓存数据在一定时间后被自动刷新。</p></li><li><p>使用发布/订阅功能：Redis 支持发布/订阅机制，通过该机制可以让多个客户端相互之间通信，以便订阅者能够获得缓存数据的更新消息，并及时进行缓存的更新。</p></li><li><p>使用 Redis 事务：Redis 支持事务功能，可以将一系列操作封装在一个事务里面，这样可以把多个命令作为一个整体进行批量执行，避免因为中间出现错误导致部分缓存更新失败。(这里应该有问题,Redis 的事务就是一次性、顺序性、排他性的执行一个队列中的一系列命令,不支持数据库系统的 ACID 的概念)</p></li><li><p>采用二级缓存机制：在使用 Redis 作为主缓存时，还可以添加二级缓存来提高缓存的效率和可靠性。例如，可以在应用程序中设置本地内存缓存作为二级缓存，在 Redis 缓存未命中时，从本地缓存中获取数据，从而减少对 Redis 的访问次数。</p></li></ol><h2 id="统计视频在线观看人数"><a href="#统计视频在线观看人数" class="headerlink" title="统计视频在线观看人数"></a>统计视频在线观看人数</h2><ul><li>要求分钟级的准确性</li><li>退出不靠谱, 可能是用户直接杀掉app,要考虑到这点</li></ul><hr><p>引用评论腾讯大佬的做法</p><p>使用Redis的Hash即可,在hash种保存以下数据</p><p>key:field:value分别是视频id:用户id:时间戳</p><p>查看在线人数就是<code>hlen</code>来统计</p><p>观看页面通过定时请求去更新时间戳, 清理时机就是在更新的同时, 用另一个分钟级过期的key来保存，key就是视频id。setnx ex一下。如果key不存在，说明过期了,需要清理了, 那就把hgetall出来，遍历一下，把时间戳已经过期的field删掉。key存在则不需要清理过期field。</p><p>也有人提出可以用zset来优化</p><p>key:sort:field -&gt; 视频id:时间戳:用户id, 这样清理方便很多,可以直接取出一个范围的值去除</p><p>两个方案也有可能会这样区别</p><blockquote><p>区别是(zset)心跳写入变重了，清理操作变轻。这个场景是可能高并发写的，取决于观看人数。有人提到10w在线大主播，30s一个心跳都是几百QPS的热key了，轻量写会更好适配大主播一些。</p></blockquote><p>对于一些热门key,需要做一些大key热key优化。读操作可以singleFilght合并请求，清理操作可以hscan转异步去搞。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/adminpd/article/details/122934938">Redis面试题</a><br><a href="https://www.bilibili.com/video/BV1tL411e78N/">视频统计在线人数</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ddd_interview_question</title>
      <link href="2023/10/04/interview-questions-2023-10-04-ddd-interview-question/"/>
      <url>2023/10/04/interview-questions-2023-10-04-ddd-interview-question/</url>
      
        <content type="html"><![CDATA[<h3 id="知道什么是ddd吗"><a href="#知道什么是ddd吗" class="headerlink" title="知道什么是ddd吗?"></a>知道什么是ddd吗?</h3><p>DDD（Domain-Driven Design，领域驱动设计）是一种软件开发方法论，强调将业务领域的专业知识融入到软件设计和开发中。DDD关注于解决复杂业务问题，并将业务逻辑和领域模型置于核心地位。</p><h3 id="有用过ddd吗-对ddd的了解"><a href="#有用过ddd吗-对ddd的了解" class="headerlink" title="有用过ddd吗?对ddd的了解"></a>有用过ddd吗?对ddd的了解</h3><p>以下是我对DDD设计模式的理解：</p><ol><li><p>领域：领域是指业务问题所涉及的特定领域，如电子商务、银行业务等。在DDD中，将业务领域抽象成领域模型。</p></li><li><p>领域模型：领域模型是对业务领域的抽象和建模，它包含了业务实体、值对象、聚合根、领域服务等概念。领域模型通过对象和行为的组合来描述业务逻辑和规则。</p></li><li><p>聚合根：聚合根是领域模型中的重要概念，它是一组相关对象的根实体，用于保证数据的一致性和完整性。聚合根通过封装一组对象和定义一些约束来管理领域模型中的业务逻辑。</p></li><li><p>领域服务：领域服务是一些不属于任何特定实体的操作或行为，它处理领域模型中的复杂业务逻辑，提供一些跨实体的操作。</p></li><li><p>值对象：值对象是不可变的对象，它表示一些具体的属性或属性集合。值对象没有唯一标识，主要用于封装和传递数据。</p></li><li><p>聚合和聚合边界：聚合是一组相关对象的集合，它们共同构成一个单元，具有边界和一致性。聚合边界定义了聚合的边界范围，用于保证聚合内部的一致性和完整性。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ddd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scene_design_interview_question</title>
      <link href="2023/10/04/interview-questions-2023-10-04-scene-design-interview-question/"/>
      <url>2023/10/04/interview-questions-2023-10-04-scene-design-interview-question/</url>
      
        <content type="html"><![CDATA[<h2 id="一些场景相关的问题"><a href="#一些场景相关的问题" class="headerlink" title="一些场景相关的问题"></a>一些场景相关的问题</h2><h3 id="分布式Id"><a href="#分布式Id" class="headerlink" title="分布式Id"></a>分布式Id</h3><p>要求</p><ol><li>性能要好</li><li>不能重复</li></ol><h3 id="分布式流水码"><a href="#分布式流水码" class="headerlink" title="分布式流水码"></a>分布式流水码</h3><p>要求</p><ol><li>要求在高并发的情况下生成流水号, 流水号格式: 模块+年月日+流水号</li><li>要保证高并发下的流水号的唯一性</li></ol><hr><ol><li>单机部署使用 <code>Interlocked.Increment</code>是流水号同步增加<br>缺点<br>无法支持分布式</li></ol><hr><p>使用分布式锁</p><ol><li>使用<code>redis</code>分布式锁</li><li>配合分布式锁组件, 因为可以存在锁失效操作未完成,锁何时释放的问题,有组件集合了这些操作</li></ol><hr><p>使用消息队列</p><ol><li>使用消息中间件进行处理, 将并发改成串行</li></ol><hr><p>使用Redis <code>Incr</code>命令达到分布式原子操作</p><h3 id="秒杀"><a href="#秒杀" class="headerlink" title="秒杀"></a>秒杀</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><ol><li>商品数量少</li><li>参与秒杀的用户多</li><li>不要重复扣库存</li><li>等等</li></ol><h3 id="讲讲你怎么设计数据过滤系统-比如说经理能看到手下所有客户消息-员工只能看到自己的-更高级的可以看到更多人的"><a href="#讲讲你怎么设计数据过滤系统-比如说经理能看到手下所有客户消息-员工只能看到自己的-更高级的可以看到更多人的" class="headerlink" title="讲讲你怎么设计数据过滤系统,比如说经理能看到手下所有客户消息, 员工只能看到自己的, 更高级的可以看到更多人的"></a>讲讲你怎么设计数据过滤系统,比如说经理能看到手下所有客户消息, 员工只能看到自己的, 更高级的可以看到更多人的</h3>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 场景设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>design_pattern_interview_question</title>
      <link href="2023/10/04/interview-questions-2023-10-04-design-pattern-interview-question/"/>
      <url>2023/10/04/interview-questions-2023-10-04-design-pattern-interview-question/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h2><p>设计模式是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性、程序的重用性。</p><h2 id="使用设计模式的好处"><a href="#使用设计模式的好处" class="headerlink" title="使用设计模式的好处"></a>使用设计模式的好处</h2><ul><li><p>设计模式可在多个项目中重用。</p></li><li><p>设计模式提供了一个帮助定义系统架构的解决方案。</p></li><li><p>设计模式吸收了软件工程的经验。</p></li><li><p>设计模式为应用程序的设计提供了透明性。</p></li><li><p>设计模式是被实践证明切实有效的，由于它们是建立在专家软件开发人员的知识和经验之上的。</p></li></ul><h2 id="说说看六大设计原则"><a href="#说说看六大设计原则" class="headerlink" title="说说看六大设计原则"></a>说说看六大设计原则</h2><ol><li><p>单一责任原则（Principle of single responsibility）：一个类或者一个方法只负责一项职责。</p></li><li><p>里氏替换原则（Liskov Substitution Principle.）：使用基类的任何地方可以使用继承的子类，完美的替换基类。</p></li><li><p>依赖倒转原则（Dependence Inversion Principle.）：其核心思想是面向接口编程。</p></li><li><p>接口隔离原则（Interface Segregation Principle.）：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思。</p></li><li><p>迪米特法则（Demeter Principle.）：最少知道原则，一个对象应当对其他对象有尽可能少地了解，简称类间解耦。</p></li><li><p>开闭原则（Open Close Principle.）：尽量通过扩展软件实体来解决需求变化，而不是通过修改已有的代码来完成变化。</p></li></ol><h2 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h2><ul><li>创建模式<ul><li>工厂方法</li><li>抽象工厂</li><li>创建者模式</li><li>原型模式</li><li>单例</li></ul></li><li>结构模式<ul><li>适配器</li><li>桥接</li><li>过滤器</li><li>组合</li><li>装饰器</li><li>门面</li><li>享元</li><li>代理</li></ul></li><li>行为模式<ul><li>解释器</li><li>模板方法</li><li>责任链</li><li>命令模式</li><li>迭代器</li><li>策略</li><li>观察者</li></ul></li></ul><h2 id="常见的排序算法和其时间复杂度是什么？"><a href="#常见的排序算法和其时间复杂度是什么？" class="headerlink" title="常见的排序算法和其时间复杂度是什么？"></a>常见的排序算法和其时间复杂度是什么？</h2><h2 id="某个排序算法（冒泡、选择、插入、归并、快排、桶排-是如何实现的？"><a href="#某个排序算法（冒泡、选择、插入、归并、快排、桶排-是如何实现的？" class="headerlink" title="某个排序算法（冒泡、选择、插入、归并、快排、桶排. 是如何实现的？"></a>某个排序算法（冒泡、选择、插入、归并、快排、桶排. 是如何实现的？</h2><h2 id="栈是一种怎么样的数据结构？符合什么原则？在什么应用场景下会使用到栈？"><a href="#栈是一种怎么样的数据结构？符合什么原则？在什么应用场景下会使用到栈？" class="headerlink" title="栈是一种怎么样的数据结构？符合什么原则？在什么应用场景下会使用到栈？"></a>栈是一种怎么样的数据结构？符合什么原则？在什么应用场景下会使用到栈？</h2><h2 id="队列是一种怎么样的数据结构？符合什么原则？在什么应用场景下会使用到队列？"><a href="#队列是一种怎么样的数据结构？符合什么原则？在什么应用场景下会使用到队列？" class="headerlink" title="队列是一种怎么样的数据结构？符合什么原则？在什么应用场景下会使用到队列？"></a>队列是一种怎么样的数据结构？符合什么原则？在什么应用场景下会使用到队列？</h2><h2 id="哈希表的搜索时间复杂度是多少？"><a href="#哈希表的搜索时间复杂度是多少？" class="headerlink" title="哈希表的搜索时间复杂度是多少？"></a>哈希表的搜索时间复杂度是多少？</h2><h2 id="哈希表的底层原理是怎么实现的？"><a href="#哈希表的底层原理是怎么实现的？" class="headerlink" title="哈希表的底层原理是怎么实现的？"></a>哈希表的底层原理是怎么实现的？</h2><h2 id="二叉树的前序、中序、后序遍历是如何进行的？"><a href="#二叉树的前序、中序、后序遍历是如何进行的？" class="headerlink" title="二叉树的前序、中序、后序遍历是如何进行的？"></a>二叉树的前序、中序、后序遍历是如何进行的？</h2><h2 id="能否使用递归-和非递归两种不同的方法来实现二叉树的三种DFS遍历？"><a href="#能否使用递归-和非递归两种不同的方法来实现二叉树的三种DFS遍历？" class="headerlink" title="能否使用递归****和非递归两种不同的方法来实现二叉树的三种DFS遍历？"></a>能否使用递归****和非递归两种不同的方法来实现二叉树的三种DFS遍历？</h2><h2 id="给定一棵二叉树的前序遍历结果和中序遍历结果，如何复原这棵二叉树？"><a href="#给定一棵二叉树的前序遍历结果和中序遍历结果，如何复原这棵二叉树？" class="headerlink" title="给定一棵二叉树的前序遍历结果和中序遍历结果，如何复原这棵二叉树？"></a>给定一棵二叉树的前序遍历结果和中序遍历结果，如何复原这棵二叉树？</h2><h2 id="给定一棵二叉树的后序遍历结果和中序遍历结果，如何复原这棵二叉树？"><a href="#给定一棵二叉树的后序遍历结果和中序遍历结果，如何复原这棵二叉树？" class="headerlink" title="给定一棵二叉树的后序遍历结果和中序遍历结果，如何复原这棵二叉树？"></a>给定一棵二叉树的后序遍历结果和中序遍历结果，如何复原这棵二叉树？</h2><h2 id="二叉树的层序遍历是如何进行的？"><a href="#二叉树的层序遍历是如何进行的？" class="headerlink" title="二叉树的层序遍历是如何进行的？"></a>二叉树的层序遍历是如何进行的？</h2><h2 id="二叉搜索树是什么？"><a href="#二叉搜索树是什么？" class="headerlink" title="二叉搜索树是什么？"></a>二叉搜索树是什么？</h2><h2 id="堆是一种怎么样的数据结构？在什么应用场景下会使用到堆？"><a href="#堆是一种怎么样的数据结构？在什么应用场景下会使用到堆？" class="headerlink" title="堆是一种怎么样的数据结构？在什么应用场景下会使用到堆？"></a>堆是一种怎么样的数据结构？在什么应用场景下会使用到堆？</h2><h2 id="堆的底层原理是怎么实现的？"><a href="#堆的底层原理是怎么实现的？" class="headerlink" title="堆的底层原理是怎么实现的？"></a>堆的底层原理是怎么实现的？</h2><h2 id="最小生成树算法是什么？"><a href="#最小生成树算法是什么？" class="headerlink" title="最小生成树算法是什么？"></a>最小生成树算法是什么？</h2><h2 id="有向图和向图的区别与联系？"><a href="#有向图和向图的区别与联系？" class="headerlink" title="有向图和向图的区别与联系？"></a>有向图和向图的区别与联系？</h2><h2 id="表示图的方式有哪些？邻接表、邻接矩阵、关联矩阵的区别与联系？"><a href="#表示图的方式有哪些？邻接表、邻接矩阵、关联矩阵的区别与联系？" class="headerlink" title="表示图的方式有哪些？邻接表、邻接矩阵、关联矩阵的区别与联系？"></a>表示图的方式有哪些？邻接表、邻接矩阵、关联矩阵的区别与联系？</h2><h2 id="DFS和BFS的区别与联系？"><a href="#DFS和BFS的区别与联系？" class="headerlink" title="DFS和BFS的区别与联系？"></a>DFS和BFS的区别与联系？</h2><h2 id="DFS与栈的关系是什么？"><a href="#DFS与栈的关系是什么？" class="headerlink" title="DFS与栈的关系是什么？"></a>DFS与栈的关系是什么？</h2><h2 id="BF与队列的关系是什么？"><a href="#BF与队列的关系是什么？" class="headerlink" title="BF与队列的关系是什么？"></a>BF与队列的关系是什么？</h2><h2 id="回溯与递归的区别与联系？"><a href="#回溯与递归的区别与联系？" class="headerlink" title="回溯与递归的区别与联系？"></a>回溯与递归的区别与联系？</h2><h2 id="动态规划与递归的联系？"><a href="#动态规划与递归的联系？" class="headerlink" title="动态规划与递归的联系？"></a>动态规划与递归的联系？</h2><h2 id="请设计一个-增删改查的时间复杂度均为O-1-的数据结构"><a href="#请设计一个-增删改查的时间复杂度均为O-1-的数据结构" class="headerlink" title="请设计一个 增删改查的时间复杂度均为O(1) 的数据结构"></a>请设计一个 增删改查的时间复杂度均为O(1) 的数据结构</h2>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>db_interview_question</title>
      <link href="2023/10/04/interview-questions-2023-10-04-db-interview-question/"/>
      <url>2023/10/04/interview-questions-2023-10-04-db-interview-question/</url>
      
        <content type="html"><![CDATA[<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="索引的几种类型或分类"><a href="#索引的几种类型或分类" class="headerlink" title="索引的几种类型或分类"></a>索引的几种类型或分类</h3><ul><li>从物理结构上可以分为聚集索引和非聚集索引两类：</li></ul><p><strong>聚簇索引</strong>指索引的键值的逻辑顺序与表中相应行的物理顺序一致，即每张表只能有一个聚簇索引，也就是我们常说的主键索引；</p><p><strong>非聚簇索引</strong>的逻辑顺序则与数据行的物理顺序不一致。</p><ul><li>从应用上可以划分为一下几类：</li></ul><p><strong>普通索引</strong>：MySQL 中的基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值，纯粹为了提高查询效率。通过 ALTER TABLE table_name ADD INDEX index_name (column) 创建；</p><p><strong>唯一索引</strong>：索引列中的值必须是唯一的，但是允许为空值。通过 ALTER TABLE table_name ADD UNIQUE index_name (column) 创建；</p><p><strong>主键索引</strong>：特殊的唯一索引，也成聚簇索引，不允许有空值，并由数据库帮我们自动创建；</p><p><strong>组合索引</strong>：组合表中多个字段创建的索引，遵守最左前缀匹配规则；</p><p><strong>全文索引</strong>：只有在 MyISAM 引擎上才能使用，同时只支持 CHAR、VARCHAR、TEXT 类型字段上使用。</p><h3 id="索引的优缺点"><a href="#索引的优缺点" class="headerlink" title="索引的优缺点"></a>索引的优缺点</h3><ul><li>优点</li></ul><p>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</p><p>可以大大加快数据的检索速度，这也是创建索引的最主要的原因。</p><p>可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。</p><p>在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。</p><p>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</p><ul><li>缺点</li></ul><p>创建和维护索引需要耗费时间，这种时间随着数据量的增加而增加，这样就降低了数据的维护速度。</p><p>索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间。如果要建立聚簇索引，那么需要的空间就会更大。</p><h3 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h3><ul><li><p>选择唯一性索引；<br>  唯一性索引的值是唯一的，可以更快速的通过该索引来确定某条记录。</p></li><li><p>为常作为查询条件的字段建立索引；<br>  如果某个字段经常用来做查询条件，那么该字段的查询速度会影响整个表的查询速度。因此，为这样的字段建立索引，可以提高整个表的查询速度。</p></li><li><p>为经常需要排序、分组和联合操作的字段建立索引；<br>  经常需要 ORDER BY、GROUP BY、DISTINCT 和 UNION 等操作的字段，排序操作会浪费很多时间。如果为其建立索引，可以有效地避免排序操作。</p></li><li><p>限制索引的数目；<br>  每个索引都需要占⽤用磁盘空间，索引越多，需要的磁盘空间就越大，修改表时，对索引的重构和更新很麻烦。</p></li><li><p>小表不建议索引（如数量级在百万以内）；<br>  由于数据较小，查询花费的时间可能比遍历索引的时间还要短，索引可能不会产生优化效果。</p></li><li><p>尽量使用数据量少的索引；<br>  如果索引的值很长，那么查询的速度会受到影响。此时尽量使用前缀索引。</p></li><li><p>删除不再使用或者很少使用的索引。</p></li></ul><h3 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h3><p>索引的数据结构和具体存储引擎的实现有关，MySQL 中常用的是 Hash 和 B+ 树索引。</p><ul><li><p>Hash 索引底层就是 Hash 表，进行查询时调用 Hash 函数获取到相应的键值（对应地址），然后回表查询获得实际数据.</p></li><li><p>B+ 树索引底层实现原理是多路平衡查找树，对于每一次的查询都是从根节点出发，查询到叶子节点方可以获得所查键值，最后查询判断是否需要回表查询.</p></li></ul><h3 id="Hash和B-数索引的区别"><a href="#Hash和B-数索引的区别" class="headerlink" title="Hash和B+数索引的区别"></a>Hash和B+数索引的区别</h3><p>Hash</p><ol><li><p>Hash 进行等值查询更快，但无法进行范围查询。因为经过 Hash 函数建立索引之后，索引的顺序与原顺序无法保持一致，故不能支持范围查询。同理，也不支持使用索引进行排序。</p></li><li><p>Hash 不支持模糊查询以及多列索引的最左前缀匹配,因为 Hash 函数的值不可预测，如 AA 和 AB 的算出的值没有相关性。</p></li><li><p>Hash 任何时候都避免不了回表查询数据.</p></li><li><p>虽然在等值上查询效率高，但性能不稳定，因为当某个键值存在大量重复时，产生 Hash 碰撞，此时查询效率反而可能降低。</p></li></ol><p>B+树</p><ol><li><p>B+ 树本质是一棵查找树，自然支持范围查询和排序。</p></li><li><p>在符合某些条件（聚簇索引、覆盖索引等）时候可以只通过索引完成查询，不需要回表。</p></li><li><p>查询效率比较稳定，因为每次查询都是从根节点到叶子节点，且为树的高度。</p></li></ol><h3 id="为何使用B-树而不是二叉搜索树做索引"><a href="#为何使用B-树而不是二叉搜索树做索引" class="headerlink" title="为何使用B+树而不是二叉搜索树做索引?"></a>为何使用B+树而不是二叉搜索树做索引?</h3><p>我们知道二叉树的查找效率为 O(logn)，当树过高时，查找效率会下降。另外由于我们的索引文件并不小，所以是存储在磁盘上的。</p><p>文件系统需要从磁盘读取数据时，一般以页为单位进行读取，假设一个页内的数据过少，那么操作系统就需要读取更多的页，涉及磁盘随机 I/O 访问的次数就更多。将数据从磁盘读入内存涉及随机 I/O 的访问，是数据库里面成本最高的操作之一。</p><p>因而这种树高会随数据量增多急剧增加，每次更新数据又需要通过左旋和右旋维护平衡的二叉树，不太适合用于存储在磁盘上的索引文件。</p><h3 id="为何使用-B-树而非-B-树做索引？"><a href="#为何使用-B-树而非-B-树做索引？" class="headerlink" title="为何使用 B+ 树而非 B 树做索引？"></a>为何使用 B+ 树而非 B 树做索引？</h3><p>B+ 树和 B 树的区别：</p><ul><li><p>B 树非叶子结点和叶子结点都存储数据，因此查询数据时，时间复杂度最好为 O(1)，最坏为 O(log n)。而 B+ 树只在叶子结点存储数据，非叶子结点存储关键字，且不同非叶子结点的关键字可能重复，因此查询数据时，时间复杂度固定为 O(log n)。</p></li><li><p>B+ 树叶子结点之间用链表相互连接，因而只需扫描叶子结点的链表就可以完成一次遍历操作，B 树只能通过中序遍历。</p></li></ul><h3 id="为什么-B-树比-B-树更适合应用于数据库索引？"><a href="#为什么-B-树比-B-树更适合应用于数据库索引？" class="headerlink" title="为什么 B+ 树比 B 树更适合应用于数据库索引？"></a>为什么 B+ 树比 B 树更适合应用于数据库索引？</h3><ul><li><p>B+ 树减少了 IO 次数。</p><p>  由于索引文件很大因此索引文件存储在磁盘上，B+ 树的非叶子结点只存关键字不存数据，因而单个页可以存储更多的关键字，即一次性读入内存的需要查找的关键字也就越多，磁盘的随机 I/O 读取次数相对就减少了。</p></li><li><p>B+ 树查询效率更稳定.</p><p>  由于数据只存在在叶子结点上，所以查找效率固定为 O(log n)，所以 B+ 树的查询效率相比B树更加稳定。</p></li><li><p>B+ 树更加适合范围查找</p><p>  B+ 树叶子结点之间用链表有序连接，所以扫描全部数据只需扫描一遍叶子结点，利于扫库和范围查询；B 树由于非叶子结点也存数据，所以只能通过中序遍历按序来扫。也就是说，对于范围查询和有序遍历而言，B+ 树的效率更高。</p></li></ul><h3 id="什么是最左匹配原则？"><a href="#什么是最左匹配原则？" class="headerlink" title="什么是最左匹配原则？"></a>什么是最左匹配原则？</h3><p>最左优先，以最左边为起点任何连续的索引都能匹配上。同时遇到范围查询（&gt;、&lt;、between、like）就会停止匹配。</p><p>如建立 (a,b,c,d) 索引，查询条件 b = 2 是匹配不到索引的，但是如果查询条件是 a = 1 and b = 2 或 a=1 又或 b = 2 and a = 1 就可以，因为优化器会自动调整 a,b 的顺序。</p><p>再比如 a = 1 and b = 2 and c &gt; 3 and d = 4，其中 d 是用不到索引的，因为 c 是一个范围查询，它之后的字段会停止匹配</p><p>最左匹配原则遇上范围查询就会停止，剩下的字段都无法使用索引。</p><h3 id="什么是覆盖索引"><a href="#什么是覆盖索引" class="headerlink" title="什么是覆盖索引"></a>什么是覆盖索引</h3><p>在 B+ 树的索引中，叶子节点可能存储了当前的键值，也可能存储了当前的键值以及整行的数据，这就是聚簇索引和非聚簇索引。 在 InnoDB 中，只有主键索引是聚簇索引，如果没有主键，则挑选一个唯一键建立聚簇索引。如果没有唯一键，则隐式的生成一个键来建立聚簇索引。</p><p>当查询使用聚簇索引时，在对应的叶子节点，可以获取到整行数据，因此不用再次进行回表查询。</p><h3 id="什么是索引下推？"><a href="#什么是索引下推？" class="headerlink" title="什么是索引下推？"></a>什么是索引下推？</h3><p>索引下推（Index condition pushdown） 简称 ICP，在 Mysql 5.6 版本上推出的一项用于优化查询的技术。</p><p>在不使用索引下推的情况下，在使用非主键索引进行查询时，存储引擎通过索引检索到数据，然后返回给 MySQL 服务器，服务器判断数据是否符合条件。</p><p>而有了索引下推之后，如果存在某些被索引列的判断条件时，MySQL 服务器将这一部分判断条件传递给存储引擎，然后由存储引擎通过判断索引是否符合 MySQL 服务器传递的条件，只有当索引符合条件时才会将数据检索出来返回给 MySQL 服务器。</p><p>索引条件下推优化可以减少存储引擎查询基础表的次数，也可以减少 MySQL 服务器从存储引擎接收数据的次数。</p><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><h3 id="MyISAM-和-InnoDB-的区别？"><a href="#MyISAM-和-InnoDB-的区别？" class="headerlink" title="MyISAM 和 InnoDB 的区别？"></a>MyISAM 和 InnoDB 的区别？</h3><ol><li><p>InnoDB 支持事务，而 MyISAM 不支持。</p></li><li><p>InnoDB 支持外键，而 MyISAM 不支持。因此将一个含有外键的 InnoDB 表 转为 MyISAM 表会失败。</p></li><li><p>InnoDB 和 MyISAM 均支持 B+ Tree 数据结构的索引。但 InnoDB 是聚集索引，而 MyISAM 是非聚集索引。</p></li><li><p>InnoDB 不保存表中数据行数，执行 select count(*) from table 时需要全表扫描。而 MyISAM 用一个变量记录了整个表的行数，速度相当快（注意不能有 WHERE 子句）。</p></li><li><p>InnoDB 支持表、行（默认）级锁，而 MyISAM 支持表级锁。</p><p> InnoDB 的行锁是基于索引实现的，而不是物理行记录上。即访问如果没有命中索引，则也无法使用行锁，将要退化为表锁。</p></li><li><p>InnoDB 必须有唯一索引（如主键），如果没有指定，就会自动寻找或生产一个隐藏列 Row_id 来充当默认主键，而 Myisam 可以没有主键。</p></li></ol><h3 id="InnoDB-的四大特性"><a href="#InnoDB-的四大特性" class="headerlink" title="InnoDB 的四大特性?"></a>InnoDB 的四大特性?</h3><ul><li>插入缓冲(insert buffer)</li><li>二次写(double write)</li><li>自适应哈希索引(ahi)</li><li>预读(read ahead)</li></ul><h3 id="InnoDB-为何推荐使用自增主键？"><a href="#InnoDB-为何推荐使用自增主键？" class="headerlink" title="InnoDB 为何推荐使用自增主键？"></a>InnoDB 为何推荐使用自增主键？</h3><p>自增 ID 可以保证每次插入时 B+ 树索引是从右边扩展的，因此相比自定义 ID （如 UUID）可以避免 B+ 树的频繁合并和分裂。如果使用字符串主键和随机主键，会使得数据随机插入，效率比较差。</p><h3 id="如何选择存储引擎？"><a href="#如何选择存储引擎？" class="headerlink" title="如何选择存储引擎？"></a>如何选择存储引擎？</h3><p>默认使用 InnoDB，MyISAM 适用以插入为主的程序，比如博客系统、新闻门户。</p><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><p>什么是 InnoDB 的页、区、段？</p><ul><li>页（Page）</li></ul><p>首先，InnoDB 将物理磁盘划分为页（page），每页的大小默认为 16 KB，页是最小的存储单位。页根据上层应用的需要，如索引、日志等，分为很多的格式。我们主要说数据页，也就是存储实际数据的页。</p><ul><li>区（Extent）</li></ul><p>如果只有页这一个层次的话，页的个数是非常多的，存储空间的分配和回收都会很麻烦，因为要维护这么多的页的状态是非常麻烦的。</p><p>所以，InnoDB 又引入了区(Extent)的概念。一个区默认是 64 个连续的页组成的，也就是 1MB。通过 Extent 对存储空间的分配和回收就比较容易了。</p><ul><li>段（Segment）</li></ul><p>为什么要引入段呢，这要从索引说起。我们都知道索引的目的是为了加快查找速度，是一种典型的用空间换时间的方法。</p><p>B+ 树的叶子节点存放的是我们的具体数据，非叶子结点是索引页。所以 B+ 树将数据分为了两部分，叶子节点部分和非叶子节点部分，也就我们要介绍的段 Segment，也就是说 InnoBD 中每一个索引都会创建两个 Segment 来存放对应的两部分数据。</p><p>Segment 是一种逻辑上的组织，其层次结构从上到下一次为 Segment、Extent、Page。</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>数据库的事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行的结果必须使数据库从一种一致性状态变到另一种一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。</p><h3 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h3><p>也就是ACID</p><ol><li>原子性： 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li><li>一致性： 执行事务前后，数据保持一致；</li><li>隔离性： 并发访问数据库时，一个用户的事物不被其他事物所干扰，各并发事务之间数据库是独立的；</li><li>持久性: 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li></ol><h3 id="并发事务会有哪些问题"><a href="#并发事务会有哪些问题" class="headerlink" title="并发事务会有哪些问题"></a>并发事务会有哪些问题</h3><ul><li><p>脏读（Dirty read）: 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</p><p>  事务级别:读未提交</p><table><thead><tr><th>连接1</th><th>连接2</th></tr></thead><tbody><tr><td>开启事务</td><td></td></tr><tr><td>读数据</td><td></td></tr><tr><td></td><td>开启事务</td></tr><tr><td></td><td>修改数据,当未提交</td></tr><tr><td>读数据,发现数据已被修改</td><td></td></tr><tr><td></td><td>事务回滚</td></tr><tr><td>第二次读取到了脏数据</td><td></td></tr></tbody></table></li><li><p>丢失修改（Lost to modify）: 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。</p></li><li><p>不可重复读（Unrepeatableread）: 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</p></li><li><p>幻读（Phantom read）: 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p></li></ul><p>不可重复度和幻读区别：</p><p>不可重复读的重点是修改，幻读的重点在于新增或者删除。</p><p>例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为 1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导 致A再读自己的工资时工资变为 2000；这就是不可重复读。</p><p>例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2 又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读。</p><h2 id="说说数据库的事务隔离级别"><a href="#说说数据库的事务隔离级别" class="headerlink" title="说说数据库的事务隔离级别"></a>说说数据库的事务隔离级别</h2><p>数据库事务的隔离级别有4种，由低到高分别为<code>Read Uncommited</code>. <code>Read Commited</code>. <code>Repeatable Read</code>. <code>Serializable</code>。</p><p>并发数据访问时可能会出现以下问题，3类数据读取问题（脏读. 不可重复读. 幻读）和2类数据更新问题（第1类丢失更新和第2类丢失更新）。</p><p><code>Read Uncommited</code>，读未提交，即一个事务可以读取另一个未提交事务的数据；并发操作会导致脏读.<br><code>Read Commited</code>，读操作，即一个事务要等到另一个事务提交后才能读取数据；解决脏读问题；并发操作会导致不可重复读.<br><code>Repeatable Read</code>，重复读，即开始读取数据（事务开启）时，不再允许修改操作；解决不可重复读问题；并发操作会导致幻读（对应insert操作）.<br><code>Serializable</code>，序列化，最高的事务隔离级别，该级别下，事务串行化顺序执行；避免脏读. 不可重复读与幻读；但是该级别效率低下，比较消耗数据库性能，一般不用。</p><p><code>MySQL</code> 的默认隔离级别为：可重复读。<br><code>Oracle</code>. <code>PostgreSQL</code>. <code>MSSQL</code> 的默认隔离级别为：读已提交</p><p>✔️代表该隔离级别已解决该并发问题<br>❌代表该隔离级别未解决该并发问题</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>更新丢失</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>读已提交</td><td>✔️</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>可重复读</td><td>✔️</td><td>✔️</td><td>✔️</td><td>❌</td></tr><tr><td>序列化</td><td>✔️</td><td>✔️</td><td>✔️</td><td>✔️</td></tr></tbody></table><h2 id="说说看悲观锁和乐观锁"><a href="#说说看悲观锁和乐观锁" class="headerlink" title="说说看悲观锁和乐观锁"></a>说说看悲观锁和乐观锁</h2><h2 id="悲观锁和乐观锁的优先使用哪个-使用的场景"><a href="#悲观锁和乐观锁的优先使用哪个-使用的场景" class="headerlink" title="悲观锁和乐观锁的优先使用哪个, 使用的场景"></a>悲观锁和乐观锁的优先使用哪个, 使用的场景</h2><h2 id="谈谈怎么优化sql"><a href="#谈谈怎么优化sql" class="headerlink" title="谈谈怎么优化sql"></a>谈谈怎么优化sql</h2><p>加索引<br>避免返回不必要的数据<br>适当分批量进行<br>优化sql结构<br>主从架构，提升读性能<br>分库分表</p><h2 id="在使用MySQL时，你是如何优化SQL查询性能的？"><a href="#在使用MySQL时，你是如何优化SQL查询性能的？" class="headerlink" title="在使用MySQL时，你是如何优化SQL查询性能的？"></a>在使用MySQL时，你是如何优化SQL查询性能的？</h2><ol><li><p>选择合适的数据类型：使用最小的数据类型可以节省存储空间，也有利于缓存。例如，使用 TINYINT(1) 而不是 INT 存储布尔类型。</p></li><li><p>编写简洁高效的 SQL 语句：使用 WHERE 子句过滤不需要的行，只返回所需的结果集，并尽量避免使用子查询和 JOIN 连接等操作。避免在查询中使用“SELECT *”，而只查询所需的列。</p></li><li><p>添加索引：索引可以加快查询速度。要考虑添加到 WHERE 子句. ORDER BY 和 GROUP BY 子句中的列上。但同时，注意不要过度索引，因为索引的更新和维护也需要时间和系统资源。</p></li><li><p>避免全表扫描：尽可能地使用索引，避免进行全表扫描。对于大型表或者需要对多个列进行排序或分组的查询，可以考虑采用分区技术，将表拆分成多个较小的逻辑部分，以提高查询性能。</p></li><li><p>使用 EXPLAIN 分析查询计划：EXPLAIN 可以帮助分析查询计划，找出查询过程中可能出现的性能瓶颈，例如全表扫描. 临时表等问题。</p></li><li><p>定期优化和维护数据库：定期清理无用数据. 重建索引等操作可以帮助提高数据库性能和稳定性。</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/adminpd/article/details/122910606">MySQL数据库面试题总结（2022最新版）</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> db </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>efcore_interview_question</title>
      <link href="2023/10/04/interview-questions-2023-10-04-efcore-interview-question/"/>
      <url>2023/10/04/interview-questions-2023-10-04-efcore-interview-question/</url>
      
        <content type="html"><![CDATA[<h2 id="大概说下各个版本更新了什么"><a href="#大概说下各个版本更新了什么" class="headerlink" title="大概说下各个版本更新了什么"></a>大概说下各个版本更新了什么</h2><ul><li>EF Core7 批量更新和删除</li></ul><h2 id="追踪和不追踪的区别-什么时候使用"><a href="#追踪和不追踪的区别-什么时候使用" class="headerlink" title="追踪和不追踪的区别, 什么时候使用"></a>追踪和不追踪的区别, 什么时候使用</h2><h2 id="Ef如果同时执行删除和批量删除-会执行哪条语句"><a href="#Ef如果同时执行删除和批量删除-会执行哪条语句" class="headerlink" title="Ef如果同时执行删除和批量删除, 会执行哪条语句"></a>Ef如果同时执行删除和批量删除, 会执行哪条语句</h2><h2 id="ef的事务级别"><a href="#ef的事务级别" class="headerlink" title="ef的事务级别"></a>ef的事务级别</h2><h2 id="ef的全局过滤器"><a href="#ef的全局过滤器" class="headerlink" title="ef的全局过滤器"></a>ef的全局过滤器</h2><h2 id="网上看来的面试题"><a href="#网上看来的面试题" class="headerlink" title="网上看来的面试题"></a>网上看来的面试题</h2><ol><li><p>什么是Entity Framework？</p><p> 答：Entity Framework是微软提供的一个开源对象关系映射(ORM)框架，它允许开发人员使用面向对象的方式操作数据库，而不需要编写SQL语句。</p></li><li><p>请解释EF的主要组件和工作原理。</p><p> 答：EF的主要组件包括模型(Model)、数据访问层(Data Access Layer)和数据库。EF的工作原理是通过将数据库中的表映射成实体(Entity)类，然后通过LINQ查询和操作这些实体类来实现与数据库的交互。</p></li><li><p>请谈谈Code First和Database First两种开发方式的区别及优缺点。</p><p> 答：Code First是指通过定义实体类来创建数据库结构，优点是开发人员可以更加关注领域模型而不需要关心数据库细节，缺点是对于已有数据库不太友好。Database First是指通过已有数据库生成实体类，优点是适用于已有数据库，缺点是实体类可能不够自定义。</p></li><li><p>如何处理EF中的延迟加载和显式加载？</p><p> 答：EF默认使用延迟加载来加载关联实体，但可以使用Include()方法来显式加载关联实体。另外，还可以使用Load()方法来显式加载实体。</p></li><li><p>如何优化EF的性能？</p><p> 答：优化EF的性能可以考虑使用合适的数据访问模式，避免过度查询，<br> 使用AsNoTracking()方法来取消跟踪查询结果，<br> 使用Select()方法来只选择需要的字段，避免不必要的加载和查询。</p></li><li><p>请解释EF中的数据迁移（Migration）是什么？如何使用数据迁移？</p><p> 答：数据迁移是一种管理数据库模式更改的机制，可以保持数据库结构与代码模型的同步。可以使用EF的数据迁移命令来创建和应用迁移。</p><p> <code>dotnet ef migrations add InitialCreate</code><br> <code>dotnet ef database update</code></p></li><li><p>在EF中如何处理并发冲突？</p><p> 可以使用EF的乐观并发控制机制来处理并发冲突。通过在实体类中添加一个时间戳（Timestamp）属性或一个版本号（RowVersion）属性，并在保存更改时检查这些属性，可以避免潜在的并发问题。</p></li><li><p>什么是EF中的延迟加载（Lazy Loading）？</p><p> EF中的延迟加载是指在访问导航属性时，EF会自动执行另一个查询来加载关联实体。这样可以避免在查询主实体时加载所有关联实体，从而提高查询性能。</p></li><li><p>什么是EF中的预编译查询（Compiled Query）？</p><p> 预编译查询是一种优化查询性能的技术，可以将查询编译成LINQ表达式并缓存起来，以便多次重复使用。这样可以减少查询执行的开销，提高性能。<br> `public static Func&lt;MyDbContext, int, User&gt; GetUserById =<br> EF.CompileQuery((MyDbContext context, int id) =&gt;</p><pre><code> context.Users.FirstOrDefault(u =&gt; u.Id == id));`</code></pre></li><li><p>在EF中如何配置继承关系（Table Per Hierarchy）？<br>可以使用<code>Table Per Hierarchy（TPH）</code>策略来配置继承关系，将所有派生类映射到一个表中，并使用一个<code>Discriminator</code>列来区分不同的子类。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    publicint Id <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    publicstring Name <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">:</span> Animal<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    publicstring Breed <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">:</span> Animal<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    publicint Lives <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 配置继承关系</span><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span>ModelBuilder modelBuilder<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    modelBuilder<span class="token punctuation">.</span><span class="token generic-method function">Entity<span class="token punctuation">&lt;</span>Animal<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token generic-method function">HasDiscriminator<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"AnimalType"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token generic-method function">HasValue<span class="token punctuation">&lt;</span>Dog<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"Dog"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token generic-method function">HasValue<span class="token punctuation">&lt;</span>Cat<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"Cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>如何在EF中配置多对多（Many-to-Many）关系？</p><p>在EF中配置多对多关系需要创建一个中间实体，将多对多关系转化为两个一对多关系。</p><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    publicint Id <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    publicstring Name <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ICollection<span class="token operator">&lt;</span>CourseStudent<span class="token operator">></span> Courses <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Course</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    publicint Id <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    publicstring Name <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ICollection<span class="token operator">&lt;</span>CourseStudent<span class="token operator">></span> Students <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CourseStudent</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    publicint StudentId <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Student Student <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    publicint CourseId <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Course Course <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 配置多对多关系</span><span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnModelCreating</span><span class="token punctuation">(</span>ModelBuilder modelBuilder<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    modelBuilder<span class="token punctuation">.</span><span class="token generic-method function">Entity<span class="token punctuation">&lt;</span>CourseStudent<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">HasKey</span><span class="token punctuation">(</span>cs <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> cs<span class="token punctuation">.</span>StudentId<span class="token punctuation">,</span> cs<span class="token punctuation">.</span>CourseId <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    modelBuilder<span class="token punctuation">.</span><span class="token generic-method function">Entity<span class="token punctuation">&lt;</span>CourseStudent<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">HasOne</span><span class="token punctuation">(</span>cs <span class="token operator">=</span><span class="token operator">></span> cs<span class="token punctuation">.</span>Student<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">WithMany</span><span class="token punctuation">(</span>s <span class="token operator">=</span><span class="token operator">></span> s<span class="token punctuation">.</span>Courses<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">HasForeignKey</span><span class="token punctuation">(</span>cs <span class="token operator">=</span><span class="token operator">></span> cs<span class="token punctuation">.</span>StudentId<span class="token punctuation">)</span><span class="token punctuation">;</span>    modelBuilder<span class="token punctuation">.</span><span class="token generic-method function">Entity<span class="token punctuation">&lt;</span>CourseStudent<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">HasOne</span><span class="token punctuation">(</span>cs <span class="token operator">=</span><span class="token operator">></span> cs<span class="token punctuation">.</span>Course<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">WithMany</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Students<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">HasForeignKey</span><span class="token punctuation">(</span>cs <span class="token operator">=</span><span class="token operator">></span> cs<span class="token punctuation">.</span>CourseId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>什么是EF中的N+1查询问题？如何解决N+1查询问题？</p><p>N+1查询问题是指在查询包含导航属性的实体时，EF会执行额外的N条SQL查询来加载导航属性的数据，导致性能问题。为了解决N+1查询问题，可以使用Eager Loading（贪婪加载）或显式加载导航属性的方法来减少查询次数。</p></li><li><p>在EF中，什么是导航属性（Navigation Property）？它们有什么作用？</p><p>导航属性是指在实体类中定义的用于表示实体之间关系的属性。导航属性可以用于查询关联的数据和构建复杂的查询。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> efcore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aspnetcore_interview_question</title>
      <link href="2023/10/04/interview-questions-2023-10-04-aspnetcore-interview-question/"/>
      <url>2023/10/04/interview-questions-2023-10-04-aspnetcore-interview-question/</url>
      
        <content type="html"><![CDATA[<h2 id="请简述-NET-Core中的中间件（Middleware）的作用及其使用方法"><a href="#请简述-NET-Core中的中间件（Middleware）的作用及其使用方法" class="headerlink" title="请简述.NET Core中的中间件（Middleware）的作用及其使用方法"></a>请简述.NET Core中的中间件（Middleware）的作用及其使用方法</h2><p>中间件（Middleware）是.NET Core中的一种特殊组件，它可以处理HTTP请求和响应，并把请求传递到下一个中间件或终止请求。中间件在ASP.NET应用程序中扮演着非常重要的角色，能够为应用程序提供丰富的功能和服务，例如路由、认证、授权、缓存、日志、异常处理等。</p><p>使用中间件在.NET Core应用程序中添加组件或服务非常简单。ASP.NET Core加载中间件的顺序与它们添加到中间件管道的顺序相同，因此可以按照需要添加中间件并调整它们的顺序。</p><h3 id="说说看依赖注入是什么"><a href="#说说看依赖注入是什么" class="headerlink" title="说说看依赖注入是什么"></a>说说看依赖注入是什么</h3><p>依赖注入是一种消除类之间依赖关系的设计模式。</p><h3 id="为什么要使用依赖注入"><a href="#为什么要使用依赖注入" class="headerlink" title="为什么要使用依赖注入"></a>为什么要使用依赖注入</h3><ul><li>传统的代码，每个对象负责管理与自己需要依赖的对象，导致如果需要切换依赖对象的实现类时，需要修改多处地方。同时，过度耦合也使得对象难以进行单元测试。</li><li>依赖注入把对象的创造交给外部去管理,很好的解决了代码紧耦合（tight couple）的问题，是一种让代码实现松耦合（loose couple）的机制。</li><li>松耦合让代码更具灵活性，能更好地应对需求变动，以及方便单元测试</li></ul><h3 id="依赖注入的生命周期"><a href="#依赖注入的生命周期" class="headerlink" title="依赖注入的生命周期"></a>依赖注入的生命周期</h3><ol><li>Transient（瞬时）：即用即建，用后即弃。就是每次获取这个服务的实例时都要创建一个这个服务的实例。</li><li>Scoped（作用域）：这种类型的服务实例保存在当前依赖注入容器(IServiceProvider)上。在同作用域,服务每个请求只创建一次。</li><li>Singleton（单例）：服务请求时只创建实例化一次，其后相同请求都延用这个服务。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aspnetcore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dotnet_interview_question</title>
      <link href="2023/10/04/interview-questions-2023-10-04-dotnet-interview-question/"/>
      <url>2023/10/04/interview-questions-2023-10-04-dotnet-interview-question/</url>
      
        <content type="html"><![CDATA[<h2 id="请简述-NET-Core与-NET-Framework的区别和优缺点"><a href="#请简述-NET-Core与-NET-Framework的区别和优缺点" class="headerlink" title="请简述.NET Core与.NET Framework的区别和优缺点"></a>请简述.NET Core与.NET Framework的区别和优缺点</h2><p>.NET Core和.NET Framework都是用于构建Windows和Web应用程序的跨平台框架。.NET Core是开源的，跨平台的，它可以在Windows，macOS，Linux等操作系统上运行。而.NET Framework只能运行在Windows系统上。<br>优点：.NET Core具有更小的文件大小、更快的启动时间和更好的性能表现，同时还可以使用新的C#语言功能。</p><h2 id="一些值得一看的面试题"><a href="#一些值得一看的面试题" class="headerlink" title="一些值得一看的面试题"></a>一些值得一看的面试题</h2><p><a href="https://mp.weixin.qq.com/s/ab5n326sWKhFoyiWy0xnPA">GC与内存管理（含深度解析）</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>csharp_interview_question c# 面试题</title>
      <link href="2023/10/04/interview-questions-2023-10-04-csharp-interview-question/"/>
      <url>2023/10/04/interview-questions-2023-10-04-csharp-interview-question/</url>
      
        <content type="html"><![CDATA[<p>csharp<br>dotnet<br>aspnetcore<br>efcore<br>db 数据库<br>design_pattern 设计模式<br>Scene design 场景设计, 遇到这种场景,如何设计程序<br>ddd 领域驱动设计<br>other 其他</p><h2 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h2><h2 id="说说看什么是多态"><a href="#说说看什么是多态" class="headerlink" title="说说看什么是多态"></a>说说看什么是多态</h2><h2 id="子类是否可以代替父类"><a href="#子类是否可以代替父类" class="headerlink" title="子类是否可以代替父类"></a>子类是否可以代替父类</h2><h2 id="反射（Reflection）在-NET中的作用和用途"><a href="#反射（Reflection）在-NET中的作用和用途" class="headerlink" title="反射（Reflection）在.NET中的作用和用途"></a>反射（Reflection）在.NET中的作用和用途</h2><p>反射（Reflection）在.NET中提供了一种动态地获取和操作类型信息的能力。通过反射，我们可以在运行时获取类型的成员（属性、方法、字段等）信息，并进行动态创建对象、调用方法、访问和修改属性等操作。下面是一些常见的使用场景：</p><ol><li>插件和扩展性：通过反射，可以在运行时加载和实例化程序集中的类型，实现插件化和动态扩展的功能。这样，我们可以在不修改代码的情况下，动态地添加新的功能和模块。</li><li>配置和元数据处理：通过反射，可以读取和处理程序集、类型和成员的元数据信息，如属性的注解、方法的参数信息等。这使得我们可以实现基于配置文件的动态配置和元数据驱动的开发。</li><li>反射性能优化：通过反射，可以动态地生成和编译代码，从而提高代码的性能。例如，使用反射 Emit 或 Expression Tree 可以动态生成 IL 代码，实现高性能的动态代理、表达式解析和编译等。</li><li>序列化和反序列化：反射可以在序列化和反序列化过程中使用，通过读取对象的成员信息，将对象转换为字节流或将字节流转换回对象。</li><li>调试和测试：在调试和测试过程中，反射可以帮助我们动态地获取对象的内部状态和调用私有方法，以便进行更详细的分析和测试。</li><li>动态代码生成和动态代理：通过反射，可以在运行时动态生成代码，并创建动态代理对象。这在某些情况下非常有用，如 AOP（面向切面编程）和远程代理等。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 学习笔记</title>
      <link href="2023/03/18/study-notes-mongodb-2023-03-18-mongodb-xue-xi-bi-ji/"/>
      <url>2023/03/18/study-notes-mongodb-2023-03-18-mongodb-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="mongodb-是什么-可以做什么"><a href="#mongodb-是什么-可以做什么" class="headerlink" title="mongodb 是什么,可以做什么"></a>mongodb 是什么,可以做什么</h2><blockquote><p>MongoDB 是一个基于分布式文件存储的数据库<br>由 C++语言编写，旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。<br>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。<br>它支持的数据结构非常松散，是类似 json 的 bson 格式，因此可以存储比较复杂的数据类型。<br>Mongo 最大的特点是它支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关&gt; 系数据库单表查询的绝大部分功能，而且还支持对数据建立索引</p></blockquote><h2 id="业务应用场景"><a href="#业务应用场景" class="headerlink" title="业务应用场景"></a>业务应用场景</h2><blockquote><p>传统的关系型数据库(如 MySQL)，在数据操作的三高需求以及应对 Web2.0 的网站需求面前，显得力不从心，而 MongoDB 可应对“三高“需求</p><p>High performance：对数据库高并发读写的需求</p><p>Huge Storage：对海量数据的高效率存储和访问的需求</p><p>High Scalability &amp;&amp; High Availability：对数据库的高可扩展性和高可用性的需求</p></blockquote><h2 id="和传统数据库的一些对应关系"><a href="#和传统数据库的一些对应关系" class="headerlink" title="和传统数据库的一些对应关系"></a>和传统数据库的一些对应关系</h2><table><thead><tr><th>Sql 术语概念</th><th>MongoDB 术语概念</th><th>解释说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表/集合</td></tr><tr><td>row</td><td>document</td><td>数据记录行/文档</td></tr><tr><td>column</td><td>field</td><td>数据字段/域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr></tbody></table><p>启动命令<code>docker run -itd --name mongo -v /d/DB/MongoDB/data:/data -p 27017:27017 mongo:latest</code></p><p><code>docker run --volume=/d/DB/MongoDB/data:/data -p 27017:27017 -t -d mongo:latest</code></p><p>启动之后我们就可以连接到 Mongodb 了</p><h2 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h2><blockquote><p><code>mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]</code></p></blockquote><ul><li><p><code>mongodb://</code> 这是固定的格式，必须要指定。</p></li><li><p><code>username:password@</code> 可选项，如果设置，在连接数据库服务器之后，驱动都会尝试登录这个数据库</p></li><li><p><code>host1</code> 必须的指定至少一个 host, host1 是这个 URI 唯一要填写的。它指定了要连接服务器的地址。如果要连接复制集，请指定多个主机地址。</p></li><li><p><code>portX</code> 可选的指定端口，如果不填，默认为 27017</p></li><li><p><code>/database</code> 如果指定<code>username:password@</code>，连接并验证登录指定数据库。若不指定，默认打开 test 数据库。</p></li><li><p><code>?options</code> 是连接选项。如果不使用 <code>/database</code>，则前面需要加上/。所有连接选项都是键值对 name=value，键值对之间通过&amp;或;（分号）隔开</p></li></ul><h2 id="Crud-操作"><a href="#Crud-操作" class="headerlink" title="Crud 操作"></a>Crud 操作</h2><h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><p><code>db.createCollection(name, options)</code></p><p>注意这里不会立即创建, 而是要插入一条文档之后才会真正的创建</p><h3 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h3><p><code>db.collection.drop()</code></p><hr><blockquote><p>所有存储在集合中的数据都是 <code>BSON</code> 格式。</p><p><code>BSON</code> 是一种类似 <code>JSON</code> 的二进制形式的存储格式，是 <code>Binary JSON</code> 的简称。</p></blockquote><h3 id="create"><a href="#create" class="headerlink" title="create"></a>create</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 这样就直接创建了一个集合, 并添加了一个文档到集合中</span><span class="token number">db</span><span class="token punctuation">.</span>unicorns<span class="token punctuation">.</span><span class="token keyword">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;name: 'Aurora', gender: 'f', weight: 450&amp;#125;)</span><span class="token comment" spellcheck="true">-- 要插入单个文档，请使用</span><span class="token number">db</span><span class="token punctuation">.</span>collection<span class="token punctuation">.</span>insertOne<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">-- 要插入多个文档，请使用</span><span class="token number">db</span><span class="token punctuation">.</span>collection<span class="token punctuation">.</span>insertMany<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span></code></pre><h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- $lt、$lte、$gt、$gte以及$ne分别表示小于、小于或等于、大于、大于或等于以及不等于</span><span class="token number">db</span><span class="token punctuation">.</span>unicorns<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;gender: 'm', weight: &amp;#123;$gt: 700&amp;#125;&amp;#125;)</span><span class="token comment" spellcheck="true">-- 或者 (效果并不完全一样，仅用来为了演示不同的方法)</span><span class="token number">db</span><span class="token punctuation">.</span>unicorns<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;gender: &amp;#123;$ne: 'f'&amp;#125;, weight: &amp;#123;$gte: 701&amp;#125;&amp;#125;)</span><span class="token comment" spellcheck="true">-- $exists操作符用于匹配一个域是否存在，比如下面的命令：</span><span class="token number">db</span><span class="token punctuation">.</span>unicorns<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;vampires: &amp;#123;$exists: false&amp;#125;&amp;#125;)</span><span class="token comment" spellcheck="true">-- 会返回单个文档（译者：只有这个文档没有vampires域）。如果需要或而不是与，可以用$or操作符并作用于需要进行或操作的数组：</span><span class="token number">db</span><span class="token punctuation">.</span>unicorns<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;gender: 'f', $or: [&amp;#123;loves: 'apple'&amp;#125;, &amp;#123;loves: 'orange'&amp;#125;, &amp;#123;weight: &amp;#123;$lt: 500&amp;#125;&amp;#125;]&amp;#125;)</span><span class="token comment" spellcheck="true">-- $in</span><span class="token number">db</span><span class="token punctuation">.</span>movies<span class="token punctuation">.</span>find<span class="token punctuation">(</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; rated: &amp;#123; $in: [ "PG", "PG-13" ] &amp;#125; &amp;#125; )</span><span class="token comment" spellcheck="true"># 查询 title 包含"教"字的文档：</span><span class="token number">db</span><span class="token punctuation">.</span>col<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;title:/教/&amp;#125;)</span><span class="token comment" spellcheck="true"># 查询 title 字段以"教"字开头的文档：</span><span class="token number">db</span><span class="token punctuation">.</span>col<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;title:/^教/&amp;#125;)</span><span class="token comment" spellcheck="true"># 查询 titl e字段以"教"字结尾的文档：</span><span class="token number">db</span><span class="token punctuation">.</span>col<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;title:/教$/&amp;#125;)</span></code></pre><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- update最简单的执行方式有两个参数：一个是选择器(选择更新的范围)，一个是需要更新的域。如果Roooooodles长胖了，我们就需要：</span><span class="token number">db</span><span class="token punctuation">.</span>unicorns<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;name: 'Roooooodles'&amp;#125;, &amp;#123;weight: 590&amp;#125;)</span><span class="token comment" spellcheck="true">-- 注意, 这个命令的第二个参数是会把整个文档更新, 而不是只更新那一个域, 单独更改一个域需要使用$set</span><span class="token number">db</span><span class="token punctuation">.</span>unicorns<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;weight: 590&amp;#125;, &amp;#123;$set: &amp;#123;name: 'Roooooodles', dob: new Date(1979, 7, 18, 18, 44), loves: ['apple'], gender: 'm', vampires: 99&amp;#125;&amp;#125;)</span><span class="token comment" spellcheck="true">-- 所以这样去更新</span><span class="token number">db</span><span class="token punctuation">.</span>unicorns<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;name: 'Roooooodles'&amp;#125;, &amp;#123;$set: &amp;#123;weight: 590&amp;#125;&amp;#125;)</span><span class="token comment" spellcheck="true">-- $inc 可以用来将一个域的值增加一个正的或负的数值</span><span class="token number">db</span><span class="token punctuation">.</span>unicorns<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;name: 'Pilot'&amp;#125;, &amp;#123;$inc: &amp;#123;vampires: -2&amp;#125;&amp;#125;)</span><span class="token comment" spellcheck="true">-- $push 可以给数组增加</span><span class="token number">db</span><span class="token punctuation">.</span>unicorns<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;name: 'Aurora'&amp;#125;, &amp;#123;$push: &amp;#123;loves: 'sugar'&amp;#125;&amp;#125;)</span><span class="token comment" spellcheck="true">-- update 方法还支持 如果对象文档存在, 就更新该文档, 否就是插入该文档</span><span class="token number">db</span><span class="token punctuation">.</span>hits<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;page: 'unicorns'&amp;#125;, &amp;#123;$inc: &amp;#123;hits: 1&amp;#125;&amp;#125;, true);</span><span class="token comment" spellcheck="true">-- update最后的一个惊喜是，它会默认地只更新一个文档</span><span class="token comment" spellcheck="true">-- 您想要做的应该是找出所有已经注射过疫苗（vaccinated）的独角兽，但为了达到这样的目的，需要把第四个参数设为true：</span><span class="token number">db</span><span class="token punctuation">.</span>unicorns<span class="token punctuation">.</span><span class="token keyword">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;, &amp;#123;$set: &amp;#123;vaccinated: true &amp;#125;&amp;#125;, false, true);</span><span class="token comment" spellcheck="true">-- 投影 在find的第二个参数就可以选择要投影的域</span><span class="token number">db</span><span class="token punctuation">.</span>unicorns<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;,&amp;#123;name:1,loves:1&amp;#125;)</span><span class="token comment" spellcheck="true">-- 排序 标明哪些域需要排序，用1表示升序，用-1表示降序</span><span class="token comment" spellcheck="true">-- 最重的独角兽排在第一</span><span class="token number">db</span><span class="token punctuation">.</span>unicorns<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;weight: -1&amp;#125;)</span><span class="token comment" spellcheck="true">-- 优先按名字排序再按吸血技能排序</span><span class="token number">db</span><span class="token punctuation">.</span>unicorns<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;name: 1, vampires: -1&amp;#125;)</span><span class="token comment" spellcheck="true">-- 分页</span><span class="token number">db</span><span class="token punctuation">.</span>unicorns<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;weight: -1&amp;#125;).limit(2).skip(1)</span><span class="token comment" spellcheck="true">-- 计数</span><span class="token number">db</span><span class="token punctuation">.</span>unicorns<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;vampires: &amp;#123;$gt: 50&amp;#125;&amp;#125;)</span><span class="token number">db</span><span class="token punctuation">.</span>unicorns<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;vampires: &amp;#123;$gt: 50&amp;#125;&amp;#125;).count()</span><span class="token comment" spellcheck="true">-- query ：可选，使用查询操作符指定查询条件</span><span class="token comment" spellcheck="true">-- projection ：可选，使用投影操作符指定返回的键。若不指定 projection，则默认返回所有键（默认省略）。</span><span class="token number">db</span><span class="token punctuation">.</span>collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span>query<span class="token punctuation">,</span> projection<span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 向指定集合更新单个文档</span><span class="token number">db</span><span class="token punctuation">.</span>collection<span class="token punctuation">.</span>updateOne<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 向指定集合更新多个文档</span><span class="token number">db</span><span class="token punctuation">.</span>collection<span class="token punctuation">.</span>updateMany<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 即使多个文档可能与指定过滤器匹配，也最多删除一个与指定过滤器匹配的文档。 3.2版中的新功能</span><span class="token number">db</span><span class="token punctuation">.</span>collection<span class="token punctuation">.</span>deleteOne<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 删除所有与指定过滤器匹配的文档。 3.2版中的新功能</span><span class="token number">db</span><span class="token punctuation">.</span>collection<span class="token punctuation">.</span>deleteMany<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 删除单个文档或与指定过滤器匹配的所有文档。</span><span class="token number">db</span><span class="token punctuation">.</span>collection<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="ObjectId"><a href="#ObjectId" class="headerlink" title="ObjectId"></a>ObjectId</h3><ul><li>前 4 个字节表示时间戳</li><li>接下来的 3 个字节是机器标识码</li><li>紧接的两个字节由进程 id 组成（PID）</li><li>最后三个字节是随机数。</li></ul><h3 id="一些初始化数据"><a href="#一些初始化数据" class="headerlink" title="一些初始化数据"></a>一些初始化数据</h3><p><img src="https://img2018.cnblogs.com/blog/1007918/201906/1007918-20190613220902900-1323060044.png" alt="查询"></p><pre class=" language-js"><code class="language-js">db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">insertMany</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    _id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span>    level<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    ename<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> firstname<span class="token punctuation">:</span> <span class="token string">"san"</span><span class="token punctuation">,</span> lastname<span class="token punctuation">:</span> <span class="token string">"zhang"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    roles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"vip"</span><span class="token punctuation">,</span> <span class="token string">"gen"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    _id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span>    level<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    ename<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> firstname<span class="token punctuation">:</span> <span class="token string">"si"</span><span class="token punctuation">,</span> lastname<span class="token punctuation">:</span> <span class="token string">"li"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    roles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"vip"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    _id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"王五"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>    level<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>    ename<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> firstname<span class="token punctuation">:</span> <span class="token string">"wu"</span><span class="token punctuation">,</span> lastname<span class="token punctuation">:</span> <span class="token string">"wang"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    roles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"gen"</span><span class="token punctuation">,</span> <span class="token string">"vip"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    _id<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"赵六"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">,</span>    level<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>    ename<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> firstname<span class="token punctuation">:</span> <span class="token string">"liu"</span><span class="token punctuation">,</span> lastname<span class="token punctuation">:</span> <span class="token string">"zhao"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    roles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"gen"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    _id<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"田七"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">27</span><span class="token punctuation">,</span>    ename<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> firstname<span class="token punctuation">:</span> <span class="token string">"qi"</span><span class="token punctuation">,</span> lastname<span class="token punctuation">:</span> <span class="token string">"tian"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">"北京"</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _id<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"周八"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span> roles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"gen"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token string">"上海"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="增删改查演示"><a href="#增删改查演示" class="headerlink" title="增删改查演示"></a>增删改查演示</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//查找age>25的文档的name</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      $gt<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查找age&lt;25的文档的name</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      $lt<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询age=25的文档的name</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      $eq<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询age!=25的文档的name</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      $ne<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询age在[24,25]中的文档的name</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      $<span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询age不在[24,25]中的文档的name</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      $nin<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询name='张三'且age=23的文档</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      $eq<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      $eq<span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询age不在[23,24,25]中的文档</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      $not<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        $<span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      $nin<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询name='张三'或者age=24的文档</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    $or<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        name<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          $eq<span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        age<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          $eq<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取反($nor)name='张三'或者age=24的文档</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    $nor<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        name<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          $eq<span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        age<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          $eq<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询name%10=3的文档</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $mod<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询name以张开头的文档</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $regex<span class="token punctuation">:</span> <span class="token operator">/</span><span class="token operator">^</span>张<span class="token operator">/</span>i <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token operator">/</span><span class="token operator">^</span>张<span class="token operator">/</span>i <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询name以张开头或者以四结尾的文档</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $<span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token regex">/^张/</span><span class="token punctuation">,</span> <span class="token operator">/</span>四$<span class="token operator">/</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询名字为张三的记录</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">"张三"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询age&lt;level的记录</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $expr<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $lt<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"$age"</span><span class="token punctuation">,</span> <span class="token string">"$level"</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询存在address字段的文档</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  address<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    $exists<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询name为string的文档</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  name<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    $type<span class="token punctuation">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  level<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    $type<span class="token punctuation">:</span> <span class="token string">"number"</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询roles中包含vip和gen的文档</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  roles<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    $all<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"vip"</span><span class="token punctuation">,</span> <span class="token string">"gen"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询roles中有元素等于vip，或有元素不等于gen的文档</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> roles<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $elemMatch<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $eq<span class="token punctuation">:</span> <span class="token string">"vip"</span><span class="token punctuation">,</span> $ne<span class="token punctuation">:</span> <span class="token string">"gen"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询roles中有两个元素的文档</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> roles<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $size<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改</p><p><img src="https://img2018.cnblogs.com/blog/1007918/201906/1007918-20190616114751086-971432921.png" alt="修改"></p><p>mongoDB 的 update 默认只修改一条 document，如果想修改所有符合条件的 documet 的话，可以设置 multi:true。upsert 表示当没有符合过滤条件的文档时，就添加一条文档，并将修改的内容作为新增 document 的值。mongoDB 的 update 功能比较丰富，如可以修改 field 的名字，删除 field，以及对数组进行增删改。从 3.2 版本开始，mongoDB 添加了 updateOne()和 updateMany()方法，用于修改单条或者多条数据，推荐使用新的方法，语法如下：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//将age&lt;25的记录的level修改为50，只修改一条。updateOne相当于update设置multi:false</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> age<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $lt<span class="token punctuation">:</span> <span class="token number">25</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $<span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> level<span class="token punctuation">:</span> <span class="token number">50</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将age&lt;25的记录的level修改为50，所有符合条件的记录都修改。updateMany相当于update设置multi:true</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">updateMany</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> age<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $lt<span class="token punctuation">:</span> <span class="token number">25</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $<span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> level<span class="token punctuation">:</span> <span class="token number">50</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*将张三的createtime字段值修改为当前时间格式为时间戳("createtime" : Timestamp(1560663270, 1))补充:如果不设置$type，默认的格式为date格式为date("createtime" : ISODate("2019-06-16T05:38:21.119Z"))*/</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">"张三"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    $currentDate<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      createtime<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $type<span class="token punctuation">:</span> <span class="token string">"timestamp"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将张三的level修改为20。如果要修改的field不存在，不会添加新的field。</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">"张三"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $<span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> level<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加一个name=吴九的document，并设置level为30</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">"吴九"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $setOnInsert<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> level<span class="token punctuation">:</span> <span class="token number">30</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> upsert<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//张三的age自增10，age修改为23+10=33</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">"张三"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $inc<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> age<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//张三的age自乘2，age修改为23*2=46</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">"张三"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $mul<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> age<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//张三的age取小值，因为23>13,所以修改age为13。如果修改的值比23大，那么不做操作。</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">"张三"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $min<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> age<span class="token punctuation">:</span> <span class="token number">13</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//张三的age取大值，因为23&lt;33,所以修改age为33。如果修改的值比23小，那么不做操作。</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">"张三"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $max<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> age<span class="token punctuation">:</span> <span class="token number">33</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将张三的age字段名改成年龄，值不变，年龄=23</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">"张三"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $rename<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> age<span class="token punctuation">:</span> <span class="token string">"年龄"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将张三的年龄字段删除</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">"张三"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $unset<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> 年龄<span class="token punctuation">:</span> <span class="token string">""</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组相关</span><span class="token comment" spellcheck="true">//初始化数据</span>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">insertMany</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> grades<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> grades<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改_id=1的文档graders中第一个值为80的元素，值改成82</span>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> grades<span class="token punctuation">:</span> <span class="token number">80</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $<span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"grades.$"</span><span class="token punctuation">:</span> <span class="token number">82</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改_id=1的文档graders中所有元素，值改成100</span>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _id<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $<span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"grades.$[]"</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改_id=2的文档graders中大于等于90的元素，值改成100</span>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> grades<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $elemMatch<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $gte<span class="token punctuation">:</span> <span class="token number">90</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $<span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"grades.$"</span><span class="token punctuation">:</span> <span class="token number">100</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在_id=1的文档graders中添加元素</span>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _id<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $push<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> grades<span class="token punctuation">:</span> <span class="token number">98</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在_id=1的文档graders中添加元素 如果添加的元素是85，因为85已经存在，所以不执行操作</span>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _id<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $addToSet<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> grades<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//移除最后一个元素 如果&amp;#123; $pop: &amp;#123; "grades" : -1 &amp;#125; &amp;#125;表示从前边弹出，移除第一个元素</span>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _id<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $pop<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> grades<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//移除_id=2的文档的graders中值为88,90的所有元素</span>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _id<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $pullAll<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> grades<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//移除_id=2的文档的graders中大于90的所有元素</span>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _id<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $pull<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> grades<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $gt<span class="token punctuation">:</span> <span class="token number">90</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在_id=1的文档graders中添加元素[99,100] 实测不行</span>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _id<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $push<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> grades<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $each<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// $slice 和$push,$each配合使用，用于限制元素个数 实测不行</span>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _id<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $push<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> grades<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $each<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> $slice<span class="token punctuation">:</span> <span class="token number">4</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>删除</li></ul><p><img src="https://img2018.cnblogs.com/blog/1007918/201906/1007918-20190616143017259-1159581044.png" alt="删除"></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//删除单条document，功能类似于remove设置justOne:true</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">deleteOne</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> age<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $gt<span class="token punctuation">:</span> <span class="token number">25</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除所有符合条件的document，功能类似于remove设置justOne:false</span>db<span class="token punctuation">.</span>userinfos<span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> age<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $gt<span class="token punctuation">:</span> <span class="token number">25</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><a href="https://docs.mongodb.com/manual/core/aggregation-pipeline/">聚集操作</a></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//准备测试数据</span>db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">insertMany</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> cust_id<span class="token punctuation">:</span> <span class="token string">"A123"</span><span class="token punctuation">,</span> amount<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> status<span class="token punctuation">:</span> <span class="token string">"A"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> cust_id<span class="token punctuation">:</span> <span class="token string">"A123"</span><span class="token punctuation">,</span> amount<span class="token punctuation">:</span> <span class="token number">250</span><span class="token punctuation">,</span> status<span class="token punctuation">:</span> <span class="token string">"A"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> cust_id<span class="token punctuation">:</span> <span class="token string">"B212"</span><span class="token punctuation">,</span> amount<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> status<span class="token punctuation">:</span> <span class="token string">"A"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> cust_id<span class="token punctuation">:</span> <span class="token string">"A123"</span><span class="token punctuation">,</span> amount<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> status<span class="token punctuation">:</span> <span class="token string">"D"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//聚合操作</span>db<span class="token punctuation">.</span>orders<span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $match<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> status<span class="token punctuation">:</span> <span class="token string">"A"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $group<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _id<span class="token punctuation">:</span> <span class="token string">"$cust_id"</span><span class="token punctuation">,</span> total<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> $sum<span class="token punctuation">:</span> <span class="token string">"$amount"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 　 * 第一阶段：$match会筛选出status="A"的documents，并把筛选出的document传给下一个阶段； * 第二阶段：$group将上一阶段传过来的documents通过cust_id进行分组，并合计各组的amount。 * 常用聚合运算符 * $lookup,$match,$project,$group,$sort,$skip,$limit,$out */</span></code></pre><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://blog.csdn.net/efew212efe/article/details/124524863">MongoDB 超详细教程（保姆级）</a></li><li><a href="https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md">the-little-mongodb-book</a></li><li><a href="https://www.mongodb.com/docs/mongodb-shell/crud/read/">官方文档</a></li><li><a href="https://syxdevcode.github.io/2020/09/22/MongoDB-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/">MongoDB 增删改查</a></li><li><a href="https://www.cnblogs.com/wyy1234/p/10919567.html">快速掌握 mongoDB(一)——mongoDB 安装部署和常用 shell 命令</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> mongodb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis 学习笔记1</title>
      <link href="2023/03/02/study-notes-redis-2023-03-02-redis-xue-xi-bi-ji-1/"/>
      <url>2023/03/02/study-notes-redis-2023-03-02-redis-xue-xi-bi-ji-1/</url>
      
        <content type="html"><![CDATA[<h2 id="redis-是什么-可以做什么"><a href="#redis-是什么-可以做什么" class="headerlink" title="redis 是什么,可以做什么"></a>redis 是什么,可以做什么</h2><p>Redis是现在最受欢迎的NoSQL数据库之一，Redis是一个使用ANSI C编写的开源、包含多种数据结构、支持网络、基于内存、可选持久性的键值对存储数据库，其具备如下特性：</p><ul><li>基于内存运行，性能高效</li><li>支持分布式，理论上可以无限扩展</li><li>key-value存储系统</li><li>开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API</li></ul><p>相比于其他数据库类型，Redis具备的特点是：</p><ul><li>C/S通讯模型</li><li>单进程单线程模型</li><li>丰富的数据类型</li><li>操作具有原子性</li><li>持久化</li><li>高并发读写</li><li>支持lua脚本</li></ul><p>以上复制于<a href="https://www.cnblogs.com/powertoolsteam/p/redis.html">葡萄城技术团队</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里使用<code>Docker</code>安装,方便</p><pre class=" language-shell"><code class="language-shell"># 拉取镜像docker pull redis# 运行docker run --name redis -p 6379:6379 -d redisdocker run --volume=/d/db/redis:/app/ --volume=/d/db/redis/data:/data --network=dev_net -p 6379:6379 -d redis# 进入docker 使用 redis-clidocker exec -it redis redis-cli</code></pre><h2 id="数据类型官方文档"><a href="#数据类型官方文档" class="headerlink" title="数据类型官方文档"></a>数据类型<a href="https://redis.io/docs/data-types/">官方文档</a></h2><ul><li>Strings</li></ul><blockquote><p>Redis字符串存储字节序列，包括文本、序列化对象和二进制数组。因此，字符串是最基本的Redis数据类型。它们通常用于缓存，但它们支持额外的功能，允许您实现计数器并执行按位操作</p></blockquote><ul><li>Lists</li></ul><blockquote><p>Redis列表是字符串值的链接列表。Redis列表通常用于实现堆栈和队列</p></blockquote><ul><li>Sets</li></ul><blockquote><p>Redis集合是唯一字符串（成员）的无序集合</p></blockquote><ul><li>Hashes</li></ul><blockquote><p>Redis散列是以字段值对集合的形式构造的记录类型。您可以使用散列来表示基本对象，并存储计数器分组等</p></blockquote><ul><li>Sorted sets</li></ul><blockquote><p>Redis排序集是按关联分数排序的唯一字符串（成员）的集合。</p></blockquote><ul><li>Streams</li></ul><blockquote><p>Redis流是一种数据结构，其作用类似于只追加日志。您可以使用流实时记录和同时联合事件。</p></blockquote><ul><li>Geospatial indexes</li></ul><blockquote><p>Redis地理空间索引允许您存储坐标并搜索它们。该数据结构对于查找给定半径或边界框内的附近点非常有用。</p></blockquote><ul><li>Bitmaps</li></ul><blockquote><p>Redis位图是字符串数据类型的扩展，可以将字符串视为位向量。您还可以对一个或多个字符串执行逐位操作。</p></blockquote><ul><li>Bitfields</li></ul><blockquote><p>Redis位字段允许您设置、递增和获取任意位长度的整数值。例如，可以对从无符号1位整数到有符号63位整数的任何对象进行操作。</p><p>这些值使用二进制编码的Redis字符串存储。位字段支持原子读取、写入和增量操作，使其成为管理计数器和类似数值的好选择。</p></blockquote><ul><li>HyperLogLog</li></ul><blockquote><p>HyperLogLog是一种估计集合基数的数据结构。作为一种概率数据结构，HyperLogLog以完美的精度换取高效的空间利用率</p></blockquote><h2 id="各种数据类型的使用"><a href="#各种数据类型的使用" class="headerlink" title="各种数据类型的使用"></a>各种数据类型的使用</h2><h3 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h3><ol><li><p>获取和设置</p><ul><li><code>SET</code> 存储字符串值。</li><li>仅当字符串值尚不存在时，<code>SETNX</code> 才会存储该值。对于实现锁很有用。</li><li><code>GET</code> 检索字符串值。</li><li><code>MGET</code> 在单个操作中检索多个字符串值。</li></ul></li><li><p>计数<code>incr</code>,<code>incrby</code>,<code>decr</code>,<code>decrby</code></p><ul><li><code>INCRBY</code>以原子方式递增（并在传递负数时递减）存储在给定键上的计数器。</li><li>浮点计数器存在另一个命令：<code>INCRBYFLOAT</code>。</li></ul></li><li><p><code>mget``mset</code> 批量获取和设置</p></li><li><p><code>exist</code> 判断key是否存在</p></li><li><p><code>del</code>删除key</p></li><li><p><code>type</code> 可以查看对应value的类型</p></li><li><p><code>expire</code>设置key的有效期</p></li><li><p><code>ex</code>,<code>setex</code>可以在设置的时候同时设置值和过期时间</p></li><li><p><code>ttl</code>可以查看key还能活多久</p></li><li><p>全部命令请看<a href="https://redis.io/commands/?group=string">文档</a></p></li><li><p>单个字符串最大大小是512M</p></li><li><p>存储结构化的数据可以考虑<code>哈希</code>和<code>redis.json</code></p></li></ol><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><ol><li><code>lpush</code>,<code>rpush</code>,<code>lpop</code>,<code>rpop</code>,<code>llen</code>分别是左入,右进,左出,右出,list的长度,灵活的进出就可以实现队列或堆栈</li><li>队列的最大长度是 <code>2^31-1</code> (4,294,967,295)</li><li><code>lmove</code>: 将一个list里面的数据移动到其他list</li><li><code>ltrim</code>: 将一个list裁剪成你想要的范围 比如 0-1</li><li>阻塞命令: 如果list为空,此命令会一直等待, 直到成功操作,就是普通的命令前面带<code>b</code></li><li><code>lindex</code>: 获取这个index的element</li><li><code>linsert</code>: 将元素插入指定的元素的前面或着后面, 比如将<code>three</code>插入<code>hello</code>和``world<code>之间</code>LINSERT mylist BEFORE “World” “There”`</li><li>访问头部或尾部的操作是O(1)的,但是操作列表中的元素(<code>lindex</code>,<code>linsert</code>,<code>lset</code>)时是O(n)的,主要是在处理大型列表的时候要小心</li></ol><h3 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h3><ol><li><code>sadd</code>,<code>srem</code>增加,删除</li><li><code>sismember</code>: 检查是不是成员, 换言之就是检查存不存在</li><li><code>sinter</code>: 返回给定所有集合的交集</li><li><code>scard</code>: 求set的大小</li><li><code>sdiff</code>: 求第一个集合与其他集合之间的差集</li><li>集合大部分操作的都是O(1)的, 但是大型集合注意<code>smembers</code>这个命令,此命令是O(n),应考虑用<code>sscan</code>代替</li><li>大型数据集使用集合可能占用很多内存, 如果担心内存的使用,而不用担心精度,可以考虑用布隆过滤器</li></ol><h3 id="Hashes"><a href="#Hashes" class="headerlink" title="Hashes"></a>Hashes</h3><ol><li><code>hset</code>,<code>hget</code>: 设置获取</li><li><code>hexists</code>: 检查指定字段是否存在</li><li><code>hgetall</code>: 获取指定key的所有字段和值</li><li><code>hkekys</code>: 获取指定key的所有字段</li><li><code>hlen</code>: 获取指定key的字段数量</li></ol><h3 id="Sorted-sets"><a href="#Sorted-sets" class="headerlink" title="Sorted sets"></a>Sorted sets</h3><ol><li><code>zadd</code>: 添加</li><li><code>zcard</code>: 获取有序集合的成员数</li><li><code>zrange</code>: 返回给定范围的排序结果</li><li><code>zrank</code>: 返回指定成员的排序(按升序), <code>zrevrank</code>(按倒序)</li></ol><h3 id="Streams"><a href="#Streams" class="headerlink" title="Streams"></a>Streams</h3><ol><li><code>xadd</code>: 添加</li><li><code>xread</code>: 读取一个或多个条目，从给定位置开始并在时间上向前移动</li><li><code>xrange</code>: 返回两个提供的条目ID之间的条目范围</li><li><code>xlen</code>: 返回长度</li></ol><h3 id="geo"><a href="#geo" class="headerlink" title="geo"></a>geo</h3><ol><li><code>geoadd</code>：添加地理位置的坐标。</li><li><code>geopos</code>：获取地理位置的坐标。</li><li><code>geodist</code>：计算两个位置之间的距离。</li><li><code>georadius</code>：根据用户给定的经纬度坐标来获取指定范围内的地理位置集合。</li><li><code>georadiusbymember</code>：根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合。</li><li><code>geohash</code>：返回一个或多个位置对象的 geohash 值。</li></ol><p>上面那些应该是比较常用的,剩下的以后用到再补充</p><h2 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h2><p>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p><ol><li><code>SUBSCRIBE runoobChat</code> 订阅频道</li><li><code>PUBLISH runoobChat &quot;Redis PUBLISH test&quot;</code> 发布消息到频道</li></ol><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>Redis 事务可以一次执行多个命令， 并且带有以下三个重要的保证：</p><ul><li>批量操作在发送 EXEC 命令前被放入队列缓存。</li><li>收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。</li><li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</li></ul><p>使用方式:</p><ol><li><code>MULTI</code></li><li>你要执行的命令</li><li><code>EXEC</code> 执行</li></ol><p>事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化的操作，中间某条指令的失败不会导致前面已做指令的回滚，也不会造成后续的指令不做。</p><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><ol><li>RDB<ul><li>RDB持久性以指定的时间间隔执行数据集的时间点快照。</li></ul></li><li>AOF<ul><li>AOF持久性记录服务器接收到的每个写入操作。然后可以在服务器启动时再次回放这些操作，重建原始数据集。使用与Redis协议本身相同的格式记录命令。</li></ul></li></ol><p>配置在<a href="https://redis.io/docs/management/config/">文档</a>这里下载对应版本的文件, docker启动的没有这个东西</p><p>参考了这篇<a href="https://blog.csdn.net/qq_43753724/article/details/122491456">文章</a>, 需要把一些默认的调整下</p><p>启动</p><pre class=" language-shell"><code class="language-shell">docker run --name redis -d -v /d/db/redis:/app/ -v /d/db/redis/data:/data -p 6379:6379  --network dev_net redis redis-server /app/redis.conf</code></pre><p><code>-name</code> 是配置别名<br><code>-v</code> 挂载配置文件和挂载数据文件夹<br><code>-p</code> 端口<br><code>-d</code> 后台运行<br><code>--network</code> 指定网络, 主从复制都链接到这个网络<br><code>redis-server /app/redis.conf</code> 启动redis-server使用指定的配置文件</p><p>在conf中搜索<code>SNAPSHOTTING</code>, 找到持久化配置, 设置<code>save 60 1</code>, 然后set几个值,就可以在宿主机看到<code>dump.rdb</code>生成了</p><p>然后<code>docker stop redis</code>, 再启动这个镜像, 发现数据依旧存在, <code>RDB</code>就成功了</p><p>搜索<code>appendonly</code>,把值改成<code>yes</code>, 再重启容器</p><p>同样, 发现<code>aof</code>文件夹已经生成了, 7.0是生成很多个文件, 跟旧的不一样</p><p>但是我发现上一次重启的key不在了</p><p>在官网看到如下说明</p><blockquote><p>如果同时启用了 AOF 和 RDB 持久性，并且 Redis 重新启动 AOF文件将用于重建原始数据集，因为它是 保证是最完整的。</p></blockquote><h3 id="RDB优势"><a href="#RDB优势" class="headerlink" title="RDB优势"></a>RDB优势</h3><ul><li>RDB 是 Redis 数据的一个非常紧凑的单文件时间点表示形式。RDB 文件非常适合备份。例如，您可能希望每隔 24 小时存档一次 RDB 文件，并将 RDB 快照每天保存 30 天。这使您可以在发生灾难时轻松还原数据集的不同版本。</li><li>RDB 非常适合灾难恢复，它是一个可以传输到远程数据中心或 Amazon S3（可能加密）的单个紧凑文件。</li><li>RDB 最大限度地提高了 Redis 性能，因为 Redis 父进程为了持久化而需要做的唯一工作是分叉一个子进程，该子进程将完成所有其余工作。父进程永远不会执行磁盘 I/O 或类似操作。</li><li>与 AOF 相比，RDB 允许更快地重新启动大数据集。</li><li>在副本上，RDB 支持重新启动和故障转移后的部分重新同步。</li></ul><h3 id="RDB-缺点"><a href="#RDB-缺点" class="headerlink" title="RDB 缺点"></a>RDB 缺点</h3><ul><li>如果您需要在 Redis 停止工作（例如停电后）将数据丢失的可能性降至最低，则 RDB 不好。您可以在生成 RDB 的位置配置不同的保存点（例如，在至少 100 分钟和针对数据集写入 &lt;&gt; 次后，您可以有多个保存点）。但是，您通常会每五分钟或更长时间创建一个 RDB 快照，因此，如果 Redis 因任何原因在没有正确关闭的情况下停止工作，您应该准备好丢失最新几分钟的数据。</li><li>RDB 经常需要 fork（） 才能使用子进程持久化在磁盘上。如果数据集很大，fork（） 可能会很耗时，如果数据集非常大且 CPU 性能不是很好，则可能会导致 Redis 停止为客户端提供服务几毫秒甚至一秒钟。AOF 还需要 fork（），但频率较低，您可以调整重写日志的频率，而无需牺牲持久性。</li></ul><h3 id="AOF优势"><a href="#AOF优势" class="headerlink" title="AOF优势"></a>AOF优势</h3><ul><li>使用 AOF Redis 更加持久：您可以拥有不同的 fsync 策略：完全没有 fsync，每秒 fsync 一次，每次查询时 fsync。使用每秒 fsync 的默认策略，写入性能仍然很高。fsync 是使用后台线程执行的，当没有 fsync 正在进行时，主线程将努力执行写入，因此您只能丢失一秒钟的写入。</li><li>AOF 日志是仅追加日志，因此在断电时不会有寻道或损坏问题。即使由于某种原因（磁盘已满或其他原因）日志以半写命令结束，redis-check-aof 工具也可以轻松修复它。</li><li>Redis 能够在 AOF 变得太大时在后台自动重写它。重写是完全安全的，因为当 Redis 继续追加到旧文件时，会使用创建当前数据集所需的最少操作集生成一个全新的文件，一旦第二个文件准备就绪，Redis 就会切换两者并开始追加到新文件。</li><li>AOF 以易于理解和解析的格式包含所有操作一个接一个的日志。您甚至可以轻松导出 AOF 文件。例如，即使您使用 FLUSHALL 命令意外刷新了所有内容，只要在此期间没有重写日志，您仍然可以通过停止服务器、删除最新命令并重新启动 Redis 来保存数据集。</li></ul><h3 id="AOF缺点"><a href="#AOF缺点" class="headerlink" title="AOF缺点"></a>AOF缺点</h3><ul><li>AOF 文件通常大于同一数据集的等效 RDB 文件。</li><li>AOF 可能比 RDB 慢，具体取决于确切的 fsync 策略。一般来说，将 fsync 设置为每秒性能仍然非常高，并且在禁用 fsync 的情况下，即使在高负载下，它应该与 RDB 一样快。尽管如此，RDB仍然能够提供更多关于最大延迟的保证，即使在巨大的写入负载的情况下也是如此。</li></ul><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>每当 Redis 需要将数据集转储到磁盘时，都会发生以下情况：</p><ul><li>redis。我们现在有一个孩子 和父进程。</li><li>子项开始将数据集写入临时 RDB 文件。</li><li>当孩子写完新的RDB文件时，它会替换旧的</li></ul><h3 id="日志重写"><a href="#日志重写" class="headerlink" title="日志重写"></a>日志重写</h3><p>随着写入操作的出现，AOF变得越来越大 执行。例如，如果要将计数器递增 100 倍， 您最终会在数据集中获得一个包含最终 值，但 AOF 中有 100 个条目。其中 99 个条目不需要 以重建当前状态。</p><p>重写是完全安全的。 当 Redis 继续追加到旧文件时， 使用创建当前数据集所需的最少操作集生成一个全新的， 一旦第二个文件准备就绪，Redis 就会切换两者并开始附加到新文件。</p><p>所以 Redis 支持一个有趣的功能：它能够重建 AOF 在后台，而不会中断对客户端的服务。每当 你发出一个BGREWRITEAOF，Redis会写最短的序列 在内存中重建当前数据集所需的命令。如果你是 将 AOF 与 Redis 2.2 一起使用，您需要不时运行 BGREWRITEAOF 时间。由于 Redis 2.4 能够自动触发日志重写（请参阅 示例配置文件以获取更多信息）。</p><p>从 Redis 7.0.0 开始，当计划进行 AOF 重写时，Redis 父进程会打开一个新的增量 AOF 文件以继续写入。 子进程执行重写逻辑并生成新的基本 AOF。 Redis 将使用临时清单文件来跟踪新生成的基本文件和增量文件。 准备就绪后，Redis 将执行原子替换操作以使此临时清单文件生效。 为了避免在 AOF 重写重复失败和重试的情况下创建许多增量文件的问题， Redis 引入了 AOF 重写限制机制，以确保以越来越慢的速度重试失败的 AOF 重写。</p><h3 id="仅追加文件的持久性如何？"><a href="#仅追加文件的持久性如何？" class="headerlink" title="仅追加文件的持久性如何？"></a>仅追加文件的持久性如何？</h3><p>您可以配置 Redis 在磁盘上同步数据的次数。有 三个选项：</p><ul><li>appendfsync always：每次将新命令附加到 AOF 时。非常非常慢，非常安全。请注意，在执行来自多个客户端或管道的一批命令后，命令将附加到 AOF，因此这意味着一次写入和一次 fsync（在发送回复之前）。fsync</li><li>appendfsync everysec：每一秒。足够快（因为 2.4 版可能与快照一样快），如果发生灾难，您可能会丢失 1 秒的数据。fsync</li><li>appendfsync no：永远不要，只需将数据交到操作系统手中即可。更快、更不安全的方法。通常，Linux 会使用此配置每 30 秒刷新一次数据，但这取决于内核的确切调整。fsync</li></ul><p>建议（和默认）策略是每秒。是的 既快速又相对安全。该政策非常缓慢 实践，但它支持组提交，所以如果有多个并行 写入 Redis 将尝试执行单个操作。fsyncalwaysfsync</p><h3 id="如果我的-AOF-被截断，我该怎么办？"><a href="#如果我的-AOF-被截断，我该怎么办？" class="headerlink" title="如果我的 AOF 被截断，我该怎么办？"></a>如果我的 AOF 被截断，我该怎么办？</h3><p>可能是服务器在写入 AOF 文件时崩溃，或者 存储 AOF 文件的卷在撰写本文时已满。当这种情况发生时， AOF 仍包含表示给定时间点版本的一致数据 的数据集（使用默认 AOF fsync 时可能长达一秒 策略），但 AOF 中的最后一个命令可能会被截断。 Redis的最新主要版本无论如何都能够加载AOF，只是 放弃文件中最后一个格式不正确的命令。在这种情况下， 服务器将发出如下所示的日志：</p><pre class=" language-shell"><code class="language-shell">* Reading RDB preamble from AOF file...* Reading the remaining AOF tail...# !!! Warning: short read while loading the AOF file !!!# !!! Truncating the AOF at offset 439 !!!# AOF loaded anyway because aof-load-truncated is enabled</code></pre><p>旧版本的 Redis 可能无法恢复，可能需要执行以下步骤：</p><ul><li>制作 AOF 文件的备份副本。</li><li>使用 Redis 附带的工具修复原始文件：redis-check-aof <code>$ redis-check-aof --fix &lt;filename&gt;</code></li><li>（可选）用于检查两个文件之间的区别。diff -u</li><li>使用固定文件重新启动服务器。</li></ul><h3 id="config命令"><a href="#config命令" class="headerlink" title="config命令"></a>config命令</h3><blockquote><p>如果我当前正在使用 dump.rdb 快照，如何切换到 AOF？</p></blockquote><p>在版本 2.0 及更高版本中，有一个不同的过程可以执行此操作，因为 可以猜测它从 Redis 2.2 开始更简单，根本不需要重新启动。</p><ul><li>备份最新的 dump.rdb 文件。</li><li>将此备份传输到安全的位置。</li><li>发出以下两个命令：<ul><li>redis-cli config set appendonly yes</li><li>redis-cli config set save “”</li></ul></li><li>确保您的数据库包含的键数与其包含的键数相同。</li><li>确保写入操作正确追加到仅追加文件。</li></ul><p>第一个 CONFIG 命令启用“仅追加文件”持久性。</p><p>第二个 CONFIG 命令用于关闭快照持久性。这是可选的，如果您愿意，可以启用这两种持久性方法。</p><p>重要提示：请记住编辑您的 redis.conf 以打开 AOF，否则 重新启动服务器时，配置更改将丢失，并且 服务器将使用旧配置重新启动。(也就是说这个方式不是持久化的, 持久化的配置要配置conf文件)</p><h3 id="备份-Redis-数据"><a href="#备份-Redis-数据" class="headerlink" title="备份 Redis 数据"></a>备份 Redis 数据</h3><p>Redis非常有利于数据备份，因为您可以在 数据库正在运行：RDB 一旦生成就永远不会被修改，并且当它 生产后，它使用临时名称并重命名为其最终目的地 仅当新快照完成时，才原子地使用 rename（2）。</p><p>这意味着在服务器运行时复制 RDB 文件是完全安全的 运行。这就是我们的建议：</p><ul><li>在服务器中创建 cron 作业，在一个目录中创建 RDB 文件的每小时快照，并在另一个目录中创建每日快照。</li><li>每次 cron 脚本运行时，请确保调用该命令以确保删除太旧的快照：例如，您可以拍摄最近 48 小时的每小时快照，以及一两个月每天的快照。确保使用日期和时间信息命名快照。find</li><li>确保每天至少一次将 RDB 快照传输到数据中心外部或至少在运行 Redis 实例的物理机外部。</li></ul><h3 id="备份-AOF-持久性"><a href="#备份-AOF-持久性" class="headerlink" title="备份 AOF 持久性"></a>备份 AOF 持久性</h3><p>在正常操作期间，您需要做的就是复制/tar此目录中的文件以实现备份。但是，如果在重写期间执行此操作，则最终可能会得到无效的备份。 要解决此问题，您必须在备份期间禁用 AOF 重写：<code>appenddirname</code></p><ul><li>使用 <code>CONFIG SET</code> 关闭自动重写 确保在此期间不要手动启动重写（使用 <code>BGREWRITEAOF</code>）。<code>auto-aof-rewrite-percentage 0</code></li><li>使用 INFO检查 当前是否没有正在进行的重写，并验证为 0。如果为 1，则需要等待重写完成。<code>persistenceaof_rewrite_in_progress</code></li><li>现在，您可以安全地复制目录中的文件。<code>appenddirname</code> 完成后重新启用重写：配置集 <code>auto-aof-rewrite-percentage</code> <code>&lt;prev-value&gt;</code></li></ul><h2 id="后续更新"><a href="#后续更新" class="headerlink" title="后续更新"></a>后续更新</h2><ul><li>3-7更新<ul><li>宿主机一直连不上docker内的容器, 原来要设置<code>protected-mode</code>为<code>no</code>才行, 意思是允许外部的连接到redis</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis 学习笔记1</title>
      <link href="2023/03/02/study-notes-redis-2023-03-07-redis-xue-xi-bi-ji-2/"/>
      <url>2023/03/02/study-notes-redis-2023-03-07-redis-xue-xi-bi-ji-2/</url>
      
        <content type="html"><![CDATA[<h2 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h2><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><blockquote><p>主从复制，是指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称为主节点(master)，后者称为从节点(slave)；</p><p>数据的复制是单向的，只能由主节点到从节点。</p><p>默认情况下，每台 Redis 服务器都是主节点，且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。<br>起到的作用</p><ol><li>数据冗余: 主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li><li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</li><li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写 Redis 数据时应用连接主节点，读 Redis 数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis 服务器的并发量。</li><li>高可用（集群）基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是 Redis 高可用的基础。</li></ol></blockquote><p>以下是实操:</p><ol><li>可以先在 Docker 中新建一个网络</li><li>修改 redis.conf 中的的<code>bind</code>地址, 从<code>127.0.0.1</code>改为<code>0.0.0.0</code>, 还要先设置密码 找到<code>masterauth</code>来设置密码<ol><li>在 redis.conf 中配置<code>replicaof &lt;masterip&gt; &lt;masterport&gt;</code>，如 replicaof 192.168.1.2 6379 将建立与实例 192.168.1.2:6379 的主从关系；这种方式等同于在 Redis 启动命令中增加参数 replicaof 参数。</li></ol></li><li>然后使用这个 config 运行一个容器, 然后用<code>docker network inspect redis-net</code>来查看 ip</li><li>复制 config, 把里面的<code>Replication</code>取消注释, 并修改为刚才启动的的容器 ip</li><li>同样启动, 这样,主从复制就成功了</li></ol><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><blockquote><p>一般来说，要将 Redis 运用于工程项目中，只使用一台 Redis 是万万不能的（宕机），原因如下：</p><p>1、从结构上，单个 Redis 服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大；</p><p>2、从容量上，单个 Redis 服务器内存容量有限，就算一 Redis 服务器内存容量为 256G，也不能将所有内存用作 Redis 存储内存，一般来说，单台 Redis 最大使用内存不应该 20G。</p><p>主从复制，读写分离！ 80% 的情况下都是在进行读操作！减缓服务器的压力！架构中经常使用！ 一主二从！</p><p>只要在公司中，主从复制就是必须要使用的，因为在真实的项目中不可能单机使用 Redis！</p></blockquote><h3 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h3><p>在上面测试中发现主机断开后，我们得手动设置另一个从机变成主机！, 这样好吗?这样不好, 所以我们需要用哨兵模式来自动挡切换主机, 通俗点讲, 就是自己内部去选举出大哥</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ol><li>添加哨兵配置文件 <code>sentinel.conf</code></li></ol><p>内容如下:</p><pre class=" language-conf"><code class="language-conf"># sentinel monitor 被监控的名称 host port 1 （代表自动投票选举大哥！）sentinel monitor myredis 127.0.0.1 6379 1</code></pre><p>启动 <code>redis-sentinel conf/sentinel.conf</code></p><h3 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h3><h2 id="缓存的常见的问题"><a href="#缓存的常见的问题" class="headerlink" title="缓存的常见的问题"></a>缓存的常见的问题</h2><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>在某一个时间段，缓存的 key 大量集中同时过期了，所有的请求全部冲到持久层数据库上，导致持久层数据库挂掉！<br>范例：双十一零点抢购，这波商品比较集中的放在缓存，设置了失效时间为 1 个小时，那么到了零点，这批缓存全部失效了，而大量的请求过来时，全部冲过了缓存，冲到了持久层数据库！</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ol><li><code>Redis</code>高可用 搭建 Redis 集群，既然 redis 有可能挂掉，那我多增设几台 redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群。（异地多活！）你这个问题, 充钱就能解决!!</li><li>数据随机过期, 给每个 key 的失效时间都加上 随机值不要让大批的可以同时过时</li></ol><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>是指一个非常热点的 key，在不停的扛着大并发，当这个 key 失效时，一瞬间大量的请求冲到持久层的数据库中，就像在一堵墙上某个点凿开了一个洞！</p><p>在缓存和数据库之间加一层互斥锁, 使得即使再多的的请求也不会把数据库打垮</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>用户需要查询一个数据，但是redis中没有（比如说mysql中id=-1的数），直接去请求MySQL，当很多用户同时请求并且都么有命中！于是都去请求了持久层的数据库，那么这样会给持久层数据库带来非常大的压力。一般出现这样的情况都不是正常用户，基本上都是恶意用户！</p><ol><li>使用布隆过滤器 布隆过滤器是一种数据结构，对所有可能查询的参数以hash形式存储，在控制层先进行校验，不符合则<br>丢弃，从而避免了对底层存储系统的查询压力；</li><li>业务规则过滤掉这些不合理的参数</li></ol><h3 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a>数据一致性</h3><p>缓存作为持久化存储（如数据库）的辅助存在，毕竟属于两套系统。理想情况下是缓存数据与数据库中数据完全一致，但是业务最常使用的旁路缓存架构下，在一些分布式或者高并发的场景中，可能会出现缓存不一致的情况。</p><ul><li>推荐使用先更新数据库，再删除缓存，并结合删除重试 + 补偿逻辑 + 缓存过期TTL等综合手段。</li></ul><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>本文纸上谈兵内容较多, 以后实战再来补充.</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://mp.weixin.qq.com/s/naRalMKGkddmH1_H1KChlw">Redis 专题：一文搞懂主从复制原理！</a><br><a href="https://zhuanlan.zhihu.com/p/354720754">Redis 专题：深入解读哨兵模式</a><br><a href="https://cloud.tencent.com/developer/article/1751001">一文搞懂 Redis 的三种集群方案</a><br><a href="https://juejin.cn/post/7152670651302543397">聊一聊安全且正确使用缓存的那些事 —— 关于缓存可靠性、关乎数据一致性</a></p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 反向代理的一些问题记录</title>
      <link href="2023/01/11/study-notes-nginx-2023-01-11-nginx-fan-xiang-dai-li-de-yi-xie-wen-ti-ji-lu/"/>
      <url>2023/01/11/study-notes-nginx-2023-01-11-nginx-fan-xiang-dai-li-de-yi-xie-wen-ti-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="在一个域名下部署多个子目录"><a href="#在一个域名下部署多个子目录" class="headerlink" title="在一个域名下部署多个子目录"></a>在一个域名下部署多个子目录</h2><p>详细可以参考我这篇文章 <a href="#">Post not found: 2022-08-27-asp-net-core-应用部署在Nginx-子目录的探索 为什么链接总是不对</a></p><h2 id="跳转端口丢失"><a href="#跳转端口丢失" class="headerlink" title="跳转端口丢失"></a>跳转端口丢失</h2><p>主要还是要设置ng</p><pre class=" language-config"><code class="language-config">proxy_set_header Host $http_host;</code></pre><p>这个请看 <a href="https://blog.csdn.net/yihanzhi/article/details/107002881">这里</a></p><h2 id="跳转http"><a href="#跳转http" class="headerlink" title="跳转http"></a>跳转http</h2><p>用户访问代理服务器是<code>https</code>的, 应用跳转之后到了 <code>http</code></p><p>应该是没有设置<code>Schema</code>的转发</p><p>ng要设置</p><pre class=" language-config"><code class="language-config">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;proxy_set_header X-Forwarded-Proto $scheme;</code></pre><p>asp应用也要设置</p><pre class=" language-c#"><code class="language-c#">app.UseForwardedHeaders();</code></pre>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuepress 学习记录</title>
      <link href="2023/01/04/study-notes-vue-2023-01-04-vuepress-xue-xi-ji-lu/"/>
      <url>2023/01/04/study-notes-vue-2023-01-04-vuepress-xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="记录下使用vuepress的过程"><a href="#记录下使用vuepress的过程" class="headerlink" title="记录下使用vuepress的过程"></a>记录下使用<code>vuepress</code>的过程</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>我是使用了<code>vuepress2</code>的<code>v2.0.0-beta.60</code>版本</p><p>开头的内容跟着官方文档做就行</p><p>下面只记录要点</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><code>config.ts</code></p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> defineUserConfig <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">"vuepress"</span><span class="token punctuation">;</span><span class="token keyword">import</span> theme <span class="token keyword">from</span> <span class="token string">"./theme"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineUserConfig</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  lang<span class="token punctuation">:</span> <span class="token string">"zh-CN"</span><span class="token punctuation">,</span>  title<span class="token punctuation">:</span> <span class="token string">"项目文档"</span><span class="token punctuation">,</span>  description<span class="token punctuation">:</span> <span class="token string">"文档"</span><span class="token punctuation">,</span>  head<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"link"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> rel<span class="token punctuation">:</span> <span class="token string">"icon"</span><span class="token punctuation">,</span> href<span class="token punctuation">:</span> <span class="token string">"/favicon.ico"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  theme<span class="token punctuation">:</span> theme<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里的<code>theme</code>是beta中的破坏性变更, 网上的如果不是这个就是旧攻略,可能无法起作用</p><p><code>theme.ts</code></p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> defaultTheme <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">"@vuepress/theme-default"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defaultTheme</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  logo<span class="token punctuation">:</span> <span class="token string">"/favicon.ico"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 默认主题配置</span>  navbar<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      text<span class="token punctuation">:</span> <span class="token string">"首页"</span><span class="token punctuation">,</span>      link<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      text<span class="token punctuation">:</span> <span class="token string">"维护记录"</span><span class="token punctuation">,</span>      link<span class="token punctuation">:</span> <span class="token string">"/note/"</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      text<span class="token punctuation">:</span> <span class="token string">"需求"</span><span class="token punctuation">,</span>      link<span class="token punctuation">:</span> <span class="token string">"/demand/"</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      text<span class="token punctuation">:</span> <span class="token string">"API"</span><span class="token punctuation">,</span>      link<span class="token punctuation">:</span> <span class="token string">"/api/"</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  sidebar<span class="token punctuation">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>  repo<span class="token punctuation">:</span> <span class="token string">"https://github.com/HuiJiOnGit"</span><span class="token punctuation">,</span>  editLink<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span>  lastUpdated<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>  lastUpdatedText<span class="token punctuation">:</span> <span class="token string">"最后更新时间"</span><span class="token punctuation">,</span>  notFound<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"页面开小差了"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  backToHome<span class="token punctuation">:</span> <span class="token string">"返回顶部"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>主要的主题配置写在这里, 免得到时候<code>config.ts</code>太多内容</p><p>贡献者和最后更新时间是要你提交了git记录之后才会出现的,否则是不会有这两个东西的</p><p>最后是<code>home</code>页面的内容</p><pre class=" language-md"><code class="language-md">---home: trueheroImage: /home.pngheroText: Geralt Zhang's Documentactions:  - text: 维护记录    link: /note/    type: primary  - text: 需求    link: /demand/    type: secondary  - text: API    link: /api/    type: secondaryfeatures:- title: 维护记录  details: BUG的维护记录- title: 需求文档  details: 把各种善变的需求给记录下来- title: API文档  details: 代码的注释放到这里footer: MIT Licensed | Copyright © 2022-present Passwordgloo---</code></pre><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><pre class=" language-config"><code class="language-config"># vuepress 文档server&#123;    listen 8083;    server_name docs.com localhost;    location / &#123;        root   D:/Docs/docs/.vuepress/dist/;        index  index.html index.htm;        try_files $uri $uri/ /index.html;     &#125;&#125;</code></pre><p>这里的<code>root</code>使用绝对地址就行, 主要 <code>\</code> 要改为 <code>/</code>,不要有中文和空格</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>横向对比<code>hexo</code>的话,感觉都差不多,可能更多深度定制的话,<code>vuepress</code>可以使用<code>vue</code>的组件会更加灵活和自由</p>]]></content>
      
      
      <categories>
          
          <category> vuepress </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vuepress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在vue2中使用render函数和Jsx</title>
      <link href="2022/12/06/study-notes-vue-2022-12-06-zai-vue2-zhong-shi-yong-render-han-shu-he-jsx/"/>
      <url>2022/12/06/study-notes-vue-2022-12-06-zai-vue2-zhong-shi-yong-render-han-shu-he-jsx/</url>
      
        <content type="html"><![CDATA[<h2 id="在-vue2-中使用-render-函数和-Jsx"><a href="#在-vue2-中使用-render-函数和-Jsx" class="headerlink" title="在 vue2 中使用 render 函数和 Jsx"></a>在 vue2 中使用 render 函数和 Jsx</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>最近产生了一个神奇的想法, 本来项目的内容都是基于配置是渲染不同的内容的, 怎么渲染是要手动写<code>template</code>的, 但是日积月累下来, 各种<code>if</code>和<code>else</code>的判断条件已经让代码非常难维护了, 于是我产生一个想法,就是动态生成 vue 组件, 这不正是那些真正的低代码框架做的事吗? 事不宜迟, 就开始尝试下, 这篇文章也算我的学习过程和一个记录.</p></blockquote><h3 id="让项目支持JSX"><a href="#让项目支持JSX" class="headerlink" title="让项目支持JSX"></a>让项目支持<code>JSX</code></h3><p>我的项目不是一个单文件系统, 也不是一个<code>SFC</code>的项目,很多<code>Vue</code>的强大功能我很难使用, 但是摸索了下, 还是成功支持了.</p><ol><li>首先你的有<code>Babel 7+</code>, 然后安装这个包<a href="https://github.com/vuejs/jsx-vue2">点击</a></li></ol><blockquote><p>npm install @vue/babel-preset-jsx @vue/babel-helper-vue-jsx-merge-props</p></blockquote><p>之后你就可以在你的项目里面使用<code>jsx</code>了</p><h3 id="为什么要使用JSX"><a href="#为什么要使用JSX" class="headerlink" title="为什么要使用JSX"></a>为什么要使用<code>JSX</code></h3><p>因为项目原因, 我打算从<code>template</code>渲染换成<code>render</code>渲染,这样才能完全动态生成组件, 但是<code>render</code>并不好书写和阅读, 所以采用<code>JSX</code></p><h3 id="了解render函数"><a href="#了解render函数" class="headerlink" title="了解render函数"></a>了解<code>render</code>函数</h3><p>想要完全动态生成组件, 你就得了解<code>render</code>用法, 具体可以看 <a href="https://v2.cn.vuejs.org/v2/guide/render-function.html#%E5%9F%BA%E7%A1%80">vue2 文档</a> 和 <a href="https://cn.vuejs.org/guide/extras/render-function.html#creating-vnodes">vue3 文档</a> vue3 直接看 vue3 的,vue2 可以掺和看下 vue3, 因为这里 vue2 的文档太简单了, 不好理解</p><h4 id="render的参数"><a href="#render的参数" class="headerlink" title="render的参数"></a><code>render</code>的参数</h4><p>先来看看<a href="https://v2.cn.vuejs.org/v2/guide/render-function.html#createElement-%E5%8F%82%E6%95%B0">参数</a></p><p>从参数可以知道,这个函数使用是非常灵活的, 搬运下 vue3 你就知道了</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 除了类型必填以外，其他的参数都是可选的</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//&lt;div>&lt;/div></span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id<span class="token punctuation">:</span> <span class="token string">"foo"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//&lt;div id="foo">&lt;/div></span><span class="token comment" spellcheck="true">// attribute 和 property 都能在 prop 中书写</span><span class="token comment" spellcheck="true">// Vue 会自动将它们分配到正确的位置</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">"bar"</span><span class="token punctuation">,</span> innerHTML<span class="token punctuation">:</span> <span class="token string">"hello"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//&lt;div class="bar">hello&lt;/div></span><span class="token comment" spellcheck="true">// props modifiers such as .prop and .attr can be added</span><span class="token comment" spellcheck="true">// with '.' and `^' prefixes respectively</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">".name"</span><span class="token punctuation">:</span> <span class="token string">"some-name"</span><span class="token punctuation">,</span> <span class="token string">"^width"</span><span class="token punctuation">:</span> <span class="token string">"100"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 类与样式可以像在模板中一样</span><span class="token comment" spellcheck="true">// 用数组或对象的形式书写</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>foo<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> bar <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> color<span class="token punctuation">:</span> <span class="token string">"red"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 事件监听器应以 onXxx 的形式书写</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> onClick<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// children 可以是一个字符串</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id<span class="token punctuation">:</span> <span class="token string">"foo"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 没有 props 时可以省略不写</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// children 数组可以同时包含 vnodes 与字符串</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>接下来你还可以看看第二个参数的数据结构, 平时我们在使用的各种动态绑定,事件啊,就其实可以写到这里</p><p>第三个参数, 这个就是<code>children</code> 元素了, 很好理解, 就是这个组件下面要渲染的 <code>VNode</code>, 就是告诉 vue, 这个标签包裹的是要渲染什么内容, 是一个组件,还是一个 p 标签,还是一段文字</p><p>以上就是我简单的理解, 更多的请看文档</p><h3 id="简单了解下JSX"><a href="#简单了解下JSX" class="headerlink" title="简单了解下JSX"></a>简单了解下<code>JSX</code></h3><p>jsx 用起来不难, 我就讲下我使用中的小技巧</p><ul><li><p><code>Fragments</code>: <code>vue2</code>的<code>JSX</code>不支持<code>&lt;&gt;&lt;/&gt;</code>, 但是可以这样搞<code>return [VNode,VNode]</code>, 这样就可以返回多个但没有根节点的组件了</p></li><li><p><code>condition</code>: 这个可以这样写<code>condition &amp;&amp; VNode</code>, 利用<code>&amp;&amp;</code>可以让条件不满足时短路, 当然你要<code>else</code>的话就要用三元运算符了</p></li><li><p>绑定事件: 普遍的<code>click</code>,<code>change</code>事件就可以缩写成<code>onClick</code>,<code>onChange</code>这样去绑定</p></li><li><p>事件绑定如果事件不用传参,那可以直接<code>onClick=&#123;this.click&#125;</code>,如果要传参,就要用箭头函数来定义,不要直接用<code>onClick=&#123;this.click(event)&#125;</code>这样子写,每次渲染都会执行的,要这样写<code>onClick=&#123;(event) =&gt; this.click(event)&#125;</code></p></li><li><p>绑定元素: <code>value=&#123;this.value&#125;</code></p></li></ul><h3 id="各种模板语法在JSX和render的写法"><a href="#各种模板语法在JSX和render的写法" class="headerlink" title="各种模板语法在JSX和render的写法"></a>各种模板语法在<code>JSX</code>和<code>render</code>的写法</h3><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><p>(vue3)对于 .passive、.capture 和 .once 事件修饰符，可以使用驼峰写法将他们拼接在事件名后面：</p><p>这一点 2 和 3 有区别</p><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a><code>v-model</code></h4><p>在 render 里面并没有直接支持这个东西的, 这个实现其实是通过 props 传入一个 value, 并同时监听 input 事件,去实现的, 比如我现在要使用一个 el-input,那我就要 v-model 去绑定一个值, 那放到模板很容易书写,在 jsx 中要怎么写呢?</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//template</span><span class="token operator">&lt;</span>el<span class="token operator">-</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"value"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">></span><span class="token comment" spellcheck="true">//jsx</span><span class="token operator">&lt;</span>el<span class="token operator">-</span>input value<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> onInput<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> val<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">></span><span class="token comment" spellcheck="true">//render</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"el-input"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"attrs"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token string">"value"</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token string">"on"</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token string">"input"</span><span class="token punctuation">:</span> val <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> val    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h4><p>不得不说,感觉 vue2 的文档说这个太简单了, 太难理解的可以去看 vue3 的文档</p><p>首先, 插槽的数据从何而来? 很简单,就是父组件在子组件的闭合中写入了其他的内容,这些内容都是插槽的内容</p><p>在 vue2 的例子中,你可以看到</p><pre class=" language-js"><code class="language-js">render<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>createElement<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// `&lt;div>&lt;slot>&lt;/slot>&lt;/div>`</span>  <span class="token keyword">return</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用</span><span class="token comment" spellcheck="true">// &lt;child>&lt;p>插槽内容&lt;/p>&lt;/child></span></code></pre><p>从这个例子中, <code>this.$slots.default</code>里面的内容就是<code>&lt;p&gt;插槽内容&lt;/p&gt;</code>, 然后这个组件要怎么渲染就很明显了, render 的 children 是插槽中 default 的内容, 子组件就是直接渲染默认 slot 的内容.</p><ul><li>具名插槽要定义和使用</li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--father--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>this is father<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>default slot content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>father render header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>father render footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>append</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> slotProps.user.firstName <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--child--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span>child render default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>child render header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>child render footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>append<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>user</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span> user.lastName <span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>这个例子展示了默认插槽,具名插槽和插槽作用域,下面展示一下jsx中和render是怎样子的</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> scopedSlots <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    append<span class="token punctuation">:</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">></span>father render scopedSlots append content <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span>firstName<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token keyword">this</span> is father<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>child scopedSlots<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>scopedSlots<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token keyword">default</span> slot content<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p slot<span class="token operator">=</span><span class="token string">"header"</span><span class="token operator">></span>father render header<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p slot<span class="token operator">=</span><span class="token string">"footer"</span><span class="token operator">></span>father render footer<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span>header <span class="token operator">||</span> <span class="token string">"child render header"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token keyword">this</span> is child<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token operator">||</span> <span class="token string">"child render default"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span>footer <span class="token operator">||</span> <span class="token string">"child render footer"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>$scopedSlots<span class="token punctuation">.</span>append <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$scopedSlots<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>lastName<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这里有几个关键点:</p><ol><li>父组件传递默认插槽: 直接在子组件标签中写内容就行</li><li>父组件传递具名插槽: 在子组件标签中写内容, 这个内容的attr中加上slot=”具名插槽名字”</li><li>父组件传递插槽作用域: 在render中定义scopedSlots对象, 然后在里面写属性, 属性定义为一个函数,在里面写你要渲染的内容即可, 参数就是子组件传过来的参数</li><li>子组件定义默认插槽: 使用this.$slots.default即可获取默认插槽的内容,放到{}中即可,我看了文档,vue2的示例没有执行default,而vue3的实例是执行了default(), 不太清楚这其中的区别, 不同版本的还是要仔细查看文档</li><li>子组件定义插槽默认的内容: 可以使用||快速定义</li><li>子组件定义具名插槽: 同defualt, 这里就是把default换成你定义的名字即可</li><li>子组件定义插槽作用域: 使用$scopedSlots获取而不是$slots, 然后把内容写进去即可</li></ol><p>那么再看看render中生成的内容, 按号入座, 能更深刻理解render</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> scopedSlots <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    append<span class="token punctuation">:</span> user <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token string">"father render scopedSlots append content "</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>firstName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span>    <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"h1"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"this is father"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"child"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token string">"scopedSlots"</span><span class="token punctuation">:</span> scopedSlots    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"default slot content"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token string">"slot"</span><span class="token punctuation">:</span> <span class="token string">"header"</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"father render header"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token string">"slot"</span><span class="token punctuation">:</span> <span class="token string">"footer"</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"father render footer"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span>   <span class="token punctuation">[</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span>header <span class="token operator">||</span> <span class="token string">"child render header"</span><span class="token punctuation">,</span>     <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">"h2"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"this is child"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span><span class="token keyword">default</span> <span class="token operator">||</span> <span class="token string">"child render default"</span><span class="token punctuation">,</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span>footer <span class="token operator">||</span> <span class="token string">"child render footer"</span><span class="token punctuation">,</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>$scopedSlots<span class="token punctuation">.</span>append <span class="token operator">?</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>$scopedSlots<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">:</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>lastName  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>仔细观察可以发现以下几点</p><ol><li>无论是父组件对于默认插槽还是具名插槽都是放到children参数中, 然后在第二个参数的数据对象中指明了slot是xxx,告诉vue这是具名插槽中的内容</li><li>插槽作用域应该放到数据对象的scopedSlots属性还是放到children参数中? 在这个jsx工具帮我们生成的版本中, 是放到了数据对象的scopedSlots属性中的, 但是你可以直接在children参数中放执行的插槽, 可以看看这个<a href="https://v2.cn.vuejs.org/v2/guide/render-function.html#%E6%8F%92%E6%A7%BD">例子</a></li></ol><ul><li>作用域</li></ul><p>如果我想做一个在模板中只有一个组件,剩下的组件全是动态渲染的话, 那你必须要注意作用域的问题.</p><p>我现在的目标是生成如下内容</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--这个组件可以接受数据,动态渲染出下面的组件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>render</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--这里都是我动态生成的组件--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>c</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>render</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre><p>然后我在data中定义一些变量, 想给a,b,c组件使用,这是不行的. 因为作用域的限制, 组件只能访问自己的data和prop,不能直接访问父组件的data的, 你或许会疑惑为什么平时我定义个模板, 随便访问data中的数据, 那是因为整个模板实际都是root渲染的, 换成render函数来说, 就是你看到的render组件只是在root中放到children参数中,作用域还是在root的, 所以能访问所有的data</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'render'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://v2.cn.vuejs.org/v2/guide/render-function.html">vue2文档</a></p><p><a href="https://cn.vuejs.org/guide/extras/render-function.html#creating-vnodes">vue3文档</a></p><p><a href="https://juejin.cn/post/7016487837096738853#heading-0">在 Vue2 中使用 JSX 写组件，props、data、slot 到底应该怎么写？</a></p><p><a href="https://blog.csdn.net/ruienger/article/details/114526311">VUE render 函数中使用插槽、具名插槽与作用域插槽</a></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> jsx </tag>
            
            <tag> render </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在ef core中使用自定义函数</title>
      <link href="2022/10/15/study-notes-efcore-2022-10-15-zai-ef-core-zhong-shi-yong-zi-ding-yi-han-shu/"/>
      <url>2022/10/15/study-notes-efcore-2022-10-15-zai-ef-core-zhong-shi-yong-zi-ding-yi-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="在ef-core中使用自定义函数"><a href="#在ef-core中使用自定义函数" class="headerlink" title="在ef core中使用自定义函数"></a>在ef core中使用自定义函数</h2><blockquote><p>在有些时候,我们因各种原因不得不使用数据库函数的时候, 真希望ef直接全部都支持, 但实际这是太过理想了, 但是ef本身也留下了自定义函数的路子, 下面我来记录下我的尝试过程</p></blockquote><h3 id="1-首先肯定是搜索啊"><a href="#1-首先肯定是搜索啊" class="headerlink" title="1. 首先肯定是搜索啊"></a>1. 首先肯定是搜索啊</h3><p>于是乎我从官网和博客园找到想要的内容</p><p><a href="https://www.cnblogs.com/GuZhenYin/p/14657024.html">EFCore3.1+编写自定义的EF.Functions扩展方法</a></p><p><a href="https://learn.microsoft.com/zh-cn/ef/core/querying/user-defined-function-mapping">用户定义的函数映射</a></p><p>下面简单介绍下官网的, 3 步就ok了</p><ul><li>在数据库创建自定义函数(或者使用数据库已存在的函数)</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> dbo<span class="token punctuation">.</span>CommentedPostCountForBlog<span class="token punctuation">(</span><span class="token variable">@id</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">RETURNS</span> <span class="token keyword">int</span><span class="token keyword">AS</span><span class="token keyword">BEGIN</span>    <span class="token keyword">RETURN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>        <span class="token keyword">FROM</span> <span class="token punctuation">[</span>Posts<span class="token punctuation">]</span> <span class="token keyword">AS</span> <span class="token punctuation">[</span>p<span class="token punctuation">]</span>        <span class="token keyword">WHERE</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>BlogId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">@id</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>            <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>            <span class="token keyword">FROM</span> <span class="token punctuation">[</span>Comments<span class="token punctuation">]</span> <span class="token keyword">AS</span> <span class="token punctuation">[</span><span class="token number">c</span><span class="token punctuation">]</span>            <span class="token keyword">WHERE</span> <span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>PostId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">c</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>PostId<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span></code></pre><ul><li>为了在 EF Core 中使用此函数，我们将定义以下 CLR 方法，并将其映射到用户定义的函数(注意这里不需要实现, 在.net中只是使用这个方法的定义, 不会真的调用这个方法, 建议抛出<code>InvalidOperationException</code>或<code>NotSupportedException</code>)：</li></ul><pre class=" language-c#"><code class="language-c#">public int ActivePostCountForBlog(int blogId)    => throw new NotSupportedException();</code></pre><p>这里不得不提下<code>EF.Funtions</code>这个扩展定义的方法,我本来也是想将方法定义到这个下面的, 想和<code>ef</code>保持统一的, 但是后面发现有点问题,具体可以看看这个<a href="https://github.com/dotnet/efcore/issues/28419#issuecomment-1180807932">issue</a></p><ul><li>此函数定义现在可以与模型配置中用户定义的函数关联：</li></ul><pre class=" language-c#"><code class="language-c#">modelBuilder.HasDbFunction(typeof(BloggingContext).GetMethod(nameof(ActivePostCountForBlog), new[] &#123; typeof(int) &#125;))    .HasName("CommentedPostCountForBlog");</code></pre><p>总之就是不要定义成扩展的</p><p>执行查询和生成的语句如下:</p><pre class=" language-c#"><code class="language-c#">var query1 = from b in context.Blogs             where context.ActivePostCountForBlog(b.BlogId) > 1             select b;/*SELECT [b].[BlogId], [b].[Rating], [b].[Url]FROM [Blogs] AS [b]WHERE [dbo].[CommentedPostCountForBlog]([b].[BlogId]) > 1*/</code></pre><p>可以看到在语句中就直接使用了这个函数, 除了在<code>where</code>中使用,也可以在 <code>select</code> 中使用, 可见是十分灵活的</p><h2 id="记录下我需要的函数映射"><a href="#记录下我需要的函数映射" class="headerlink" title="记录下我需要的函数映射"></a>记录下我需要的函数映射</h2><p>由于数据库存在很多多对多关系是在一个字段中保存的<code>a;aa;aaba</code>,像这样的,这样查询起来非常麻烦,非常难写语句, 后面了解到pg其实是有一种<code>Array</code>类型的,这个类型就可以非常方便的查询包含关系, 像上面的例子, <code>string.Contains(&#39;aa&#39;)</code>查出来就是错的,但是转为sql的话,使用<code>&#39;aa&#39; = ANY(string_to_array(string))</code>的话,就很方便查了<br>但是ef并不直接支持<code>string_to_array</code>和<code>ANY</code>的查询, 是<code>string</code>类型不支持这样查, 如果映射到.net是<code>array</code>类型的时候是可以支持的,至于为什么没有正确映射为数组,别问为什么,呵呵(肯定不是建表那个古板又落后).</p><pre class=" language-c#"><code class="language-c#">public static class DbFunctionsExtensions&#123;    public static string[] StringToArray(string source, string separator)    => throw new NotSupportedException(nameof(StringToArray));    public static bool Any(string element, string[] source)    => throw new NotSupportedException();&#125;//在dbcontext的OnModelCreating方法中定义如下内容modelBuilder.HasDbFunction(typeof(DbFunctionsExtensions).GetMethod("StringToArray", new Type[] &#123; typeof(string), typeof(string) &#125;), b =>&#123;    b.HasName("string_to_array");&#125;);modelBuilder.HasDbFunction(typeof(DbFunctionsExtensions).GetMethod("Any", new Type[] &#123; typeof(string), typeof(string[]) &#125;), b =>&#123;    //b.HasName("ANY"); 这里就不用定义name了,简单的定义name只能做到简单的映射, 像这个any的语法真的很奇葩, 所以要自己翻译这个方法,不能用默认的    b.HasTranslation(args =>        new PostgresAnyExpression(            args[0],            args[1],            PostgresAnyOperatorType.Equal,            args[0].TypeMapping        )    );&#125;);</code></pre><p><code>&#39;aa&#39; = ANY(array[])</code><br>这里的翻译真是一波三折,难点全在这里了,一开始我也是使用<code>SqlBinaryExpression</code>来生成表达式树的,但是中间那个<code>=</code>不能用<code>Equal</code>翻译的,会翻译成<code>==</code>,<br>如果用<code>Assign</code>, 则是<code>SqlBinaryExpression</code>不支持这个操作,后面实在没辙,去观看了<a href="https://github.com/npgsql/efcore.pg">efcore.pg</a>的源码,终于功夫不负有心人,<br>找到了官方定义的<code>PostgresAnyExpression</code>的表达式,使用这个就可以正确翻译这个<code>any</code>的语法</p><p>翻译后的语句如下</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> s_user <span class="token keyword">AS</span> s<span class="token keyword">WHERE</span> <span class="token string">'FS'</span> <span class="token operator">=</span> <span class="token keyword">ANY</span> <span class="token punctuation">(</span>string_to_array<span class="token punctuation">(</span>s<span class="token punctuation">.</span>site_id<span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> efcore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> efcore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探究下abp的启动和模块系统</title>
      <link href="2022/09/16/study-notes-abp-2022-09-16-tan-jiu-xia-abp-de-qi-dong-he-mo-kuai-xi-tong/"/>
      <url>2022/09/16/study-notes-abp-2022-09-16-tan-jiu-xia-abp-de-qi-dong-he-mo-kuai-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="探究下abp的启动和模块系统"><a href="#探究下abp的启动和模块系统" class="headerlink" title="探究下abp的启动和模块系统"></a>探究下abp的启动和模块系统</h2><p>当你创建一个新的abp应用,你会发现,它的<code>Startup</code>文件特别简洁,如下所示:</p><pre class=" language-c#"><code class="language-c#">public void ConfigureServices(IServiceCollection services)&#123;    services.AddApplication<BookStoreWebModule>();&#125;public void Configure(IApplicationBuilder app)&#123;    app.InitializeApplication();&#125;</code></pre><p>这是怎么做到的? 现在让我一探究竟</p><blockquote><p>它分两步做，相互独立的，它抽象相应的接口，<br>1、将模块的列表遍历注册服务到容器，分三个阶段PreConfigureServices（预注册）、ConfigureServices（注册）、PostConfigureServices（注册后）。<br>2，应用的初始化，即将设置服务提供方ServiceProvider,并执行四个生命周期函数，OnPreApplicationInitialization，OnApplicationInitialization、OnPostApplicationInitialization、OnApplicationShutdown</p></blockquote><h3 id="ConfigureServices的AddApplication"><a href="#ConfigureServices的AddApplication" class="headerlink" title="ConfigureServices的AddApplication"></a><code>ConfigureServices</code>的<code>AddApplication</code></h3><p>首先看看<code>AddApplication&lt;BookStoreWebModule&gt;()</code>这个方法,通过对源码的查找, 这实际是一个扩展方法</p><pre class=" language-c#"><code class="language-c#">public static IAbpApplicationWithExternalServiceProvider AddApplication<TStartupModule>(    [NotNull] this IServiceCollection services,    [CanBeNull] Action<AbpApplicationCreationOptions> optionsAction = null)    where TStartupModule : IAbpModule&#123;    return AbpApplicationFactory.Create<TStartupModule>(services, optionsAction);&#125;</code></pre><p>这里实际是通过<code>AbpApplicationFactory</code>工厂创建了一个<code>IAbpApplicationWithExternalServiceProvider</code>实例</p><p>这个实例名字非常长,最重要的看后面那段<code>External ServiceProvider</code>,翻译过老就是外部应用提供的意思, 什么叫外部应用提供? 就是abp把应用这样区分,是abp内部启动依赖的应用服务就是内部应用, 而用户自己创建的服务就是外部应用了(这是我的理解)</p><p>再来看<code>IAbpApplicationWithExternalServiceProvider</code>的实现类是<code>AbpApplicationWithExternalServiceProvider</code> , 它继承了<code>AbpApplicationBase</code>, <code>IAbpApplicationWithExternalServiceProvider</code>,<br>abp启动的秘密都写在了这个base类中, 看看这里的构造函数</p><pre class=" language-c#"><code class="language-c#">[NotNull]public Type StartupModuleType &#123; get; &#125;public IServiceProvider ServiceProvider &#123; get; private set; &#125;public IServiceCollection Services &#123; get; &#125;public IReadOnlyList<IAbpModuleDescriptor> Modules &#123; get; &#125;public string ApplicationName &#123; get; &#125;private bool _configuredServices;internal AbpApplicationBase(    [NotNull] Type startupModuleType,    [NotNull] IServiceCollection services,    [CanBeNull] Action<AbpApplicationCreationOptions> optionsAction)&#123;    // 1. 检查非空    Check.NotNull(startupModuleType, nameof(startupModuleType));    Check.NotNull(services, nameof(services));    // 2. 把开始的module类型赋值    StartupModuleType = startupModuleType;    Services = services;    services.TryAddObjectAccessor<IServiceProvider>();    var options = new AbpApplicationCreationOptions(services);    optionsAction?.Invoke(options);    ApplicationName = options.ApplicationName;    // 这里把自己注册为这几种类型了    services.AddSingleton<IAbpApplication>(this);    services.AddSingleton<IApplicationNameAccessor>(this);    services.AddSingleton<IModuleContainer>(this);    // 这个是添加了AddOptions AddLogging AddLocalization    services.AddCoreServices();    // 这个方法干了很多事情, 下面详细看看    services.AddCoreAbpServices(this, options);    // 这里就是把个个继承了AbpModule的class都加载好了,并且是经过拓扑排序的    Modules = LoadModules(services, options);    // 这里就是执行AbpModule的ConfigureServices方法的地方了,这个判断是为了避免重复执行的    if (!options.SkipConfigureServices)    &#123;        ConfigureServices();    &#125;&#125;</code></pre><p>下面来看看<code>AddCoreAbpServices</code>方法</p><pre class=" language-c#"><code class="language-c#">internal static void AddCoreAbpServices(this IServiceCollection services,    IAbpApplication abpApplication,    AbpApplicationCreationOptions applicationCreationOptions)&#123;    // 这几个都是用来加载AbpModule用的    var moduleLoader = new ModuleLoader();    var assemblyFinder = new AssemblyFinder(abpApplication);    var typeFinder = new TypeFinder(assemblyFinder);    if (!services.IsAdded<IConfiguration>())    &#123;        services.ReplaceConfiguration(            ConfigurationHelper.BuildConfiguration(                applicationCreationOptions.Configuration            )        );    &#125;    services.TryAddSingleton<IModuleLoader>(moduleLoader);    services.TryAddSingleton<IAssemblyFinder>(assemblyFinder);    services.TryAddSingleton<ITypeFinder>(typeFinder);    services.TryAddSingleton<IInitLoggerFactory>(new DefaultInitLoggerFactory());    services.AddAssemblyOf<IAbpApplication>();    services.AddTransient(typeof(ISimpleStateCheckerManager<>), typeof(SimpleStateCheckerManager<>));    //这里实际是把继承了OnPreApplicationInitialization,OnApplicationInitialization,OnPostApplicationInitialization,OnApplicationShutdown 的几个实现类型加入到AbpModuleLifecycleOptions中的集合中了,后面会用到    services.Configure<AbpModuleLifecycleOptions>(options =>    &#123;        options.Contributors.Add<OnPreApplicationInitializationModuleLifecycleContributor>();        options.Contributors.Add<OnApplicationInitializationModuleLifecycleContributor>();        options.Contributors.Add<OnPostApplicationInitializationModuleLifecycleContributor>();        options.Contributors.Add<OnApplicationShutdownModuleLifecycleContributor>();    &#125;);&#125;</code></pre><p>然后讲下<code>LoadModules</code>这里干了啥,这里调用了<code>IModuleLoader</code>这个服务的<code>LoadModules</code>方法,可以看到,上面已经注册了<code>ModuleLoader</code>这个实现类,这里的代码有点多,但其实干的事情就是把继承了AbpModule的class实例化,然后设置每个Module的依赖, 在每个模块中我们都是使用了那个<code>DependsOn</code>特性来加载需要用到的类型,这其中涉及到了类的依赖,这里就是依次把类型加载,详细看注释</p><pre class=" language-c#"><code class="language-c#">public class ModuleLoader : IModuleLoader&#123;    public IAbpModuleDescriptor[] LoadModules(        IServiceCollection services,        Type startupModuleType,        PlugInSourceList plugInSources)    &#123;        Check.NotNull(services, nameof(services));        Check.NotNull(startupModuleType, nameof(startupModuleType));        Check.NotNull(plugInSources, nameof(plugInSources));        // 获取类型描述        var modules = GetDescriptors(services, startupModuleType, plugInSources);        // 然后给每个Module设置它的依赖, 例如说a依赖b,c,那么这里就是把b,c添加到a的Descriptor的Dependency集合中        modules = SortByDependency(modules, startupModuleType);        return modules.ToArray();    &#125;    private List<IAbpModuleDescriptor> GetDescriptors(        IServiceCollection services,        Type startupModuleType,        PlugInSourceList plugInSources)    &#123;        var modules = new List<AbpModuleDescriptor>();        FillModules(modules, services, startupModuleType, plugInSources);        SetDependencies(modules);        return modules.Cast<IAbpModuleDescriptor>().ToList();    &#125;    protected virtual void FillModules(        List<AbpModuleDescriptor> modules,        IServiceCollection services,        Type startupModuleType,        PlugInSourceList plugInSources)    &#123;        var logger = services.GetInitLogger<AbpApplicationBase>();        /*            AbpModuleHelper.FindAllModuleTypes这里是使用了拓扑排序,从开始类型开始,一路查找其依赖,递归获取依赖的依赖,可以说就是把所有的AbpModule都获取到了        */        //All modules starting from the startup module        foreach (var moduleType in AbpModuleHelper.FindAllModuleTypes(startupModuleType, logger))        &#123;            modules.Add(CreateModuleDescriptor(services, moduleType));        &#125;        //Plugin modules        foreach (var moduleType in plugInSources.GetAllModules(logger))        &#123;            if (modules.Any(m => m.Type == moduleType))            &#123;                continue;            &#125;            modules.Add(CreateModuleDescriptor(services, moduleType, isLoadedAsPlugIn: true));        &#125;    &#125;    protected virtual void SetDependencies(List<AbpModuleDescriptor> modules)    &#123;        foreach (var module in modules)        &#123;            SetDependencies(modules, module);        &#125;    &#125;    protected virtual List<IAbpModuleDescriptor> SortByDependency(List<IAbpModuleDescriptor> modules, Type startupModuleType)    &#123;        var sortedModules = modules.SortByDependencies(m => m.Dependencies);        sortedModules.MoveItem(m => m.Type == startupModuleType, modules.Count - 1);        return sortedModules;    &#125;    protected virtual AbpModuleDescriptor CreateModuleDescriptor(IServiceCollection services, Type moduleType, bool isLoadedAsPlugIn = false)    &#123;        return new AbpModuleDescriptor(moduleType, CreateAndRegisterModule(services, moduleType), isLoadedAsPlugIn);    &#125;    protected virtual IAbpModule CreateAndRegisterModule(IServiceCollection services, Type moduleType)    &#123;        // 这里new了,使用了Activator.CreateInstance来创建的        var module = (IAbpModule)Activator.CreateInstance(moduleType);        services.AddSingleton(moduleType, module);        return module;    &#125;    protected virtual void SetDependencies(List<AbpModuleDescriptor> modules, AbpModuleDescriptor module)    &#123;        foreach (var dependedModuleType in AbpModuleHelper.FindDependedModuleTypes(module.Type))        &#123;            var dependedModule = modules.FirstOrDefault(m => m.Type == dependedModuleType);            if (dependedModule == null)            &#123;                throw new AbpException("Could not find a depended module " + dependedModuleType.AssemblyQualifiedName + " for " + module.Type.AssemblyQualifiedName);            &#125;            module.AddDependency(dependedModule);        &#125;    &#125;&#125;</code></pre><p>之后<code>Module</code>都加载好了,就回到了<code>AbpApplicationBase</code>的构造函数,继续调用<code>ConfigureServices</code>方法了, 这里很好理解,就是按顺序执行<code>PreConfigureServices</code>,<code>ConfigureServices</code>,<code>PostConfigureServices</code>3个方法</p><pre class=" language-c#"><code class="language-c#">public virtual void ConfigureServices()&#123;    CheckMultipleConfigureServices();    var context = new ServiceConfigurationContext(Services);    Services.AddSingleton(context);    foreach (var module in Modules)    &#123;        if (module.Instance is AbpModule abpModule)        &#123;            abpModule.ServiceConfigurationContext = context;        &#125;    &#125;    //PreConfigureServices    foreach (var module in Modules.Where(m => m.Instance is IPreConfigureServices))    &#123;        try        &#123;            ((IPreConfigureServices)module.Instance).PreConfigureServices(context);        &#125;        catch (Exception ex)        &#123;            throw new AbpInitializationException($"An error occurred during &#123;nameof(IPreConfigureServices.PreConfigureServices)&#125; phase of the module &#123;module.Type.AssemblyQualifiedName&#125;. See the inner exception for details.", ex);        &#125;    &#125;    var assemblies = new HashSet<Assembly>();    //ConfigureServices    foreach (var module in Modules)    &#123;        if (module.Instance is AbpModule abpModule)        &#123;            if (!abpModule.SkipAutoServiceRegistration)            &#123;                var assembly = module.Type.Assembly;                if (!assemblies.Contains(assembly))                &#123;                    Services.AddAssembly(assembly);                    assemblies.Add(assembly);                &#125;            &#125;        &#125;        try        &#123;            module.Instance.ConfigureServices(context);        &#125;        catch (Exception ex)        &#123;            throw new AbpInitializationException($"An error occurred during &#123;nameof(IAbpModule.ConfigureServices)&#125; phase of the module &#123;module.Type.AssemblyQualifiedName&#125;. See the inner exception for details.", ex);        &#125;    &#125;    //PostConfigureServices    foreach (var module in Modules.Where(m => m.Instance is IPostConfigureServices))    &#123;        try        &#123;            ((IPostConfigureServices)module.Instance).PostConfigureServices(context);        &#125;        catch (Exception ex)        &#123;            throw new AbpInitializationException($"An error occurred during &#123;nameof(IPostConfigureServices.PostConfigureServices)&#125; phase of the module &#123;module.Type.AssemblyQualifiedName&#125;. See the inner exception for details.", ex);        &#125;    &#125;    foreach (var module in Modules)    &#123;        if (module.Instance is AbpModule abpModule)        &#123;            abpModule.ServiceConfigurationContext = null;        &#125;    &#125;    _configuredServices = true;&#125;</code></pre><p>其中执行<code>ConfigureServices</code>的时候我特别提一下,abp是如何知道,你这个服务的暴露类型的呢?<br>可以看到,注入使用了这个方法<code>Services.AddAssembly</code>,一路f12,发现最后实际执行在<code>DefaultConventionalRegistrar</code>这个类中的<code>AddType</code>方法</p><pre class=" language-c#"><code class="language-c#">public override void AddType(IServiceCollection services, Type type)&#123;    if (IsConventionalRegistrationDisabled(type))    &#123;        return;    &#125;    var dependencyAttribute = GetDependencyAttributeOrNull(type);    // 获取生命周期 ITransientDependency ISingletonDependency IScopedDependency    var lifeTime = GetLifeTimeOrNull(type, dependencyAttribute);    if (lifeTime == null)    &#123;        return;    &#125;    /*        这个方法特地提一下,是获取暴露特性的private static readonly ExposeServicesAttribute DefaultExposeServicesAttribute =new ExposeServicesAttribute&#123;    IncludeDefaults = true,    IncludeSelf = true&#125;;public static List<Type> GetExposedServices(Type type)&#123;    return type        .GetCustomAttributes(true)        .OfType<IExposedServiceTypesProvider>()        .DefaultIfEmpty(DefaultExposeServicesAttribute)        .SelectMany(p => p.GetExposedServiceTypes(type))        .Distinct()        .ToList();&#125;这里充分地使用了linq,可能看有点懵,它的意思是,获取类型中IExposedServiceTypesProvider特性,DefaultIfEmpty是如果没找到这个给特性,那就用这个默认的特性DefaultExposeServicesAttribute,GetExposedServiceTypes是获取这个类型上的接口,IncludeSelf的话,也会把自己获取到,假如 接口b继承接口a, class c 继承了 接口b,那么这里会获取到 [a,b,c]这么一个集合    */    var exposedServiceTypes = GetExposedServiceTypes(type);    // 这里我也不太理解    TriggerServiceExposing(services, type, exposedServiceTypes);    //从这里可以看到,abp是把对应的暴露类型全都一口气注入了,可能有些类型不是你想暴露的,最好还是使用ExposeServicesAttribute标记要暴露的类型    foreach (var exposedServiceType in exposedServiceTypes)    &#123;        var serviceDescriptor = CreateServiceDescriptor(            type,            exposedServiceType,            exposedServiceTypes,            lifeTime.Value        );        if (dependencyAttribute?.ReplaceServices == true)        &#123;            services.Replace(serviceDescriptor);        &#125;        else if (dependencyAttribute?.TryRegister == true)        &#123;            services.TryAdd(serviceDescriptor);        &#125;        else        &#123;            services.Add(serviceDescriptor);        &#125;    &#125;&#125;</code></pre><h3 id="Configure中的InitializeApplication"><a href="#Configure中的InitializeApplication" class="headerlink" title="Configure中的InitializeApplication"></a><code>Configure</code>中的<code>InitializeApplication</code></h3><p>好,<code>AddApplication</code>方法的调用我们就差不多了,接下来看看<code>app.InitializeApplication</code>方法</p><pre class=" language-c#"><code class="language-c#">public static void InitializeApplication([NotNull] this IApplicationBuilder app)&#123;    Check.NotNull(app, nameof(app));    // 还记得base的构造函数注册了个空的,现在就赋值了    app.ApplicationServices.GetRequiredService<ObjectAccessor<IApplicationBuilder>>().Value = app;    // 这个就是一开始提到的    var application = app.ApplicationServices.GetRequiredService<IAbpApplicationWithExternalServiceProvider>();    // asp.net core 自带的生命周期    var applicationLifetime = app.ApplicationServices.GetRequiredService<IHostApplicationLifetime>();    //注册Shutdown事情    applicationLifetime.ApplicationStopping.Register(() =>    &#123;        application.Shutdown();    &#125;);    //注册Dispose事情    applicationLifetime.ApplicationStopped.Register(() =>    &#123;        application.Dispose();    &#125;);    // 初始化就在这里了,这个也是在base类中的    application.Initialize(app.ApplicationServices);    /*        最后会调用base中的        protected virtual void InitializeModules()        &#123;            using (var scope = ServiceProvider.CreateScope())            &#123;                WriteInitLogs(scope.ServiceProvider);                scope.ServiceProvider                    .GetRequiredService<IModuleManager>()                    .InitializeModules(new ApplicationInitializationContext(scope.ServiceProvider));            &#125;        &#125;    */&#125;</code></pre><p>再看看<code>ModuleManager</code>中的<code>InitializeModules</code></p><pre class=" language-c#"><code class="language-c#">public ModuleManager(        IModuleContainer moduleContainer,        ILogger<ModuleManager> logger,        IOptions<AbpModuleLifecycleOptions> options,        IServiceProvider serviceProvider)&#123;    _moduleContainer = moduleContainer;    _logger = logger;    _lifecycleContributors = options.Value        .Contributors        .Select(serviceProvider.GetRequiredService)        .Cast<IModuleLifecycleContributor>()        .ToArray();&#125;public void InitializeModules(ApplicationInitializationContext context)&#123;    //AddCoreAbpServices方法中添加了继承了几个接口的类,就在这里用上了    foreach (var contributor in _lifecycleContributors)    &#123;        //_moduleContainer就是base类        foreach (var module in _moduleContainer.Modules)        &#123;            try            &#123;                contributor.Initialize(context, module.Instance);            &#125;            catch (Exception ex)            &#123;                throw new AbpInitializationException($"An error occurred during the initialize &#123;contributor.GetType().FullName&#125; phase of the module &#123;module.Type.AssemblyQualifiedName&#125;: &#123;ex.Message&#125;. See the inner exception for details.", ex);            &#125;        &#125;    &#125;    _logger.LogInformation("Initialized all ABP modules.");&#125;// 这里在看一个OnApplicationInitialization的实现类OnApplicationInitializationModuleLifecycleContributorpublic class OnApplicationInitializationModuleLifecycleContributor : ModuleLifecycleContributorBase&#123;    public async override Task InitializeAsync(ApplicationInitializationContext context, IAbpModule module)    &#123;        if (module is IOnApplicationInitialization onApplicationInitialization)        &#123;            await onApplicationInitialization.OnApplicationInitializationAsync(context);        &#125;    &#125;    public override void Initialize(ApplicationInitializationContext context, IAbpModule module)    &#123;        (module as IOnApplicationInitialization)?.OnApplicationInitialization(context);    &#125;&#125;</code></pre><p>也就是说, <code>OnPreApplicationInitialization</code>，<code>OnApplicationInitialization</code>、<code>OnPostApplicationInitialization</code>、<code>OnApplicationShutdown</code> 这几个接口的方法就在此时调用</p><p>传统的<code>Configure</code>中的其实就鞋在了<code>OnApplicationInitialization</code>中了, 而且应该只写在startmodule中</p><p>至此,整体的启动流程大致分析完了</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>所有的Modlue都是在<code>ConfigureServices</code>中注入,执行<code>PreConfigureServices</code>,<code>ConfigureServices</code>,<code>PostConfigureServices</code>这几个方法的<br>然后在<code>Configure</code>中执行剩下的几个方法,大体就是这样</p>]]></content>
      
      
      <categories>
          
          <category> abp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> abp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>asp.net core 应用部署在Nginx 子目录的探索</title>
      <link href="2022/08/27/study-notes-dotnetcore-2022-08-27-asp-net-core-ying-yong-bu-shu-zai-nginx-zi-mu-lu-de-tan-suo/"/>
      <url>2022/08/27/study-notes-dotnetcore-2022-08-27-asp-net-core-ying-yong-bu-shu-zai-nginx-zi-mu-lu-de-tan-suo/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>由于没有测试用的域名, 一个项目部署到了已有域名的子目录下, 用的<code>Nginx</code>反向代理, 访问链接是这样</p><blockquote><p><code>http://test.com/app</code></p></blockquote><p>然后导致的问题就是页面能访问到了,但是像 js 和 css 的引入全部都 404 了,因为这些文件都是这样引入的</p><blockquote><p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;~/lib/bootstrap/dist/css/bootstrap.min.css&quot; /&gt;</code></p></blockquote><p>假设现在的域名是<code>test.com</code>,那么现在文件的请求都是</p><blockquote><p><code>http://test.com/lib/bootstrap/dist/css/bootstrap.min.css</code></p></blockquote><p>直接全部 404 了,领导解决这个问题的方式很麻烦,他将所有的这些引用全部修改为了</p><blockquote><p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;@Model.Host/lib/bootstrap/dist/css/bootstrap.min.css&quot; /&gt;</code></p></blockquote><p>这个<code>Host</code>就是保存在配置的要使用的路径<code>http://test.com/lib</code></p><p>高情商: 这是一个很直接了当的修改方案,大幅提高工作量</p><p>低情商: Rubbish</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>先展示下最开始的<code>nginx</code>的配置</p><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">server</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  <span class="token keyword">listen</span> <span class="token number">53346</span><span class="token punctuation">;</span>  <span class="token keyword">server_name</span> localhost<span class="token punctuation">;</span>   <span class="token keyword">location</span> <span class="token operator">/</span>app<span class="token operator">/</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">proxy_pass</span>  <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">5243</span><span class="token operator">/</span><span class="token punctuation">;</span>    <span class="token keyword">proxy_http_version</span> <span class="token number">1.1</span><span class="token punctuation">;</span>    <span class="token keyword">proxy_set_header</span> Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>    <span class="token keyword">proxy_set_header</span> Connection keep<span class="token operator">-</span>alive<span class="token punctuation">;</span>    <span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span><span class="token punctuation">:</span><span class="token variable">$server_port</span><span class="token punctuation">;</span>    <span class="token keyword">proxy_cache_bypass</span> <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>    <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>    <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>Proto <span class="token variable">$scheme</span><span class="token punctuation">;</span>            <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span>50x<span class="token punctuation">.</span>html <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">root</span>   html<span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h3 id="第一个问题"><a href="#第一个问题" class="headerlink" title="第一个问题"></a>第一个问题</h3><p>加上子目录之后的路径访问会 404, 为什么呢? 很简单,因为加上子目录之后, 路由对不上呢, 比如你要访问 <code>/Home/Index</code>,但是实际访问却是<code>/app/Home/Index</code>,这样改是找不到路由的</p><blockquote><p>搜索一下之后发现, <code>asp.net core</code> 中的<code>PathBase</code>就是设计出来应对这种情况的,就是告诉应用, 我这个请求前面是有一段不算在路由里面的, 你找路由要先排除这个.在中间件开始的地方加上</p></blockquote><pre class=" language-c#"><code class="language-c#">app.UsePathBase(new PathString("/app"));</code></pre><h3 id="第二个问题"><a href="#第二个问题" class="headerlink" title="第二个问题"></a>第二个问题</h3><p>但是访问之后发现, 路由时找到了,但是 js 和 css 都是 404,看控制台发现,这里的请求并没有带上<code>/app</code>,而是直接访问了域名,所以还要调整下,在<code>nginx</code>那里要把<code>/app</code>路径传入进去</p><pre class=" language-Nginx"><code class="language-Nginx"># proxy_pass  http://localhost:5243/;proxy_pass  http://localhost:5243/app/;</code></pre><p>重启<code>nginx</code>之后,访问果然正确显示引用的 js 和 css 了,路径已经加上<code>/app</code>了</p><p>最后贴下完整的配置</p><h4 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h4><pre class=" language-nginx"><code class="language-nginx"> <span class="token keyword">server</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  <span class="token keyword">listen</span> <span class="token number">53346</span><span class="token punctuation">;</span>  <span class="token keyword">server_name</span> localhost<span class="token punctuation">;</span>   <span class="token keyword">location</span> <span class="token operator">/</span>app<span class="token operator">/</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>   <span class="token keyword">proxy_pass</span>  <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">5243</span><span class="token operator">/</span>app<span class="token operator">/</span><span class="token punctuation">;</span>   <span class="token keyword">proxy_http_version</span> <span class="token number">1.1</span><span class="token punctuation">;</span>   <span class="token keyword">proxy_set_header</span> Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>   <span class="token keyword">proxy_set_header</span> Connection keep<span class="token operator">-</span>alive<span class="token punctuation">;</span>   <span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span><span class="token punctuation">:</span><span class="token variable">$server_port</span><span class="token punctuation">;</span>   <span class="token keyword">proxy_cache_bypass</span> <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>   <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>   <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>Proto <span class="token variable">$scheme</span><span class="token punctuation">;</span>            <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span>50x<span class="token punctuation">.</span>html <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">root</span>   html<span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h4 id="c-部分"><a href="#c-部分" class="headerlink" title="c# 部分"></a>c# 部分</h4><pre class=" language-c#"><code class="language-c#">var builder = WebApplication.CreateBuilder(args);// Add services to the container.builder.Services.AddRazorPages();var app = builder.Build();// Configure the HTTP request pipeline.app.UsePathBase(new PathString("/app"));if (!app.Environment.IsDevelopment())&#123;    app.UseExceptionHandler("/Error");&#125;app.UseStaticFiles();app.UseRouting();app.UseAuthorization();app.MapRazorPages();app.Run();</code></pre><h2 id="要注意的点"><a href="#要注意的点" class="headerlink" title="要注意的点"></a>要注意的点</h2><ul><li>链接</li></ul><p>如果你使用了 <code>asp-action</code> <code>asp-router</code> <code>asp-controller</code> 等<code>TagHelper</code>去生成链接的话, 那就会带上子目录的路径的, 如果你直接写一个 a 标签,那这个在代理之后生成的是不会有子目录,所以涉及这个最好使用<code>tagheler</code>来生成.</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">asp-page</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/Privacy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>使用TagHelper生成的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--生成是这样的&lt;a href="/app/Privacy">使用TagHelper生成的&lt;/a>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/Private<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>手动写链接的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--生成如下&lt;a href="/Private">手动写链接的&lt;/a>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>~/Private<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>手动写链接的,但是使用了~<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--&lt;a href="/app/Private">手动写链接的,但是使用了~&lt;/a>--></span></code></pre><p>建议使用 1,3,不要用 2</p><ul><li>请求</li></ul><p>那 js 请求的话,也是同样道理的,建议使用<code>axios</code>来发送请求,可以轻松的设置<code>baseURL</code>来配置子目录,</p><p>说到这个,不得不提一嘴同事写的解决子目录<code>ajax</code>请求的方法,直接替换了<code>jQuery</code>的发送请求方法, 保存原本的方法在临时变量中, 然后修改请求的 url, 再用保存在临时变量中的方法去发送真正的请求, 不是说不行, 而是<code>jQuery</code>没有这种对应基础配置,只能用这种迂回的方式, 不太好用, 现在<code>jQuery</code>是真的落后了</p><ul><li>其他资源(音频视频)</li></ul><p>这里有两种引入方式,会生成不一样的结果</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/img/001.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">asp-append-version</span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--&lt;img src="/img/001.jpg?v=LWv2Dubq1qrHEyLduWAtYgtEtCVlddyQv-omxaAMgiI">--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>~/img/001.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">asp-append-version</span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--&lt;img src="/app/img/001.jpg?v=LWv2Dubq1qrHEyLduWAtYgtEtCVlddyQv-omxaAMgiI">--></span></code></pre><p>使用后者可以自动添加子目录,推荐使用后者</p><p>另外探究下源码这里是怎么处理<code>PathBase</code>的,首先看看<code>taghelper</code>是怎么处理的,一路顺着源码走下去发现以下调用</p><p><a href="https://github.com/dotnet/aspnetcore/blob/51ccce6d743dddf995b3661f07b0e1990b68dc7d/src/Mvc/Mvc.TagHelpers/src/AnchorTagHelper.cs"><code>AnchorTagHelper</code></a><br>这里无论使用使用路由,action,还是page都是使用了<code>UrlHelperFactory</code>类型的方法,接下看看这个</p><pre class=" language-c#"><code class="language-c#">public override void Process(TagHelperContext context, TagHelperOutput output)&#123;    // 省略了一部分验证    var routeLink = Route != null;    var actionLink = Controller != null || Action != null;    var pageLink = Page != null || PageHandler != null;    if ((routeLink && actionLink) || (routeLink && pageLink) || (actionLink && pageLink))    &#123;        var message = string.Join(            Environment.NewLine,            Resources.FormatCannotDetermineAttributeFor(Href, "<a>"),            RouteAttributeName,            ControllerAttributeName + ", " + ActionAttributeName,            PageAttributeName + ", " + PageHandlerAttributeName);        throw new InvalidOperationException(message);    &#125;    RouteValueDictionary routeValues = null;    if (_routeValues != null && _routeValues.Count > 0)    &#123;        routeValues = new RouteValueDictionary(_routeValues);    &#125;    if (Area != null)    &#123;        // Unconditionally replace any value from asp-route-area.        if (routeValues == null)        &#123;            routeValues = new RouteValueDictionary();        &#125;        routeValues["area"] = Area;    &#125;    TagBuilder tagBuilder;    if (pageLink)    &#123;        tagBuilder = Generator.GeneratePageLink(            ViewContext,            linkText: string.Empty,            pageName: Page,            pageHandler: PageHandler,            protocol: Protocol,            hostname: Host,            fragment: Fragment,            routeValues: routeValues,            htmlAttributes: null);    &#125;    else if (routeLink)    &#123;        tagBuilder = Generator.GenerateRouteLink(            ViewContext,            linkText: string.Empty,            routeName: Route,            protocol: Protocol,            hostName: Host,            fragment: Fragment,            routeValues: routeValues,            htmlAttributes: null);    &#125;    else    &#123;        tagBuilder = Generator.GenerateActionLink(            ViewContext,            linkText: string.Empty,            actionName: Action,            controllerName: Controller,            protocol: Protocol,            hostname: Host,            fragment: Fragment,            routeValues: routeValues,            htmlAttributes: null);    &#125;    output.MergeAttributes(tagBuilder);&#125;</code></pre><p><a href="https://github.com/dotnet/aspnetcore/tree/2ae595a71b202f2f957f2909e0b6b99dd563c0db/src/Mvc/Mvc.Core/src/Routing/UrlHelperFactory.cs"><code>UrlHelperFactory</code></a><br>然后这里有个分支,有两个实现了<code>IUrlHelper</code>的类型,一个是<code>EndpointRoutingUrlHelper</code>,另外一个是<code>UrlHelper</code>,由于没有调试,只能两个都看看,</p><pre class=" language-c#"><code class="language-c#">public IUrlHelper GetUrlHelper(ActionContext context)&#123;    // 省略了一部分验证    var endpoint = httpContext.GetEndpoint();    if (endpoint != null)    &#123;        var services = httpContext.RequestServices;        var linkGenerator = services.GetRequiredService<LinkGenerator>();        var logger = services.GetRequiredService<ILogger<EndpointRoutingUrlHelper>>();        urlHelper = new EndpointRoutingUrlHelper(            context,            linkGenerator,            logger);    &#125;    else    &#123;        urlHelper = new UrlHelper(context);    &#125;    httpContext.Items[typeof(IUrlHelper)] = urlHelper;    return urlHelper;&#125;</code></pre><p>最后看到其实两个<code>IUrlHelper</code>都是使用了<code>UrlHelperBase</code>父类中的<code>GenerateUrl</code>方法,然后这两个方法都会调用到<code>AppendPathAndFragment</code>这个方法,</p><pre class=" language-c#"><code class="language-c#">internal static void AppendPathAndFragment(StringBuilder builder, PathString pathBase, string virtualPath, string? fragment)&#123;    if (!pathBase.HasValue)    &#123;        if (virtualPath.Length == 0)        &#123;            builder.Append('/');        &#125;        else        &#123;            if (!virtualPath.StartsWith('/'))            &#123;                builder.Append('/');            &#125;            builder.Append(virtualPath);        &#125;    &#125;    else    &#123;        if (virtualPath.Length == 0)        &#123;            builder.Append(pathBase.Value);        &#125;        else        &#123;            builder.Append(pathBase.Value);            if (pathBase.Value.EndsWith("/", StringComparison.Ordinal))            &#123;                builder.Length--;            &#125;            if (!virtualPath.StartsWith("/", StringComparison.Ordinal))            &#123;                builder.Append('/');            &#125;            builder.Append(virtualPath);        &#125;    &#125;    if (!string.IsNullOrEmpty(fragment))    &#123;        builder.Append('#').Append(fragment);    &#125;&#125;</code></pre><p>至此,<code>TagHelper</code>是怎么处理<code>PathBase</code>已完全解开秘密.</p><p>还有个疑问,为什么用<code>~</code>这个符号开始的链接也能正确显示?</p><p>大概猜测是在<code>UrlHelperBase</code>的<code>TryFastGenerateUrl</code>中,还不是很确定</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过<code>nginx</code>的配置就完全可以解决部署在子目录中的问题, 部署的问题就应该交给反向代理方处理而不是硬改代码,代码应尽量少改才对.</p><p>还是就是我上面是测试用,所以子目录在代码中是写死, 实际应用中应该写到配置中可以灵活应用</p><p>另外就是要注意 nginx 中的代理和转发最后都要有<code>/</code>,不然点击链接会出现跳转 404</p><blockquote><p>另外圣杰大佬那篇非常详细,十分值得收藏!</p></blockquote><p>参考:</p><ol><li><p><a href="https://www.cnblogs.com/xwgli/p/12918904.html">使用 nginx 配置子路径访问 asp.net core 网站时，对 view 中路径生成的处理 - 不是豆豆的旮旯</a></p></li><li><p><a href="https://www.cnblogs.com/sheng-jie/p/Deploy-ASP-NET-CORE-WITH-REVERSE-PROXY.html">ASP.NET Core 反向代理部署知多少 - 圣杰</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> aspnetcore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aspnetcore </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非递归实现广度优先遍历和深度优先遍历</title>
      <link href="2022/07/07/study-notes-algorithm-2022-07-07-fei-di-gui-shi-xian-guang-du-you-xian-bian-li-he-shen-du-you-xian-bian-li/"/>
      <url>2022/07/07/study-notes-algorithm-2022-07-07-fei-di-gui-shi-xian-guang-du-you-xian-bian-li-he-shen-du-you-xian-bian-li/</url>
      
        <content type="html"><![CDATA[<p>记录下学习这两个遍历的过程</p><h2 id="什么是广度优先遍历和深度优先遍历"><a href="#什么是广度优先遍历和深度优先遍历" class="headerlink" title="什么是广度优先遍历和深度优先遍历"></a>什么是广度优先遍历和深度优先遍历</h2><p>来源百度百科</p><blockquote><p>BFS，其英文全称是Breadth First Search。 BFS并不使用经验法则算法。从算法的观点，所有因为展开节点而得到的子节点都会被加进一个先进先出的队列中。一般的实验里，其邻居节点尚未被检验过的节点会被放置在一个被称为 open 的容器中（例如队列或是链表），而被检验过的节点则被放置在被称为 closed 的容器中。（open-closed表）.<br>DFS 没找到合适的说明,请自行搜索</p></blockquote><p>先列出代码,其他的以后再补</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 广度优先搜索 * @param &amp;#123;object&amp;#125; obj 要遍历的对象 * @param &amp;#123;string&amp;#125; filterKey 要筛选的key * @returns &amp;#123;array&amp;#125;  */</span><span class="token keyword">function</span> <span class="token function">breadthFirstSearch</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> filterKey<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//声明节点</span>    <span class="token keyword">const</span> nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断终止条件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//声明一个队列,来存储要处理的节点</span>        <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>k <span class="token operator">=</span><span class="token operator">></span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> k<span class="token punctuation">,</span> value<span class="token punctuation">:</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//从队列头中取出要处理的节点</span>            <span class="token keyword">const</span> item <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//加入到nodes中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>filterKey<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                filterKey <span class="token operator">===</span> item<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> nodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                nodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//再处理所有子节点</span>            <span class="token keyword">const</span> childrenKeys <span class="token operator">=</span> <span class="token keyword">typeof</span> item<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">||</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> childrenKeys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//把子节点添加到队列中</span>                <span class="token keyword">const</span> childKey <span class="token operator">=</span> childrenKeys<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> childKey<span class="token punctuation">,</span> value<span class="token punctuation">:</span> item<span class="token punctuation">.</span>value<span class="token punctuation">[</span>childKey<span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> nodes<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 深度优先遍历 * @param &amp;#123;object&amp;#125; obj  * @param &amp;#123;string&amp;#125; filterKey 要筛选的key * @returns  */</span><span class="token keyword">function</span> <span class="token function">depthFirstSearch</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> filterKey<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用堆栈存储</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> keys<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> index<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> key <span class="token operator">=</span> keys<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> key<span class="token punctuation">,</span> value<span class="token punctuation">:</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> item <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>filterKey<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                filterKey <span class="token operator">===</span> item<span class="token punctuation">.</span>name <span class="token operator">&amp;&amp;</span> nodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                nodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> childrenKeys <span class="token operator">=</span> <span class="token keyword">typeof</span> item<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">||</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> childrenKeys<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> index<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> childKey <span class="token operator">=</span> childrenKeys<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> childKey<span class="token punctuation">,</span> value<span class="token punctuation">:</span> item<span class="token punctuation">.</span>value<span class="token punctuation">[</span>childKey<span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> nodes<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这里我是用来遍历不知深浅的对象的,所以里面可能跟平时看到的不太一样</p><p>这里我总结下就是</p><ul><li>广度用队列,把每一层的节点按顺序加入到队列中,然后while循环处理</li><li>深度用栈, 把一条路下的节点倒叙压栈, 然后while循环处理, 这样就不用递归</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dfs </tag>
            
            <tag> bfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022-7-7 手动封装一个select</title>
      <link href="2022/07/07/study-notes-others-2022-07-07-shou-dong-feng-zhuang-yi-ge-select/"/>
      <url>2022/07/07/study-notes-others-2022-07-07-shou-dong-feng-zhuang-yi-ge-select/</url>
      
        <content type="html"><![CDATA[<h2 id="手动封装一个select"><a href="#手动封装一个select" class="headerlink" title="手动封装一个select"></a>手动封装一个select</h2><blockquote><p>Q: 为什么要手动封装?</p></blockquote><ul><li>用户提出需求是可以根据select中值的不同显示不同的样式, 比如选 true 显示绿色, 选 false 显示红色,一开始我以为能用css自定义的,但是查阅mdn之后发现像select这种高级控件是不支持的</li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Forms/Styling_web_forms">为什么使用 CSS 美化表单组件这么困难?</a></p><p>所以我打算手动封装一个, 思路来源于<a href="https://segmentfault.com/a/1190000017327739">“小小蚊子”</a>,非常感谢!</p><p>由于我这里使用vue, 那正好封装成一个vue组件,直接上代码</p><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'c-select'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    model<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        prop<span class="token punctuation">:</span> <span class="token string">'selectedValue'</span><span class="token punctuation">,</span>        event<span class="token punctuation">:</span> <span class="token string">'change'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        placeholder<span class="token punctuation">:</span> String<span class="token punctuation">,</span>        selectedValue<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>        optionType<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            type<span class="token punctuation">:</span> Number <span class="token operator">|</span> String<span class="token punctuation">,</span>            <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        disabled<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            type<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>            <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            isDown<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> key<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token string">'通过'</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'success'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> key<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token string">'失败'</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'fail'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            options1<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> key<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'defualt_true'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> key<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token string">'否'</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token punctuation">:</span> <span class="token string">'defualt_false'</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            selectedLabel<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            selectedClass<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">selectMainClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>disabled<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>isDown <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isDown<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token function">itemClick</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>isDown <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isDown<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>selectedLabel <span class="token operator">=</span> item<span class="token punctuation">.</span>label<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>selectedClass <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token function">selectValueChange</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dynamicOptions<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>f <span class="token operator">=</span><span class="token operator">></span> f<span class="token punctuation">.</span>value <span class="token operator">===</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`[CustomSelect Event] selectedValue is $&amp;#123;value&amp;#125;`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>selectedLabel <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>label<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>selectedClass <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">dynamicOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>optionType<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options1<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token function">disabledClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>disabled <span class="token operator">?</span> <span class="token string">'is-disabled'</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    watch<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">selectedValue</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectValueChange</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectValueChange</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>selectedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div style="position: relative;">    &lt;div class="c-select" @click="selectMainClick">        &lt;div :class="['c-select__input', selectedClass, disabledClass]">            &lt;span>                &amp;#123;&amp;#123;selectedLabel || placeholder&amp;#125;&amp;#125;                &lt;span class="c-select__input__suffix">                    &lt;i class="fa fa-angle-down" aria-hidden="true">&lt;/i>                &lt;/span>            &lt;/span>        &lt;/div>    &lt;/div>    &lt;ul class="c-select-dropdown__list" :style="&amp;#123;'display': isDown ? 'block': 'none'&amp;#125;">        &lt;li :class="['c-select-dropdown__item', item.class]" v-for="item in dynamicOptions" :key="item.key" @click.prevent.stop="itemClick(item)">&amp;#123;&amp;#123;item.label&amp;#125;&amp;#125;&lt;/li>    &lt;/ul>&lt;/div>`</span></span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>css 部分参考了element-ui的</p><pre class=" language-CSS"><code class="language-CSS">:root &#123;    --success-color: green;    --fail-color: red;    --black-color: black;    --select-bg: rgba(49, 104, 255, 0.67);    --line-height: 34px;&#125;.c-select &#123;    width: 100%;    cursor: pointer;&#125;.c-select__input &#123;    position: relative;    width: 100%;    height: var(--line-height);    line-height: var(--line-height);    border-radius: 4px;    background: #fff;    color: #999;    font-size: larger;    font-weight: bolder;&#125;.c-select__input__suffix &#123;    position: absolute;    height: 100%;    right: 5px;    top: 0;    text-align: center;    color: #555;    transition: all .3s;    pointer-events: none;&#125;.c-select__input__suffix>i &#123;    line-height: var(--line-height);&#125;.c-select .c-select__input.is-disabled &#123;    cursor: not-allowed;&#125;.c-select__input.is-disabled &#123;    cursor: not-allowed;    background-color: #eee;    opacity: 1;&#125;.c-select-dropdown__list &#123;    position: absolute;    display: none;    margin-top: 2px;    width: 100%;    border: 1px solid #ccc;    border-radius: 4px;    background: #fff;    z-index: 30000;&#125;.c-select-dropdown__item &#123;    height: var(--line-height);    line-height: var(--line-height);    font-size: 14px;    color: #666;&#125;.c-select-dropdown__item:hover &#123;    color: #fff;    background: var(--select-bg);&#125;/* 自定义选项样式*//*测试结果:是*/.c-select-dropdown__item.success &#123;    color: var(--success-color);&#125;.c-select__input.success &#123;    color: var(--success-color);&#125;/*测试结果:否*/.c-select__input.fail &#123;    color: var(--fail-color);&#125;.c-select-dropdown__item.fail &#123;    color: var(--fail-color);&#125;/*问题点:是*/.c-select-dropdown__item.defualt_true &#123;    font-size: 14px;    font-weight: initial;    color: var(--fail-color);&#125;.c-select__input.defualt_true &#123;    font-size: 14px;    font-weight: normal;    color: var(--fail-color);&#125;/*问题点:否*/.c-select-dropdown__item.defualt_false &#123;    font-size: 14px;    font-weight: normal;    color: var(--black-color);&#125;.c-select__input.defualt_false &#123;    font-size: 14px;    font-weight: normal;    color: var(--black-color);&#125;</code></pre><p>使用</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>c-select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>c-select</span><span class="token punctuation">></span></span></code></pre><p>实现的关键点</p><ol><li>使用了v-model绑定, 在组件里面使用model选项修改默认的v-model行为.</li><li>当子元素是绝对定位的时候,宽度是会跟相对定位的父元素保持一致,如果父元素没有相对定位的,那就是body的宽度了,所以你能看到我在根节点加了相对定位</li></ol><p>不过这个东西还不算成熟,还有很多缺陷</p><ul><li>客户的需求没有更复杂,所以就把数据源都写里面了,没有用prop,更好应该使用prop的</li><li>就是这里面有个问题就是点击了弹出下拉选择项之后,你点其他位置,非组件元素,下拉选择是不能主动消失的,和原生组件的行为不一样,这个暂时还没有好想法去实现</li><li>就是下拉生成的位置其实不要在那里,放到body下面可能会更好,不懂为什么,看人家ele是这样干,我想应该有他的道理</li></ul><p>2022-08-26更新,问了下朋友之后采用监听全局的点击来解决第二个问题点</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script setup<span class="token operator">></span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> ref<span class="token punctuation">,</span> onMounted <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> show <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> popper <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> btnClick <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//点击下拉列表的选项之后就隐藏下拉</span>  show<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">!</span>show<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">const</span> globalClick <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  msg<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"global know you click"</span><span class="token punctuation">;</span>  num<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//判断点击事件的触发是否在下拉列表中,如果不是,那就隐藏下拉列表</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> s <span class="token operator">===</span> popper<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    show<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//监听全局的点击事件,注意是捕获阶段,第三个参数根据mdn的推荐是用一个对象来传参,虽然很多旧文章都是直接使用一个true,但是按mdn的来使用比较好</span>  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> globalClick<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    capture<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> msg <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  <span class="token operator">&lt;</span>h4<span class="token operator">></span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> num <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>stop<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">"btnClick"</span><span class="token operator">></span>click me<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">"popper"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"popper"</span> v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"show"</span><span class="token operator">></span>look at me<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>style scope<span class="token operator">></span><span class="token punctuation">.</span>popper <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  width<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  height<span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>  background<span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  border<span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>第三点的问题, vue3有个<code>Teleport</code>组件可以做这种传送的,如果要放到body下,使用这个应该会简单点</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window powershell install softword</title>
      <link href="2022/06/25/scripts-notes-2022-06-25-window-powershell-install-softword/"/>
      <url>2022/06/25/scripts-notes-2022-06-25-window-powershell-install-softword/</url>
      
        <content type="html"><![CDATA[<h2 id="使用winget来安装应用"><a href="#使用winget来安装应用" class="headerlink" title="使用winget来安装应用"></a>使用winget来安装应用</h2><p>我用的powershell是 7.2.4 ,正好可以在今天升级,搭配 window 终端来使用更佳</p><p>先看看 <code>winget</code>都有什么功能 </p><ul><li><code>winget</code></li></ul><pre class=" language-shell"><code class="language-shell">Windows 程序包管理器 v1.2.10941版权所有 (C) Microsoft Corporation。保留所有权利。WinGet 命令行实用工具可从命令行安装应用程序和其他程序包。使用情况: winget [<命令>] [<选项>]下列命令有效:  install    安装给定的程序包  show       显示包的相关信息  source     管理程序包的来源  search     查找并显示程序包的基本信息  list       显示已安装的程序包  upgrade    升级给定的程序包  uninstall  卸载给定的程序包  hash       哈希安装程序的帮助程序  validate   验证清单文件  settings   打开设置或设置管理员设置  features   显示实验性功能的状态  export     导出已安装程序包的列表  import     安装文件中的所有程序包如需特定命令的更多详细信息，请向其传递帮助参数。 [-?]下列选项可用：  -v,--version  显示工具的版本  --info        显示工具的常规信息可在此找到更多帮助： https://aka.ms/winget-command-help</code></pre><p>提示已经很明白了,好,那么我们先来 搜索下我们要安装的包 <code>powershell</code> ,要小心这里可能也有其他人上传包名一样的,要用id来下载</p><ul><li><code>winget search powershell</code></li></ul><pre class=" language-shell"><code class="language-shell">名称                            ID                                          版本         匹配            源----------------------------------------------------------------------------------------------------------------PowerShell                      9MZ1SNWT0N5D                                Unknown                      msstorePowerShell Preview              9P95ZZKTNRN4                                Unknown                      msstorePowerShell Conference Asia 2015 9WZDNCRD37D8                                Unknown                      msstorePowerShell                      Microsoft.PowerShell                        7.2.5.0                      wingetWindows Terminal Preview        Microsoft.WindowsTerminal.Preview           1.14.1432.0  Tag: PowerShell wingetWindows Terminal                Microsoft.WindowsTerminal                   1.13.11431.0 Tag: powershell wingetPowerShell Preview              Microsoft.PowerShell.Preview                7.3.0.5      Tag: powershell wingetConEmu                          Maximus5.ConEmu                             11.220.4180  Tag: powershell wingetEasyConnect                     lstratman.easyconnect                       3.1.0.105    Tag: powershell wingetOh My Posh                      JanDeDobbeleer.OhMyPosh                     8.6.0        Tag: powershell wingetTfsCmdlets                      Igoravl.TfsCmdlets                          2.4.0.2768   Tag: powershell wingetelecterm                        electerm.electerm                           1.21.88      Tag: powershell wingetwol                             DarkfullDante.wol                           1.0.2        Tag: powershell wingetAutomatedLab                    AutomatedLab.AutomatedLab                   5.42.0       Tag: powershell wingetPowerShell Universal            IronmanSoftware.PowerShellUniversal         2.10.2                       wingetPowerShell Universal Desktop    IronmanSoftware.PowerShellUniversal.Desktop 2.10.2                       winget</code></pre><p>我们要使用 Id是 <code>Microsoft.PowerShell</code> 这个</p><ul><li><code>winget install Microsoft.PowerShell</code></li></ul><p>然后就可以自动下载软件了,省的自己去<code>GitHub</code>下载一次,因为我这里经常抽风,连不上</p>]]></content>
      
      
      
        <tags>
            
            <tag> winget </tag>
            
            <tag> powershell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享一个自动给aspnetcore mvc razorpage应用自动添加version的方案</title>
      <link href="2022/06/25/study-notes-dotnetcore-2022-06-25-fen-xiang-yi-ge-zi-dong-gei-aspnetcore-mvc-razorpage-ying-yong-zi-dong-tian-jia-version-de-fang-an/"/>
      <url>2022/06/25/study-notes-dotnetcore-2022-06-25-fen-xiang-yi-ge-zi-dong-gei-aspnetcore-mvc-razorpage-ying-yong-zi-dong-tian-jia-version-de-fang-an/</url>
      
        <content type="html"><![CDATA[<h2 id="分享一个自动给aspnetcore-mvc-razorpage应用自动添加version的方案"><a href="#分享一个自动给aspnetcore-mvc-razorpage应用自动添加version的方案" class="headerlink" title="分享一个自动给aspnetcore mvc razorpage应用自动添加version的方案"></a>分享一个自动给aspnetcore mvc razorpage应用自动添加version的方案</h2><p>使用<code>taghelper</code></p><p>直接上代码</p><pre class=" language-c#"><code class="language-c#">using System.Text.Encodings.Web;using Microsoft.AspNetCore.Mvc.Razor.TagHelpers;using Microsoft.AspNetCore.Mvc.Routing;using Microsoft.AspNetCore.Mvc.TagHelpers;using Microsoft.AspNetCore.Razor.TagHelpers;using Microsoft.AspNetCore.WebUtilities;namespace TagHelperDemo.TagHelpers;[HtmlTargetElement("script", Attributes = "src")][HtmlTargetElement("script", Attributes = _appendVersionAttributeName)]public class VersionTagHelper : UrlResolutionTagHelper&#123;    private const string SrcAttributeName = "src";    private const string _appendVersionAttributeName = "asp-append-version";    private const string _srcAttributeName = "src";    private const string _versionKey = "v";    private readonly IWebHostEnvironment _environment;    /// <summary>    /// Source of the image.    /// </summary>    /// <remarks>    /// Passed through to the generated HTML in all cases.    /// </remarks>    [HtmlAttributeName(_srcAttributeName)]    public string Src &#123; get; set; &#125;    /// <summary>    /// Value indicating if file version should be appended to the src urls.    /// </summary>    /// <remarks>    /// If <c>true</c> then a query string "v" with the encoded content of the file is added.    /// </remarks>    [HtmlAttributeName(_appendVersionAttributeName)]    public bool? AppendVersion &#123; get; set; &#125;    /// <inheritdoc />    //public override int Order => 1;    public VersionTagHelper(IUrlHelperFactory urlHelperFactory, HtmlEncoder htmlEncoder, IWebHostEnvironment environment) : base(urlHelperFactory, htmlEncoder)    &#123;        _environment = environment;    &#125;    public override void Process(TagHelperContext context, TagHelperOutput output)    &#123;        if (context == null)        &#123;            throw new ArgumentNullException(nameof(context));        &#125;        if (output == null)        &#123;            throw new ArgumentNullException(nameof(output));        &#125;        //添加了添加version的不用管        if (AppendVersion.HasValue && AppendVersion.Value)        &#123;            return;        &#125;        // Pass through attribute that is also a well-known HTML attribute.        if (Src != null)        &#123;            output.CopyHtmlAttribute(SrcAttributeName, context);        &#125;        // If there's no "src" attribute in output.Attributes this will noop.        //这个方法会将 "~/"替换为应用路径        ProcessUrlAttribute(SrcAttributeName, output);        // Retrieve the TagHelperOutput variation of the "src" attribute in case other TagHelpers in the        // pipeline have touched the value. If the value is already encoded this ScriptTagHelper may        // not function properly.        Src = output.Attributes[SrcAttributeName]?.Value as string;        if (Src is null)        &#123;            return;        &#125;        var resolvedPath = Src;        var queryStringOrFragmentStartIndex = Src.AsSpan().IndexOfAny('?', '#');        if (queryStringOrFragmentStartIndex != -1)        &#123;            resolvedPath = Src[..queryStringOrFragmentStartIndex];        &#125;        //判断引用是否是相对地址,相对不要改        if (Uri.TryCreate(resolvedPath, UriKind.Absolute, out var uri) && !uri.IsFile)        &#123;            // Don't append version if the path is absolute.            return;        &#125;        var value = QueryHelpers.AddQueryString(Src, _versionKey, "1.0.0");        output.Attributes.SetAttribute(_srcAttributeName, value);    &#125;    private bool IsDevelopment()    &#123;        return _environment.IsDevelopment();    &#125;&#125;</code></pre><p>一些代码说明</p><ul><li><code>HtmlTargetElement</code>特性是标记要在什么标签上使用,我这里写了<code>script</code> 和 <code>script</code>标签中带有<code>asp-append-version</code> 两种情况的,你也可以给 <code>link</code> 标签加上,这里我不需要就不加了.</li><li>此类型不需要注入</li><li>还要记得在 <code>_ViewImports.cshtml</code> 文件中引入程序集<blockquote><p><code>@addTagHelper *, TagHelperDemo</code></p></blockquote></li><li>可以在构建函数中注入你已经注入服务,所以,是可以从appsetting文件中获取当前版本号来写入</li><li>由于<code>aspnetcore</code>自带一个<code>asp-append-version</code>的功能,为了不冲突,我这里是二选一的,其实本质我也是推荐用自带的,而不是用上面那个,不过公司业务需要,可以从这里参考</li></ul>]]></content>
      
      
      <categories>
          
          <category> aspnetcore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aspnetcore </tag>
            
            <tag> taghelp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3 学习笔记 01</title>
      <link href="2022/03/24/study-notes-vue-2022-3-24-01/"/>
      <url>2022/03/24/study-notes-vue-2022-3-24-01/</url>
      
        <content type="html"><![CDATA[<p>这是有关 vue3 的学习笔记,记录下内容<br>另外推荐使用这个网站 <a href="https://sfc.vuejs.org/"><code>Vue SFC Playground</code></a> 进行 SFC 的测试,不用在本地安装任何东西<br>还有<a href="https://v3.cn.vuejs.org/">官方文档</a></p><h2 id="vue-的编译时运行时"><a href="#vue-的编译时运行时" class="headerlink" title="vue 的编译时运行时"></a>vue 的编译时运行时</h2><p>之前没有太过了解这个,这次看文档学习到, vue 是区分运行时和编译时的,编译时就是需要在客户端上编译模板,运行时是直接运行编译好的模板</p><blockquote><p><a href="https://v3.cn.vuejs.org/guide/installation.html#%E8%BF%90%E8%A1%8C%E6%97%B6-%E7%BC%96%E8%AF%91%E5%99%A8-vs-%E4%BB%85%E8%BF%90%E8%A1%8C%E6%97%B6">请看这里</a></p></blockquote><h2 id="vue-不同构建版本的解释"><a href="#vue-不同构建版本的解释" class="headerlink" title="vue 不同构建版本的解释"></a>vue 不同构建版本的解释</h2><blockquote><p>Vue3 中不再构建 UMD 模块化的方式，因为 UMD 会让代码有更多的冗余，它要支持多种模块化的方式。Vue3 中将 CJS、ESModule 和自执行函数的方式分别打包到了不同的文件中。在 packages/vue 中有 Vue3 的不同构建版本。</p></blockquote><h3 id="使用-CDN-或没有构建工具"><a href="#使用-CDN-或没有构建工具" class="headerlink" title="使用 CDN 或没有构建工具"></a>使用 CDN 或没有构建工具</h3><p><code>vue(.runtime).global(.prod).js</code></p><ul><li><code>.runtime</code>是指至包含运行时</li><li><code>.global</code> 是包含了编译器和运行时的完整构建版本</li><li><code>.prod</code> 包含硬编码的 prod/dev 分支，并且 prod 构建版本是预先压缩过的。将 *.prod.js 文件用于生产环境。</li></ul><p><code>vue(.runtime).esm-browser(.prod).js</code></p><ul><li>用于通过原生 ES 模块导入使用 (在浏览器中通过 <code>&lt;script type=&quot;module&quot;&gt;</code> 来使用)。</li><li>与全局构建版本共享相同的运行时编译、依赖内联和硬编码的 prod/dev 行为。</li></ul><h3 id="使用构建工具"><a href="#使用构建工具" class="headerlink" title="使用构建工具"></a>使用构建工具</h3><p><code>vue(.runtime).esm-bundler.js</code></p><h3 id="服务端渲染-SSR"><a href="#服务端渲染-SSR" class="headerlink" title="服务端渲染 SSR"></a>服务端渲染 SSR</h3><p><code>vue.cjs(.prod).js</code></p><p>参考:</p><p><a href="https://v3.cn.vuejs.org/guide/installation.html#%E4%BD%BF%E7%94%A8-cdn-%E6%88%96%E6%B2%A1%E6%9C%89%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7">官方</a></p><p><a href="https://www.jianshu.com/p/35d0e4b8e0cc">简书一篇博客</a></p><h2 id="创建实例的方式变化"><a href="#创建实例的方式变化" class="headerlink" title="创建实例的方式变化"></a>创建实例的方式变化</h2><ul><li>Vue2</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 选项 */</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>Vue3</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 选项 */</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3 使用一个方法来创建实例而不是使用 new 的方式<br>可以在这个实例的基础上使用链式继续添加组件和指令</p><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"SearchInput"</span><span class="token punctuation">,</span> SearchInputComponent<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">"focus"</span><span class="token punctuation">,</span> FocusDirective<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>LocalePlugin<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="根组件挂载变化"><a href="#根组件挂载变化" class="headerlink" title="根组件挂载变化"></a>根组件挂载变化</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> RootComponent <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 选项 */</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>RootComponent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> vm <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用上面方法的实例调用要挂载的 Dom,这个方法是返回了根组件的实例,所以应该写在最后</p><h2 id="在模板中只能使用如下有限的全局变量"><a href="#在模板中只能使用如下有限的全局变量" class="headerlink" title="在模板中只能使用如下有限的全局变量"></a>在模板中只能使用如下有限的全局变量</h2><pre class=" language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> makeMap <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">"./makeMap"</span><span class="token punctuation">;</span><span class="token keyword">const</span> GLOBALS_WHITE_LISTED <span class="token operator">=</span>  <span class="token string">"Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,"</span> <span class="token operator">+</span>  <span class="token string">"decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,"</span> <span class="token operator">+</span>  <span class="token string">"Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> isGloballyWhitelisted <span class="token operator">=</span>  <span class="token comment" spellcheck="true">/*#__PURE__*/</span> <span class="token function">makeMap</span><span class="token punctuation">(</span>GLOBALS_WHITE_LISTED<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://github.com/vuejs/core/blob/main/packages/shared/src/globalsWhitelist.ts#L3">来源</a></p><p>如果非要用的话,我个人是不推荐的,不过像我身边人那样硬要用,可以先用 extend 或 minx 全局添加进来</p><h2 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h2><p>这个不是 vue3 特有,但是看文档过程发现自己掌握不到位,特此记录</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"save-button"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用 Lodash 实现防抖</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>debouncedClick <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>click<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 移除组件时，取消定时器</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>debouncedClick<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// ... 响应点击 ...</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;button @click="debouncedClick">      Save    &lt;/button>  `</span></span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>正确用法是在 create 方法中定义函数,模板触发防抖或节流函数,然后调用真正要用到的逻辑</p><h2 id="Class-和-Style-的绑定"><a href="#Class-和-Style-的绑定" class="headerlink" title="Class 和 Style 的绑定"></a>Class 和 Style 的绑定</h2><p>class 的绑定支持用数组或者对象来</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>static<span class="token punctuation">"</span></span>  <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&amp;#123; active: isActive, <span class="token punctuation">'</span>text-danger<span class="token punctuation">'</span>: hasError &amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classObject<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[activeClass, errorClass]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      classObject<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        active<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token string">'text-danger'</span><span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    activeClass<span class="token punctuation">:</span> <span class="token string">'active'</span><span class="token punctuation">,</span>    errorClass<span class="token punctuation">:</span> <span class="token string">'text-danger'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>由于现在 Vue3 版本组件支持多个根组件,所以,如果给组件设置class,需要组件设置哪个元素接收</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baz<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`    &lt;p :class="$attrs.class">Hi!&lt;/p>    &lt;span>This is a child component&lt;/span>  `</span></span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>使用<code>$attrs.class</code>指定哪个根元素</p><h3 id="style多重值"><a href="#style多重值" class="headerlink" title="style多重值"></a>style多重值</h3><p>可以为 <code>style</code> 绑定中的 <code>property</code> 提供一个包含多个值的数组，常用于提供多个带前缀的值，例如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span> [<span class="token string">'-webkit-box'</span>, <span class="token string">'-ms-flexbox'</span>, <span class="token string">'flex'</span>] &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>这样写只会渲染数组中最后一个被浏览器支持的值。在本例中，如果浏览器支持不带浏览器前缀的 <code>flexbox</code>，那么就只会渲染 <code>display: flex</code>。</p><h2 id="新增组合式API"><a href="#新增组合式API" class="headerlink" title="新增组合式API"></a>新增组合式API</h2><h3 id="setup方法"><a href="#setup方法" class="headerlink" title="setup方法"></a><code>setup</code>方法</h3><blockquote><p><code>setup</code> 选项是一个接收 <code>props</code> 和 <code>context</code> 的函数，我们将在之后进行讨论。此外，我们将 <code>setup</code> 返回的所有内容都暴露给组件的其余部分 (计算属性、方法、生命周期钩子等等) 以及组件的模板。<br>在 <code>setup</code> 中你应该避免使用 <code>this</code>，因为它不会找到组件实例。<code>setup</code> 的调用发生在 <code>data property</code>、<code>computed property</code> 或 <code>methods</code> 被解析之前，所以它们无法在 <code>setup</code> 中被获取。<br><code>setup</code> 函数中的第一个参数是 <code>props</code>。正如在一个标准组件中所期望的那样，<code>setup</code> 函数中的 <code>props</code> 是响应式的，当传入新的 <code>prop</code> 时，它将被更新.但是，因为 <code>props</code> 是响应式的，你不能使用 <code>ES6</code> 解构，它会消除 <code>prop</code><br>如果需要解构 <code>prop</code>，可以在 <code>setup</code> 函数中使用 <code>toRefs</code> 函数来完成此操作：<br>如果 <code>title</code> 是可选的 <code>prop</code>，则传入的 <code>props</code> 中可能没有 <code>title</code> 。在这种情况下，<code>toRefs</code> 将不会为 <code>title</code> 创建一个 <code>ref</code> 。你需要使用 <code>toRef</code> 替代它：</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> toRefs<span class="token punctuation">,</span> toRef  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> title <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token function">toRefs</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Context参数"><a href="#Context参数" class="headerlink" title="Context参数"></a>Context参数</h3>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c# EncoderParameter使用注意事项</title>
      <link href="2022/03/03/bug-notes-2022-03-03-c-encoderparameter-shi-yong-zhu-yi-shi-xiang/"/>
      <url>2022/03/03/bug-notes-2022-03-03-c-encoderparameter-shi-yong-zhu-yi-shi-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ul><li>使用<code>System.Drawing.Image.Save</code>将一个png图片保存为tif格式的图片, 老是遇到 <code>params is not valid</code> 错误</li></ul><p>这个方法我使用的是<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.drawing.image.save?view=dotnet-plat-ext-6.0#System_Drawing_Image_Save_System_String_System_Drawing_Imaging_ImageCodecInfo_System_Drawing_Imaging_EncoderParameters_">这个重载</a></p><p>第二个参数好理解,就是指定输出MimeType, 第三个就不好理解了</p><p>意思大概是用什么质量, 色域去输出</p><pre class=" language-c#"><code class="language-c#">ImageCodecInfo tiffImageCodecInfo = ImageCodecInfo.GetImageEncoders().FirstOrDefault(f => f.MimeType == "image/tiff");//ImageCodecInfo pngImageCodecInfo = ImageCodecInfo.GetImageEncoders().FirstOrDefault(f => f.MimeType == "image/png");EncoderParameters myEncoderParameters = new(2);myEncoderParameters.Param[0] = new EncoderParameter(Encoder.Compression, (long)EncoderValue.CompressionLZW);myEncoderParameters.Param[1] = new EncoderParameter(Encoder.Quality, 0L);using Image png = Image.FromFile(inputFile);png.Save(outputFile, ImageFormat.Tiff);png.Save(outputCompressionFile, tiffImageCodecInfo, myEncoderParameters);Console.WriteLine("Hello World!");</code></pre><p>附上我成功的代码,之前一直失败就是因为<code>new EncoderParameter</code>构造函数里面的第二个参数有问题,我是直接写<code>int</code>类型的(而且还不知道填什么数好,后面又用了个<code>EncoderValue</code>枚举去输入),这里其实参考上面的链接,里面有个细节就是例子都是用了<code>long</code>类型的,所以我们这里也是要同理的,最后在windows上成功了,发布到<code>Linux</code>居然压缩没什么变化,无语了,等找到解决方法再更新</p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CLR-via-第10章-属性</title>
      <link href="2021/12/23/read-notes-clr-via-2021-12-23-clr-via-di-10-zhang-shu-xing/"/>
      <url>2021/12/23/read-notes-clr-via-2021-12-23-clr-via-di-10-zhang-shu-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="第10章-属性"><a href="#第10章-属性" class="headerlink" title="第10章 属性"></a>第10章 属性</h2><h3 id="1-无参属性"><a href="#1-无参属性" class="headerlink" title="1.无参属性"></a>1.无参属性</h3><blockquote><p>面向对象设计和编程的重要原则之一就是数据封装.意味着类型的字段永远不应该公开, 否则很容易因为不恰当使用字段而破坏对象的状态.</p><ul><li><p>还有你可能希望访问字段执行一些副作用, 缓存某些值或者时推迟创建一些内部对象</p></li><li><p>你可能希望以线程安全的方式访问字段</p></li><li><p>字段可能是一个逻辑字段,它的值不由内存中的字节表示, 而是通过某个算法来计算获取</p></li></ul></blockquote><p>所以c#和CLR为了解决以上问题点,提供了一种叫属性的东西</p><ul><li><p>本质上属性是方法,编译器在背后帮你生成了对某个字段获取和编辑的方法</p></li><li><p>编译器会在托管程序集的元数据中生成了一个属性的定义项,包括一些标志(flags)以及属性的类型,这些信息的作用就是在属性这种抽象概念于它的访问器之间建立一个联系.编译器和其他工具就可以利用这种元数据信息. 但是CLR不使用这种元数据信息,在运行时只需要访问器方法</p></li></ul><h4 id="对象和集合初始化器"><a href="#对象和集合初始化器" class="headerlink" title="对象和集合初始化器"></a>对象和集合初始化器</h4><pre class=" language-c#"><code class="language-c#">Emplyee e = new Emplyee&#123;    Name = "Jeff",    Age = 45&#125;List<string> arr = new List<string>&#123;    "1","2","3"&#125;</code></pre><p>上述的初始化本质是编译器帮你调用构造器,再手动帮你给每个属性赋值,但是这样子写增强了代码的可读性;集合的就是帮你add</p><h4 id="匿名类型"><a href="#匿名类型" class="headerlink" title="匿名类型"></a>匿名类型</h4><pre class=" language-c#"><code class="language-c#">var o = new &#123;    Name = "张三"&#125;</code></pre><p>这里是一个匿名的类型,编译器会推断每个表达式的类型, 创建推断类型的私有字段, 为每个字段创建公共只读属性,并创建一个构造器来接受所有这些表达式. 除此之外,编译器还会重写<code>Object</code>的<code>Equal</code>,<code>GetHashCode</code>和<code>ToString</code>方法</p><ul><li>编译器在定义匿名类型时是非常智能的, 假如你在代码中定义了多个匿名类型,并具有相同的结构,,那它只会创建一个匿名类型定义, 但是创建该类型的多个实例.</li></ul><h4 id="System-Tuple-元组-和-System-ValueTuple"><a href="#System-Tuple-元组-和-System-ValueTuple" class="headerlink" title="System.Tuple 元组 和 System.ValueTuple"></a>System.Tuple 元组 和 System.ValueTuple</h4><ul><li><p>Tuple是引用类型,ValueTuple是值类型</p></li><li><p>Tuple创建好之后就不能修改其属性(是只读的),ValueTuple是创建好之后还可以修改</p></li></ul><h3 id="2-有参属性"><a href="#2-有参属性" class="headerlink" title="2.有参属性"></a>2.有参属性</h3><p>当属性的get访问器方法接受一个或多个参数, 这时候就可以称为索引器了</p><blockquote><p>CLR本身不区分无参属性和有参属性, 对于CLR来说,每个属性都是类型中定义的一对方法和一些元数据.c#团队将<code>this[...]</code>作为表达索引器的语法,所以c#只允许在对象的实例上定义索引器.c#不支持定义静态索引器属性, 虽然CLR是支持静态有参属性的</p></blockquote><h3 id="3-调用属性访问器方法时的性能"><a href="#3-调用属性访问器方法时的性能" class="headerlink" title="3.调用属性访问器方法时的性能"></a>3.调用属性访问器方法时的性能</h3><p>JIT会将get,set访问器方法内联(或者说嵌入), 这样一来,使用属性就没有性能上的损失.内敛是指将方法直接编译到调用它的方法中,避免在运行时发出调用产生开销</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> clr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CLR-via-第9章 参数</title>
      <link href="2021/12/22/read-notes-clr-via-2021-12-22-clr-via-di-9-zhang-can-shu/"/>
      <url>2021/12/22/read-notes-clr-via-2021-12-22-clr-via-di-9-zhang-can-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="第9章-参数"><a href="#第9章-参数" class="headerlink" title="第9章 参数"></a>第9章 参数</h2><h3 id="1-可选参数和命名参数"><a href="#1-可选参数和命名参数" class="headerlink" title="1.可选参数和命名参数"></a>1.可选参数和命名参数</h3><ul><li><p>可以为方法,构造器方法和有参属性的参数指定默认值, 还可以为属于委托定义的一部分的参数指定默认值</p></li><li><p>有默认值的参数必须放在没有默认值的所有参数之后</p></li><li><p>默认值必须是编译时能确定的常量值</p></li><li><p>小心重命名,因为上层调用指定了变量名的话,也要重构(使用重命名后的名字)</p></li><li><p>如果参数用<code>ref</code>或<code>out</code>关键字进行了标识,就不能设置默认值</p></li></ul><p>一旦为参数分配了默认值,编译器就会在内部向该参数应用定制特性<code>System.Runtime.InteropServices.OptionalAttribute</code>这个特性, 这个最终会保存到元数据中.此外,编译器还会将这个值设置 <code>System.Runtime.InteropServices.DefaultParameterValueAttribute</code>的构造器传递你在代码写的常量值</p><p>之后,编译器调用方法,发现缺少某部分实参,就会从元数据中提取值,并将值自动嵌入到调用中</p><h3 id="2-隐式类型的局部变量"><a href="#2-隐式类型的局部变量" class="headerlink" title="2.隐式类型的局部变量"></a>2.隐式类型的局部变量</h3><p>在声明变量的时候,我们一般要先定义这个变量的类型, 但是c#3之后提供了一个匿名类型也就是<code>var</code>, 这个意思和JavaScript的var完全不一样,这个是由c#编译器推断类型,并不是动态类型,这一点是最重要的</p><ul><li>不能用在方法参数声明中</li></ul><h3 id="3-以传引用的方式向方法传递参数"><a href="#3-以传引用的方式向方法传递参数" class="headerlink" title="3.以传引用的方式向方法传递参数"></a>3.以传引用的方式向方法传递参数</h3><blockquote><p>CLR默认所有方法参数都传值. 传递引用类型的对象时,对象引用(或者说指向对象的指针)被传给方法. 注意引用(或指针)本身时传值的,意味着方法能修改对象,而调用者能看到这些修改.对于值类型的实例,传给方法的时实例的一个副本,意味着方法将获得它专用的一个值类型的实例副本,调用者中的实例不受影响.<br>CLR 允许以传引用而非传值的方式传递参数. c#用关键字<code>ref</code>和<code>out</code>支持了这个功能.两个关键字都告诉c#编译器生成元数据来指明该参数是传引用的.编译器将生成代码来传递参数的地址,而非参数本身</p></blockquote><ul><li><p>CLR 不区分<code>ref</code>和<code>out</code>,无论使用哪个关键字,生成的IL都是一样的,元数据也几乎完全一样,除了一个bit除外,它用于记录声明方法时指定是<code>ref</code>还是<code>out</code>.</p></li><li><p><code>ref</code>要先初始化参数的字,<code>out</code>参数是未必初始化好了值</p></li><li><p>为大的值类型使用<code>out</code>, 可提升代码的执行效率, 因为它避免了在进行方法调用时复制值类型的字段</p></li><li><p>CLR 允许根据使用的是<code>ref</code>和<code>out</code>参数对方法进行重载,如下例</p></li></ul><pre class=" language-c#"><code class="language-c#">public sealed class Point&#123;    static void Add(Point p)&#123;&#125;    static void Add(ref Point p)&#123;&#125;&#125;</code></pre><p>但是两个重载方法只有<code>ref</code>和<code>out</code>的区别则不合法,因为两个签名的元数据形式完全心相通, 所以不能在例子中定义这样的方法<code>static void Add(out Point p)&#123;&#125;</code></p><h3 id="4-可变参数"><a href="#4-可变参数" class="headerlink" title="4.可变参数"></a>4.可变参数</h3><ul><li>只能是方法中的最后一个参数,使用<code>params</code>作为关键字</li></ul><p><code>params</code>关键字告诉了编译器向参数引用定制特性<code>System.ParamArrayAttribute</code>,编译器会把可变参数转为一个数组</p><p>可变参数对比没有用可变参数的方法,在性能上有一定影响,毕竟数组元素也要初始化,要在堆上分配内存,最后要垃圾回收.可以考虑定义几个没有使用<code>params</code>关键字的重载版本</p><h3 id="5-参数和返回类型的设计规范"><a href="#5-参数和返回类型的设计规范" class="headerlink" title="5.参数和返回类型的设计规范"></a>5.参数和返回类型的设计规范</h3><ul><li><p>声明方法的参数类型时,应尽量指定最弱的类型,宁要接口也不要基类, 比如使用<code>IEnumerable&lt;T&gt;</code>声明参数比<code>List&lt;T&gt;</code>要好,这样,方法的适用性好点</p></li><li><p>方法的返回类型恰好相反, 一般最好将方法的返回类型声明为最强的类型(防止受限于特定类型)</p></li></ul><h3 id="6-常量性"><a href="#6-常量性" class="headerlink" title="6.常量性"></a>6.常量性</h3><p>c#和CLR都不支持</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> clr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CLR-via-第8章 方法</title>
      <link href="2021/12/20/read-notes-clr-via-2021-12-20-clr-via-di-8-zhang-fang-fa/"/>
      <url>2021/12/20/read-notes-clr-via-2021-12-20-clr-via-di-8-zhang-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="第8章-方法"><a href="#第8章-方法" class="headerlink" title="第8章 方法"></a>第8章 方法</h2><h3 id="1-实例构造器和类-引用类型"><a href="#1-实例构造器和类-引用类型" class="headerlink" title="1. 实例构造器和类(引用类型)"></a>1. 实例构造器和类(引用类型)</h3><ul><li>什么是实例构造器?</li></ul><p>说人话就是ctor,构造函数</p><ul><li>构造器做什么</li></ul><blockquote><p>它是在创建引用类型实例的时候,首先未实例的数据字段分配内存,然后初始化对象的附加字段(类型对象指针和同步块索引), 最后调用类型的的实例构造器来设置对象的初始状态</p></blockquote><ul><li>构造器和普通方法的不同之处</li></ul><p>它不能被继承,一个类只有自己定义的实例构造器. 由于不能继承实例构造器, 所以实例构造器不能使用以下修饰符: <code>virtual</code> , <code>new</code>, <code>override</code>, <code>sealed</code>, <code>abstract</code></p><ul><li><p>编译器在没有显式定义任何构造器的情况下,自动定义一个默认的无参的构造器,默认是<code>public</code>,如果类的修饰符是<code>static</code>(<code>sealed</code>和<code>abstract</code>)<a href="%E9%9D%99%E6%80%81%E7%B1%BB%E5%9C%A8%E5%85%83%E6%95%B0%E6%8D%AE%E4%B8%AD%E6%98%AF%E6%8A%BD%E8%B1%A1%E5%AF%86%E5%B0%81%E7%B1%BB">^1</a>,编译器不会生成默认的构造器</p></li><li><p>如果类的修饰符有<code>abstarct</code>的话,编译器生成的默认构造函数的可访问性就为<code>protected</code>,如果基类没有提供无参构造器,那么派生类必须显式调用一个基类构造器,否则报错.</p></li></ul><blockquote><p>不要在构造器中调用虚方法, 原因是假如实例化的类型重写虚方法,那么就会执行派生类对虚方法的实现,但是这个时候,尚未完成对继承车层次结构中的所有字段的初始化(被实例化的类型的构造器还没有运行呢),所以,调用虚方法会导致无法预测的行为,归根到底,这是由于调用虚方法时,直到运行时之前都不会选择执行该方法的实际类型</p></blockquote><p>有以下一个类型</p><pre class=" language-c#"><code class="language-c#">public sealed class SomeType&#123;    private int m_x = 5;    public SomeType()    &#123;        //1. m_x = 5;        //2. base.ctor()        //3.自定义的代码        m_x = 10;    &#125;&#125;</code></pre><p>这个<code>SomeType</code>的<code>m_x</code>字段被初始化为了5,这是怎么做到的?</p><blockquote><p>根据IL可知,构造器先把值5存到呢字段<code>m_x</code>,再调用基类的构造器.换句话说,编译器提供了一个简化的语法,允许以内联方法初始化实例字段.但是在幕后,它会将这种语法转换成构造器方法中的代码来执行初始化.</p></blockquote><p>也就说你使用了这种内联的写法,构造器第一步执行内联的赋值,第二步执行基类的构造器,最后执行构造器自己的代码</p><h3 id="2-实例构造器和结构-值类型"><a href="#2-实例构造器和结构-值类型" class="headerlink" title="2. 实例构造器和结构(值类型)"></a>2. 实例构造器和结构(值类型)</h3><ul><li>值类型和引用类型的构造器的不同</li></ul><blockquote><p>CLR总是允许创建值类型的实例, 并且没有办法阻止值类型的实例化. 所以值类型其实不需要定义构造器, 编译器根本不会为值类型内联(嵌入)默认的无参构造器</p></blockquote><p>现在有个一个引用类型, 包含了一个值类型的字段和默认的无参构造器, 当调用构造器的时候,考虑到性能,CLR不会为包含在引用类型中的每个值类型字段都主动调用构造器.所以值类型的字段会被初始化为0或null</p><p>CLR也允许为值类型定义构造器,但是必须显式调用才会执行,也就是主动<code>new</code>.但是编译器是不允许你主动<code>new Point()</code>这样去主动调用一个值类型的无参构造器,实际上如果你写了这样的无参构造器</p><pre class=" language-c#"><code class="language-c#">public struct Point&#123;    public int x,y;    public Point()    &#123;        x = y = 5;    &#125;&#125;</code></pre><p>在编译器中是会直接报错的,会提示</p><blockquote><p>error CS0568: 结构不能包含显示的无参数构造器</p></blockquote><p>因为编译器不会主动调用值类型的无参数构造器,所以为了防止开发人员对这种构造器在什么时候调用产生迷惑,所以编译器永远不会生成自动调用它的代码.值类型的字段总是被初始化为0 或 null</p><ul><li><p>严格的说,值类型的字段只有在嵌套到引用类型中,才能保证被初始化为 0 或null.基于栈的值类型字段则无此保证</p></li><li><p>虽然c#编译器不允许值类型带有无参构造器, 但是CLR是允许的,</p></li></ul><h3 id="3-类型构造器"><a href="#3-类型构造器" class="headerlink" title="3. 类型构造器"></a>3. 类型构造器</h3><p>除了实例构造器, clr还支持类型构造器,也就是俗称的静态构造器</p><p>对应的实例构造器是设置类型的实例的初始状态, 对应的,类型构造器是设置类型的初始状态. 类型默认没有定义类型构造器,如果定义也只能定义一个.此外, 类型构造器永远没有参数</p><pre class=" language-c#"><code class="language-c#">public sealed class SomeType&#123;    static SomeType()&#123;&#125;&#125;</code></pre><p>类型构造器总是私有的,编译器会自动标记为<code>private</code>,之所以必须私有,是为了防止任何由开发人员写的代码调用它,对它的调用总是由CLR负责</p><blockquote><p>类型构造器的调用比较麻烦, JIT编译器在编译一个方法时,会查看代码中都引用了哪些类型. 任何一个类型定义了类型构造器, JIT编译器都会检查针对当前<code>AppDomain</code>,是否已经执行了这个类型构造器.如果构造器从未执行,JIT编译器会在它生成本机(native)代码中添加对类型构造器的调用.如果类型构造器已经执行,JIT编译器就不添加对它的调用,因为它知道类型已经初始化好了.</p><p>事实上,多个线程可能同时执行相同的方法.CLR希望确保在每个<code>AppDomain</code>中, 一个类型构造器只执行一次.为了保证这一点,在调用类型构造器时,调用线程要获取一个互斥线程同步锁.这样一来,如果多个线程视图同时调用某个类型的静态构造器,只有一个线程可以获得锁,其他线程会被阻塞(blocked).第一个线程会执行静态构造器中的代码.当第一个线程离开构造器后,正在等待的线程将会被唤醒,然后发现构造器的代码已被执行过.因此,这些线程不会再次执行代码,将直接从构造器方法返回.除此之外,如果再次调用这样一个方法, CLR知道类型构造器已被执行过,从而确保构造器不被再次调用.</p></blockquote><ul><li><p>单个线程中的两个类型包含互相引用的代码可能出问题</p></li><li><p>静态字段的赋值同理和实例差不多</p></li><li><p>类型构造器不应调用基类的类型构造器, 这种调用之所以没必要,是因为类型不可能有静态字段是从基类型分享或继承的.</p></li></ul><h3 id="4-操作符重载方法"><a href="#4-操作符重载方法" class="headerlink" title="4. 操作符重载方法"></a>4. 操作符重载方法</h3><p>在c#中的操作符重载对于CLR来说都不是不可知的,本质都是调用CLR方法.CLR 规范要求操作符重载方法必须是<code>public</code>和<code>static</code>方法.</p><pre class=" language-c#"><code class="language-c#">public sealed class Complex&#123;    public static Complex operator+(Complex c1, Complex c2)&#123;...&#125;&#125;</code></pre><h3 id="5-转换操作符方法"><a href="#5-转换操作符方法" class="headerlink" title="5. 转换操作符方法"></a>5. 转换操作符方法</h3><p>有时候需要将对象从一种类型转换为另一种类型.当源类型和目标类型都是编译器识别的基元类型时,编译器自己就知道如何生成转换对象所需的代码.</p><p>但是如果不是基元类型,编译器会生成代码,要求CLR执行转换(强制转型),假如你需要这样的转换,可以这样定义转换构造器和方法</p><pre class=" language-c#"><code class="language-c#">public sealed class Rational &#123;    public Rational(int num)&#123;&#125;    public Rational(Single num)&#123;&#125;    public int ToInt()&#123;&#125;    public Single ToSingle()&#123;&#125;&#125;</code></pre><p>事实上,c#还提供了转换操作符重载, 可以使用特殊的语法来定义转换操作符方法.CLR规范要求转换操作符重载方法必须时<code>public</code> 和<code>static</code>.此外,c#要求参数类型和返回类型二者必有其一与定义转换方法的类型相同.之所以要进行这个限制,是为了使c#编译器能在一个合理的时间内找到要绑定的操作符方法</p><pre class=" language-c#"><code class="language-c#">public sealed class Rational &#123;    public Rational(int num)&#123;&#125;    public Rational(Single num)&#123;&#125;    public int ToInt()&#123;&#125;    public Single ToSingle()&#123;&#125;    // 由一个int隐式构造并返回一个Rational    public static implicit operator Rational(int num)&#123;        return new Rational(num);    &#125;    public static implicit operator Rational(Single num)&#123;        return new Rational(num);    &#125;    //由一个Rational显式返回一个int    public static explicit operator int(Rational r)&#123;        return r.ToInt();    &#125;&#125;</code></pre><p><code>implicit</code>关键字告诉编译器为了生成代码来调用方法,不需要再源代码中进行显式转型.相反,<code>explicit</code>告诉了编译器只有再发现了显式转型时,才调用方法</p><p>在<code>implicit</code>和<code>explicit</code>关键字之后,要指定<code>operator</code>关键字告诉编译该方法是一个转换操作符.在<code>operator</code>之后,指定对象要转换成什么类型.在圆括号中,则指定要从什么类型转换.</p><pre class=" language-c#"><code class="language-c#">//使用Rational r1  = 5;//int 隐式转型为Rationalint x = (int)r1;//Rational 显式转型为int</code></pre><ul><li>什么时候改用隐式,什么时候该用显式?</li></ul><blockquote><p>只有在转换不损失精度或数量级的前提下,才能定义隐式转换操作符. 如果转换会造成精度或数量级的损失, 就应该定义一个显式转换操作符. 而且,显式转换失败,应该让显式转换抛出<code>OverflowException</code>或者<code>InvalidOperationException</code></p></blockquote><h3 id="6-扩展方法"><a href="#6-扩展方法" class="headerlink" title="6. 扩展方法"></a>6. 扩展方法</h3><p>扩展方法,故名思意,就是对类型就行扩展的方法.</p><p>一些关于扩展方法的规则</p><ul><li>c#只支持扩展方法,不支持扩展属性,扩展事件,扩展操作符等</li><li>扩展方法(第一个参数前面有this的方法)必须在非泛型的静态类中声明.然而,类名没有限制,可以祟拜你叫什么明细.当然,最重要的,扩展方法至少要有一个参数,而且只有第一个参数能用<code>this</code>关键字标记.</li><li>c#编译器在静态类中查找扩展方法的时候,要求静态类本身必须具有文件作用域,不能是嵌套类</li></ul><p>c#编译器会自动给扩展方法添加一个特性<code>ExtensionAttribute</code>,这个特性会添加到元数据中,这样编译器就可以快速扫描程序集,查找方法</p><h3 id="7-分部方法"><a href="#7-分部方法" class="headerlink" title="7. 分部方法"></a>7. 分部方法</h3><p>一些使用规则</p><ul><li>只能在分部类或结构中声明</li><li>分部方法的返回类型始终是<code>void</code>, 任何参数都不能用out修饰符来标记.</li><li>分部方法的声明和实现必须具有完全一致的签名.如果两者都引用了定制特性,编译器会合并两个方法的特性.应用于参数的任何特性也会合并</li><li>如果没有对应的实现部分, 便不能在代码中创建一个委托来引用这个分部方法</li><li>分部方法总是被视为<code>private</code>,但是c#编译器禁止在分部方法声明之前添加<code>private</code>关键字</li></ul>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> clr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CLR via 第7章常量和字段</title>
      <link href="2021/12/16/read-notes-clr-via-2021-12-16-clr-via-di-7-zhang-chang-liang-he-zi-duan/"/>
      <url>2021/12/16/read-notes-clr-via-2021-12-16-clr-via-di-7-zhang-chang-liang-he-zi-duan/</url>
      
        <content type="html"><![CDATA[<h2 id="常量和字段"><a href="#常量和字段" class="headerlink" title="常量和字段"></a>常量和字段</h2><h3 id="常量几个重要知识"><a href="#常量几个重要知识" class="headerlink" title="常量几个重要知识"></a>常量几个重要知识</h3><ul><li><p>常量是指值从不变化的符号,它的值总是在编译时就确定</p></li><li><p>编译器会将常量保存到程序集的元数据中(题外话,程序集,元数据都保存了什么,请看其他章节)</p></li><li><p>一般常量会定义为基元类型,但是c#允许定义为自定义类型,前提是把值设置为<code>null</code></p></li><li><p>由于常量不变化,所以常量被视为类型定义的一部分,也就是静态成员,而不是实例成员,隐式的静态成员,所以c#不允许为常量指定为<code>static</code></p></li><li><p>编译器在程序集的元数据查找该符号,会将值直接签入到<code>IL</code>中,所以在运行中不需要为它分配内存,所以也不能获取常量的内存地址</p></li><li><p>引用的程序集中的常量对本程序集的影响</p><ul><li>假如在b.dll中定义了一个类型是<code>int</code>的常量b,b的值是50</li><li>a引用了b,在a生成的时候就确定了b的值,</li><li>b修改了,常量的值,但是如果a,没有重新编译,使用的也还是旧值,想获得新值,也必须重新编译</li></ul></li></ul><blockquote><p>如果希望在运行时从一个程序集中提取另外一个程序集中的值,那不应该使用常量,应该使用<code>readonly</code></p></blockquote><h3 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h3><blockquote><p>字段是一种数据成员,其中容纳了一个值类型的实例或者对一个引用类型的引用</p></blockquote><table><thead><tr><th>CLR术语</th><th>c#术语</th><th>说明</th></tr></thead><tbody><tr><td>Static</td><td>static</td><td>这种字段是类型状态的一部分,而不是对象状态的一部分</td></tr><tr><td>Instance</td><td>默认</td><td>这种字段与类型的一个实例关联,而不是与类型本身关联</td></tr><tr><td>InitOnly</td><td>readonly</td><td>这种字段只能由一个构造器方法中的代码写入</td></tr><tr><td>Volatile</td><td>volatile</td><td>编译器,CLR和硬件不会对访问这种字段的代码执行”线程不安全”的优化措施,只有以下类型才能标志为<code>volatile</code>, 所有的引用类型,Single, Boolean, Byte, SByte, Int16, Int32, UInt16, Uint32, Char等等(太长不抄了)</td></tr></tbody></table><ul><li>大多数字段都是read/write字段,意味着在代码执行过程中,字段值可以多次改变. 但<code>readonly</code> 字段只能在构造器方法中写入. 构造器方法只能调用一次,就是对象创建的时候,编译器和验证机制会确保readonly字段不会被构造器以外的任何方法写入,但是,<strong>可以用反射去修改</strong></li></ul><blockquote><p>当某个字段是引用类型,并且该字段被标记为<code>readonly</code>时,不可变的是引用,而非<strong>字段引用的对象</strong>, 也就说引用对象必须是这个对象,但是对象里面的值怎么变都可以</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> CLR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.net 使用IObservable&lt;T&gt;和IObserver&lt;T&gt; 实现观察者模式</title>
      <link href="2021/12/02/study-notes-c-2021-12-02-net-shi-yong-iobservable-t-he-iobserver-t-shi-xian-guan-cha-zhe-mo-shi/"/>
      <url>2021/12/02/study-notes-c-2021-12-02-net-shi-yong-iobservable-t-he-iobserver-t-shi-xian-guan-cha-zhe-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-观察者模式是什么"><a href="#1-观察者模式是什么" class="headerlink" title="1. 观察者模式是什么?"></a>1. 观察者模式是什么?</h1><p>当一个对象被修改时，则会自动通知依赖它的对象。这时候我们就可以使用观察者模式了<br>很简单的一个列子, 拍卖东西, 当拍卖价格(变化的类)发生变化, 那拍卖员(通知类)就要通知所有参加拍卖的人(观察者)</p><h1 id="2-IObservable和IObserver-是什么"><a href="#2-IObservable和IObserver-是什么" class="headerlink" title="2. IObservable和IObserver 是什么"></a>2. IObservable<T>和IObserver<T> 是什么</h1><p><code>IObservable&lt;T&gt;</code> 接口是定义基于推送的通知的提供程序。<br><code>IObserver&lt;T&gt;</code> 接口是提供用于接收基于推送的通知的机制。</p><p>说白了就是.net 给我们提供一个实现观察者模式的接口定义,分别定义了观察者模式中的两种对象, 一个是观察者自己,第二个是 主题类(会发生变化的对象)</p><p>下面都是微软的文档的代码, 加上我自己的理解</p><ul><li>第一步我们定义一个信息类,它包含了一些信息</li></ul><pre class=" language-c#"><code class="language-c#">public struct Location&#123;   double lat, lon;   public Location(double latitude, double longitude)   &#123;      this.lat = latitude;      this.lon = longitude;   &#125;   public double Latitude   &#123; get &#123; return this.lat; &#125; &#125;   public double Longitude   &#123; get &#123; return this.lon; &#125; &#125;&#125;</code></pre><p>这里有个包含位置信息的结构,有经度纬度</p><ul><li>第二步我们使用<code>IObservable&lt;T&gt;</code>来定义一个位置跟踪类, 这个类会在位置变化的时候发送通知</li></ul><pre class=" language-c#"><code class="language-c#">public class LocationTracker : IObservable<Location>&#123;    //私有集合用来存储观察者们   private List<IObserver<Location>> observers;   public LocationTracker()   &#123;      //初始化集合      observers = new List<IObserver<Location>>();   &#125;   // 微软文档中最精妙的地方,很好的利用的c#的特性,普通的观察者实现中肯定是要有个取消订阅的方法的,但是这个没有, 重点就是返回了一个实现了IDisposable接口的对象, 而这个实现了IDisposable接口的对象是一个嵌套类,这样观察者的释放就只能由被观察对象本身释放,不会轻易被外部修改, 提高了健壮性   public IDisposable Subscribe(IObserver<Location> observer)   &#123;      if (! observers.Contains(observer))         observers.Add(observer);      return new Unsubscriber(observers, observer);   &#125;// 嵌套类, 嵌套类不能直接访问包含类   private class Unsubscriber : IDisposable   &#123;      private List<IObserver<Location>>_observers;      private IObserver<Location> _observer;      public Unsubscriber(List<IObserver<Location>> observers, IObserver<Location> observer)      &#123;         this._observers = observers;         this._observer = observer;      &#125;      public void Dispose()      &#123;         if (_observer != null && _observers.Contains(_observer))            _observers.Remove(_observer);      &#125;   &#125;//当位置发生变化时,向所有观察者发布消息   public void TrackLocation(Nullable<Location> loc)   &#123;      foreach (var observer in observers) &#123;         if (! loc.HasValue)            observer.OnError(new LocationUnknownException());         else            observer.OnNext(loc.Value);      &#125;   &#125;//当被观察对象都结束传播, 那通知对象自然就要清除相关观察者   public void EndTransmission()   &#123;      foreach (var observer in observers.ToArray())         if (observers.Contains(observer))            observer.OnCompleted();      observers.Clear();   &#125;&#125;</code></pre><ul><li>第三个观察者类</li></ul><pre class=" language-c#"><code class="language-c#">public class LocationReporter : IObserver<Location>&#123;   private IDisposable unsubscriber;   private string instName;//观察者标识   public LocationReporter(string name)   &#123;      this.instName = name;   &#125;   public string Name   &#123;  get&#123; return this.instName; &#125; &#125;//订阅,实际使用调用通知对象的订阅方法,并且获取了发布中的私有对象   public virtual void Subscribe(IObservable<Location> provider)   &#123;      if (provider != null)         unsubscriber = provider.Subscribe(this);   &#125;//完成,之后,再取消订阅   public virtual void OnCompleted()   &#123;      Console.WriteLine("The Location Tracker has completed transmitting data to &#123;0&#125;.", this.Name);      this.Unsubscribe();   &#125;//发生错误   public virtual void OnError(Exception e)   &#123;      Console.WriteLine("&#123;0&#125;: The location cannot be determined.", this.Name);   &#125;//发生变化时的处理   public virtual void OnNext(Location value)   &#123;      Console.WriteLine("&#123;2&#125;: The current location is &#123;0&#125;, &#123;1&#125;", value.Latitude, value.Longitude, this.Name);   &#125;//取消订阅, 通过IDisposable对象的关联,可以把自身在通知对象中的引用清除,这样就实现了取消订阅   public virtual void Unsubscribe()   &#123;      unsubscriber.Dispose();   &#125;&#125;</code></pre><p>总结: 通过一个<code>IDisposable</code> 和 嵌套对象,巧妙的结合,充分发挥了c#的语言特性,优雅的实现了观察者和被观察者,值得学习.</p><p>引用链接:</p><p><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.iobserver-1?view=net-6.0"><code>IObserver&lt;T&gt; 接口</code></a></p><p><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.iobservable-1?view=net-6.0"><code>IObservable&lt;T&gt; 接口</code></a></p><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/classes-and-structs/nested-types">嵌套类型</a></p>]]></content>
      
      
      <categories>
          
          <category> c# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> 观察者 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表达式树一些简单应用</title>
      <link href="2021/11/23/study-notes-c-2021-11-23-biao-da-shi-shu-yi-xie-jian-dan-ying-yong/"/>
      <url>2021/11/23/study-notes-c-2021-11-23-biao-da-shi-shu-yi-xie-jian-dan-ying-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="表达式树的一些简单应用"><a href="#表达式树的一些简单应用" class="headerlink" title="表达式树的一些简单应用"></a>表达式树的一些简单应用</h2><h2 id="1-表达式树是什么"><a href="#1-表达式树是什么" class="headerlink" title="1. 表达式树是什么"></a>1. 表达式树是什么</h2><p>表达式树以树形数据结构表示代码，其中每一个节点都是一种表达式，比如方法调用和 <code>x &lt; y</code> 这样的二元运算等。<br>coder可以对表达式树中的代码进行编辑和运算,这样能动态的修改可执行的代码.<br>更多请看<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/expression-trees">微软文档</a></p><h2 id="2-执行表达式树"><a href="#2-执行表达式树" class="headerlink" title="2. 执行表达式树"></a>2. 执行表达式树</h2><p>执行表达式树可能返回一个值，或者它可能只是执行操作，例如调用方法。<br>仅可以执行表示 lambda 表达式的表达式树。 表示 Lambda 表达式的表达式树的类型为 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.linq.expressions.lambdaexpression">LambdaExpression</a> 或 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.linq.expressions.expression-1"><code>Expression&lt;TDelegate&gt;</code></a>。 若要执行这些表达式树，请调用 <code>Compile</code> 方法来创建一个可执行的委托，然后调用该委托。</p><blockquote><p>如果委托的类型未知，也就是说 Lambda 表达式的类型为 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.linq.expressions.lambdaexpression">LambdaExpression</a>，而不是 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.linq.expressions.expression-1"><code>Expression&lt;TDelegate&gt;</code></a>，则必须对委托调用 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.delegate.dynamicinvoke">DynamicInvoke</a> 方法，而不是直接调用委托。<br>表达式树 是表示一些代码的数据结构。 它不是已编译且可执行的代码。 如果想要执行由表达式树表示的 .NET 代码，则必须将其转换为可执行的 IL 指令。<br>可以将任何 <code>LambdaExpression</code> 或派生自 <code>LambdaExpression</code> 的任何类型转换为可执行的 IL。 其他表达式类型不能直接转换为代码。 此限制在实践中影响不大。 Lambda 表达式是你可通过转换为可执行的中间语言 (IL) 来执行的唯一表达式类型。 （思考直接执行 <code>ConstantExpression</code> 意味着什么。 这是否意味着任何用处？）<code>LambdaExpression</code> 或派生自 <code>LambdaExpression</code> 的类型的任何表达式树均可转换为 IL。 表达式类型 <code>Expression&lt;TDelegate&gt;</code>是 .NET Core 库中的唯一具体示例。 它用于表示映射到任何委托类型的表达式。 由于此类型映射到一个委托类型，因此 .NET 可以检查表达式，并为匹配 lambda 表达式签名的适当委托生成 IL。<br>在大多数情况下，这将在表达式和其对应的委托之间创建简单映射。 例如，由 <code>Expression&lt;Func&lt;int&gt;&gt;</code> 表示的表达式树将被转换为 <code>Func&lt;int&gt;</code> 类型的委托。 对于具有任何返回类型和参数列表的 Lambda 表达式，存在这样的委托类型：该类型是由该 Lambda 表达式表示的可执行代码的目标类型。<br><code>LambdaExpression</code> 类型包含用于将表达式树转换为可执行代码的 <code>Compile</code> 和 <code>CompileToMethod</code> 成员。 <code>Compile</code> 方法创建委托。 <code>CompileToMethod</code> 方法通过表示表达式树的已编译输出的 IL 更新 <code>MethodBuilder</code> 对象。 请注意，<code>CompileToMethod</code> 仅在完整的桌面框架中可用，不能用于 .NET Core。<br>还可以选择性地提供 <code>DebugInfoGenerator</code>，它将接收生成的委托对象的符号调试信息。 这让你可以将表达式树转换为委托对象，并拥有生成的委托的完整调试信息。</p></blockquote><p>需要注意:<br>通过调用在调用 LambdaExpression.Compile() 时创建的委托来执行代码。 可以在上面进行查看，其中 add.Compile() 返回了一个委托。 通过调用 func() 调用该委托将执行代码。</p><p>该委托表示表达式树中的代码。 可以保留该委托的句柄并在稍后调用它。 不需要在每次想要执行表达式树所表示的代码时编译表达式树。 （请记住，表达式树是不可变的，且在之后编译同一表达式树将创建执行相同代码的委托。）</p><p>在此提醒你不要通过避免不必要的编译调用尝试创建用于提高性能的任何更复杂的缓存机制。 比较两个任意的表达式树，以确定如果它们表示相同的算法，是否也会花费很长的时间来执行。 你可能会发现，通过避免对 LambdaExpression.Compile() 的任何额外调用所节省的计算时间将多于执行代码（该代码确定可导致相同可执行代码的两个不同表达式树）所花费的时间。</p><p>上面是从微软文档复制,我个人认为大意就是说比较两个表达式是否相同的算法大概比直接编译还慢,干脆不要用</p><p>另外要注意的,<br>将 lambda 表达式编译为委托并调用该委托是可对表达式树执行的最简单的操作之一。 但是，即使是执行这个简单的操作，也存在一些必须注意的事项。</p><p>Lambda 表达式将对表达式中引用的任何局部变量创建闭包。 必须保证作为委托的一部分的任何变量在调用 <code>Compile</code> 的位置处和执行结果委托时可用。</p><p>一般情况下，编译器会确保这一点。 但是，如果表达式访问实现 <code>IDisposable</code> 的变量，则代码可能在表达式树仍保留有对象时释放该对象。</p><p>示例</p><pre class=" language-c#"><code class="language-c#">//使用前先引入System.Linq.Expressions命名空间// The expression tree to execute.  BinaryExpression be = Expression.Power(Expression.Constant(2D), Expression.Constant(3D));  // Create a lambda expression.  Expression<Func<double>> le = Expression.Lambda<Func<double>>(be);  // Compile the lambda expression.  Func<double> compiledExpression = le.Compile();  // Execute the lambda expression.  double result = compiledExpression();  // Display the result.  Console.WriteLine(result);  // This code produces the following output:  // 8</code></pre><p>示例解释:</p><p><code>Expression.Constant()</code> 表示声明了一个常量,然后<code>Expression.Power</code>表示一个幂等运算,那么第一行可以理解为声明一个幂运算,参数是<code>2D</code>和<code>3D</code>.更形象一点,翻译成人话就是<code>() =&gt; (2 ** 3)</code> 声明了一个这样的表达式<br>那第二行的理解就很简单了,就是把这个表达式的类型从<code>BinaryExpression</code>转成<code>Expression&lt;T&gt;</code>类型<br>那么要从表达式转成可以使用的<code>Func</code>就要用到<code>Compile</code>方法了,这样就能得到一个<code>Func</code>了<br>以上例子还是很好理解的</p><h2 id="3-怎么修改表达式树呢"><a href="#3-怎么修改表达式树呢" class="headerlink" title="3. 怎么修改表达式树呢"></a>3. 怎么修改表达式树呢</h2><p>表达式树是不可变的，这意味着不能直接对它们进行修改。 若要更改表达式树，必须创建现有表达式树的副本，创建此副本后，进行必要的更改。 可以使用 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.linq.expressions.expressionvisitor">ExpressionVisitor</a> 类遍历现有表达式树，以及复制它访问的每个节点。</p><h3 id="1-首先创建一个类"><a href="#1-首先创建一个类" class="headerlink" title="1. 首先创建一个类"></a>1. 首先创建一个类</h3><pre class=" language-c#"><code class="language-c#">public class AndAlsoModifier : ExpressionVisitor  &#123;      public Expression Modify(Expression expression)      &#123;          return Visit(expression);      &#125;      protected override Expression VisitBinary(BinaryExpression b)      &#123;          if (b.NodeType == ExpressionType.AndAlso)          &#123;              Expression left = this.Visit(b.Left);              Expression right = this.Visit(b.Right);              // Make this binary expression an OrElse operation instead of an AndAlso operation.              return Expression.MakeBinary(ExpressionType.OrElse, left, right, b.IsLiftedToNull, b.Method);          &#125;          return base.VisitBinary(b);      &#125;  &#125;</code></pre><p>这个类继承了<code>ExpressionVisitor</code> 并且重写了表示修改<code>AND</code>运算符的方法,这样,就相当于把<code>and</code>修改成了<code>or</code></p><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h3><pre class=" language-c#"><code class="language-c#">Expression<Func<string, bool>> expr = name => name.Length > 10 && name.StartsWith("G");  Console.WriteLine(expr);  AndAlsoModifier treeModifier = new AndAlsoModifier();  Expression modifiedExpr = treeModifier.Modify((Expression) expr);  Console.WriteLine(modifiedExpr);  /*  This code produces the following output:      name => ((name.Length > 10) && name.StartsWith("G"))      name => ((name.Length > 10) || name.StartsWith("G"))  */</code></pre><p>首先声明了一个表达式,这个表达式是一个带返回值的委托,内容是输入<code>string</code>类型变量,并判断长度是否大于和以G开始.<br>然后调用修改方法,返回了一个新的表达式树,这个新的表达式把and修改成了or</p><h3 id="3-然后是我自己的一些使用心得"><a href="#3-然后是我自己的一些使用心得" class="headerlink" title="3. 然后是我自己的一些使用心得"></a>3. 然后是我自己的一些使用心得</h3><ul><li>先把要生成的lamdba写出来</li><li>开始围绕这个构建表达式树</li></ul><p>比如我有个这样需求, 根据输入的字段查询这个字段== xx, 翻译过来大意就是 w =&gt; w.property == xx , property是属性名,放到平时,我如果预先知道了属性值,那肯定很简单,直接点出属性名就好了,但是这个东西不是预先知道,并且可能有很多个字段要这样操作,那么这时候就是表达式树大派用场的时候了</p><pre class=" language-c#"><code class="language-c#">//首先我们先把lamdba写出来 w => w.property == xx//分析可知,我们需要一个参数 w, 一个属性 property ,一个常量 xx, 还有一个==expressionvar pe = Expression.Parameter(typeof(User), "w");var propertyExpression = Expression.Property(pe,"Name");var constExpression = Expression.Constant("zhangsan");var equalExpression = Expression.Equal(propertyExpression,constExpression);var lamdbaExpression = Expression.Lamdba<Func<User, bool>>(equalExpression, pe); //再调用Complie就可以编译成func了var func = lamdbaExpression.Compile();</code></pre><p>但是一般来说都不可能这么简单就是一个比较相等就行的,还有使用一些方法,比如Contains之类的,<br>这个时候就需要调用方法了, 一般是先获取你要调用方法的mehtodinfo,</p><ul><li>要注意的有,创建 MethodCallExpression</li><li>静态方法,第一个参数一般就是methodinfo,因为不需要实例调用</li><li>实例方法, 第一个参数一般是实例表达式</li><li>扩展方法, this参数位就穿你的扩展对象进去</li><li>泛型方法需要先知道泛型</li></ul><p>大体如此,以后有更多实例再补充</p><h3 id="2022-10-15-更新-增加一个例子-这个就复杂一点"><a href="#2022-10-15-更新-增加一个例子-这个就复杂一点" class="headerlink" title="2022-10-15 更新,增加一个例子,这个就复杂一点"></a>2022-10-15 更新,增加一个例子,这个就复杂一点</h3><pre class=" language-c#"><code class="language-c#">// 要翻译以下这段注释内容,可以在linqPad中直接运行//if (string.IsNullOrEmpty(item.RequestSiteCode))//&#123;//    item.MatchRate++;//&#125; //else if (item.RequestSiteCode == paramsVM.RequestSiteCode)//&#123;//    item.MatchRate += 2;//&#125;//else//&#123;//    isDel = true;//&#125;bool isDel = false;string propertyName = "RequestSiteCode";string matchRateName = "MatchRate";var item = new MatchPeMessageNoticeSetting();var paramsVM = new MatchBestSettingParamsVM();var successDump = Expression.Call(null, typeof(Console).GetMethod("WriteLine", new Type[] &#123; typeof(string) &#125;), Expression.Constant("判断是 True"));var failDump = Expression.Call(null, typeof(Console).GetMethod("WriteLine", new Type[] &#123; typeof(string) &#125;), Expression.Constant("判断是 False"));var elseIfDump = Expression.Call(null, typeof(Console).GetMethod("WriteLine", new Type[] &#123; typeof(string) &#125;), Expression.Constant("判断是 False2"));// 属性 item.xxxvar propertyExpression = Expression.Property(Expression.Constant(item), propertyName);var matchExpression = Expression.Property(Expression.Constant(item), matchRateName);var isDelExpression = Expression.Parameter(typeof(bool).MakeByRefType(), "del");// paramsVM.xxxvar paramsExpression = Expression.Property(Expression.Constant(paramsVM), propertyName);//string.IsNullOrEmptyvar isNullOrEmptyMethod = Expression.Call(null, typeof(string).GetMethod("IsNullOrEmpty", new Type[] &#123; typeof(string) &#125;), propertyExpression);// 第一个判断条件 string.IsNullOrEmpty(item.RequestSiteCode)var firstAssertion = Expression.IsTrue(isNullOrEmptyMethod);// 第二个判断条件 item.RequestSiteCode == paramsVM.RequestSiteCodevar secondAssertion = Expression.IsTrue(Expression.Equal(propertyExpression, paramsExpression));// 第一个分支body item.MatchRate++;var firstBranchBody = Expression.PostIncrementAssign(matchExpression);// 第二个分支body item.MatchRate += 2;var secondBranchBody = Expression.AddAssign(matchExpression, Expression.Constant(2));// 第三个分支body isDel = true;var thridBranchBody = Expression.Assign(isDelExpression, Expression.Constant(true));// 组合条件与分支 if()&#123;&#125;else&#123; if()&#123;&#125;else&#123;&#125; &#125;var secondIf = Expression.IfThenElse(secondAssertion, secondBranchBody, thridBranchBody);var firstIf = Expression.IfThenElse(firstAssertion, firstBranchBody, secondIf);Expression.Lambda<Test>(firstIf, new ParameterExpression[] &#123; isDelExpression &#125;).Compile()(ref isDel);item.MatchRate.Dump();isDel.Dump();public class MatchPeMessageNoticeSetting&#123; public string RequestSiteCode &#123;get;set;&#125; = "a"; public int MatchRate &#123; get; set; &#125; = 0;&#125;public class MatchBestSettingParamsVM&#123; public string RequestSiteCode &#123;get;set;&#125; = "a";&#125;public delegate void Test(ref bool del);</code></pre><p>这里面遇到几个难点</p><ul><li><p>就是<code>else</code>分支中的<code>isDel</code>是外界定义的你不能定义为常量,因为常量是不可能修改的,所以写成了参数,作为参数传入后在修改</p></li><li><p><code>isDel</code>是个值类型, 闯进了的值和外面那个都没关系的, 我又不能<code>return</code>出去,因为其他分支不需要返回, 所以这里使用<code>ref</code>来定义方法参数, 需要使用<code>MakeByRefType</code>方法来定义</p></li><li><p>然后转为委托的时候,最开始是写<code>Action&lt;bool&gt;</code>的,但是爆出了入参类型和实际类型不一致的问题, 后面又一波三折,最终搞明白了换成自定义的<code>delegate</code>就可以了</p></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/expression-trees-execution">执行表达式树</a></p><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/expression-trees/how-to-use-expression-trees-to-build-dynamic-queries">基于运行时状态进行查询</a></p>]]></content>
      
      
      <categories>
          
          <category> c# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c# </tag>
            
            <tag> Expression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery使用Promise封装</title>
      <link href="2021/07/29/study-notes-jquery-2021-07-29-jquery-shi-yong-promise-feng-zhuang/"/>
      <url>2021/07/29/study-notes-jquery-2021-07-29-jquery-shi-yong-promise-feng-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="2021-7-31号更新"><a href="#2021-7-31号更新" class="headerlink" title="2021-7-31号更新"></a>2021-7-31号更新</h2><p>今天突然发现,原来jquery自己实现了一套promise的机制,本身就支持promise,当然不是浏览器那个,此东西位于<code>Deferred</code>中,可以输入<code>console.dir($.Deferred())</code>查看,</p><p>然后可以这篇文章比较好介绍了Jquery中的Promise是个什么东西.</p><blockquote><p><a href="https://www.cnblogs.com/lvdabao/p/jquery-deferred.html">https://www.cnblogs.com/lvdabao/p/jquery-deferred.html</a></p></blockquote><p>学无止境,</p><hr><blockquote><p>在我们日常的前端请求中,我们可能会经常使用ajax,这也不是什么新鲜的技术,我们一般会使用一些框架封装的,比如jQuery,axios,vue-resource之类的.在这个公司,老是出现这种情况,好几个请求,有些请求要等前面几个完成,有些请求要上一个请求完成之后,根据返回值判断怎么做,一环套一环的,各种callback,回调函数,🤢,于是,打算使用Promise来优化下调用,Primose我就不介绍了,只是会用,原理没有深入.</p></blockquote><p>废话不多说,直接上代码</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//封装一个基于promise的ajax请求</span>jQuery<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置 apDiv</span>    ajaxPromise<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> url<span class="token punctuation">,</span> type<span class="token punctuation">,</span> data<span class="token punctuation">,</span> global <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> option<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                url<span class="token punctuation">:</span> url<span class="token punctuation">,</span>                type<span class="token punctuation">:</span> type<span class="token punctuation">,</span>                data<span class="token punctuation">:</span> data<span class="token punctuation">,</span>                global<span class="token punctuation">:</span> global<span class="token punctuation">,</span>                success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    getPromise<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> global <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> option<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                url<span class="token punctuation">:</span> url<span class="token punctuation">,</span>                data<span class="token punctuation">:</span> data<span class="token punctuation">,</span>                global<span class="token punctuation">:</span> global<span class="token punctuation">,</span>                success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    postPromise<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> global <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> option<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                url<span class="token punctuation">:</span> url<span class="token punctuation">,</span>                data<span class="token punctuation">:</span> data<span class="token punctuation">,</span>                global<span class="token punctuation">:</span> global<span class="token punctuation">,</span>                success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                error<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li><p>主要有两个东西,第一就是扩展jquery,然后调用就可以使用 <code>$.ajaxPromise()</code> 这样子的方式来调用,然后参数使用了解构来获取,global可以忽略,是我项目inject使用的配置,用来配置loading效果的</p></li><li><p>第二个就是 Promise了,这个就不多说了,在成功和失败的回调中调用对应的resolve和reject就行了,easy</p></li></ol><p>今天的内容就到这里,日后要多记录,好记性不如烂笔头</p>]]></content>
      
      
      <categories>
          
          <category> jquery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jquery </tag>
            
            <tag> Promise </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window10 LTSC 更新版本</title>
      <link href="2021/07/12/other-notes-2021-07-12-window10-ltsc-geng-xin-ban-ben/"/>
      <url>2021/07/12/other-notes-2021-07-12-window10-ltsc-geng-xin-ban-ben/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司采购的电脑使用了windows 10 LTSC版本,LTSC版本虽然稳定,但是对于我来说想要安装WSL2和window terminal的用户来说就不太合适了,因为这两个都有window版本的要求<br>以当前的时间2021-7-12来看,最新的LTSC的内部版本其实还是1809,要使用以上两个功能,必须要1903或以上,所以,为了能使用,我必须升级window版本才行</p><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><p>这条升级之路可以说是非常不顺利,由于登录账号需要加入域,域账号的很多设置都是不允许你更新的,比如说管理员设置了组策略不给更新,windows update服务没有开启等等.下面我罗列下我还记得的问题,供各位参考</p><h2 id="第一次尝试-企图使用window-update直接更新大版本"><a href="#第一次尝试-企图使用window-update直接更新大版本" class="headerlink" title="第一次尝试, 企图使用window update直接更新大版本"></a>第一次尝试, 企图使用window update直接更新大版本</h2><p>很可惜,这样是不行,只能更新1809版本里面的各种小更新</p><h2 id="使用window易升"><a href="#使用window易升" class="headerlink" title="使用window易升"></a>使用window易升</h2><p>由于我这个是企业版+LTSC,这个直接堵死这条路,易升是无法升级此版本的,一开始我以为是加入域的问题,结果手贱退出了域,然后直接登录不进去系统(我无法使用管理员账号登录)</p><h2 id="使用MediaCreationTool工具"><a href="#使用MediaCreationTool工具" class="headerlink" title="使用MediaCreationTool工具"></a>使用MediaCreationTool工具</h2><p>这个工具是可以为你创建安装合适版本的window,但是我再第一次尝试的时候由于只是想测试下能不能保留我的文件和应用升级,结果不行,后面百度才知道,是需要你升级的目标的系统和你当前的系统都是同一个版本才行(比如说企业版升级到企业版;专业版升级到专业版),最坑地是我第二次打开,就直接报错了,醉了,我也不知道什么原因,折腾许久,哎,此路不通.</p><h2 id="直接安装iso镜像-成功"><a href="#直接安装iso镜像-成功" class="headerlink" title="直接安装iso镜像(成功)"></a>直接安装iso镜像(成功)</h2><p>为了能保留文件和应用,我需要将LTSC的版本号改成专业版,在这里网上的资料很多都是复制的,垃圾,比如说有个是Professional-x64.cab去改的,我试了没有用,或者读者你可以自己试试先,</p><p>然后我在知乎某篇文章找到了神器,叫window版本转换器的东西,一键傻瓜式转换,不过注意此转换不是永久,我重启之后又是企业版LTSC了,而且这个应用也提了,会把你已激活的变成未激活,这个是需要注意的,至于下载地址,我就不放了,都是百度出来的,我下载的文件是<code>Windows10BBYJZHGJ_V1.0_XiTongZhiJia</code>,你可以参考下</p><p>然后转换系统之后,我在msdn i tell you找到了那里最新的1909系统,下载下来,打开iso,双击exe,安装,这次就可以保留我的文件和应用了,当然,为了免责声明还是要提醒你先保存好你的文件和应用.</p><p>漫长的等待之后,安装完成,系统版本1909,专业版,完美,但是我还想更新到2004,所以,易升再次出场,这次就很顺利,没有其他问题,利索地就升级到2004,至于要不要升级到21h1,就看各位小伙伴怎么想了,反正2004已经够我开发用了,我就不折腾了.</p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> win </tag>
            
            <tag> windows10 </tag>
            
            <tag> win10 </tag>
            
            <tag> update </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CLR via 第4章 类型基础</title>
      <link href="2021/06/25/read-notes-clr-via-2021-06-25-clr-via-yue-du-wen-da-1/"/>
      <url>2021/06/25/read-notes-clr-via-2021-06-25-clr-via-yue-du-wen-da-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>by the way 此文章主要用来记录我阅读过程中记下应该写下来,或者说应该要牢记的知识点</p></blockquote><hr><h1 id="第4章-类型基础"><a href="#第4章-类型基础" class="headerlink" title="第4章: 类型基础"></a>第4章: 类型基础</h1><ol><li>所有类型都是从 <code>System.Object</code> 派生</li></ol><p>新建一个类型,就算不写继承于谁,默认都是继承了 <code>Object</code><br><code>Object</code> 类中包含了 <code>Equals</code> <code>GetHashCode</code> <code>ToString</code> <code>GetType</code> 等几个方法,所以你才能在一般的类中使用这些方法.</p><ol start="2"><li>类型转换</li></ol><blockquote><p>CLR最重要的特性之一就是类型安全, 在运行时,clr总能知道这个对象的类型是什么,调用 GetType 方法就知道,而且GetType不是虚方法,所以一个类型不可能伪装成为另一个类型</p></blockquote><blockquote><p>c#不要求任何特殊语法即可将对象转换为它的任意基类型,因为向基转换被认为是一种安全的隐式转换, 但是相反的,由基类型转向派生类型时c#要求开发人员要进行显示转换,因为这种转换有可能会失败</p></blockquote><ol start="3"><li>使用<code>is</code> 和 <code>as</code> 来转换类型</li></ol><p>可以使用 <code>is</code> 来进行类型转换,注意: <code>is</code> 操作符永远不会抛出异常 只会返回<code>true</code> 和 <code>false</code></p><p>如果对象引用是 <code>null</code> ,这样总是会返回<code>false</code>,因为没有可以检查类型的对象</p><pre class=" language-c#"><code class="language-c#">if(o is Employee)&#123;    Employee e = (Employee) o;&#125;</code></pre><p>可以看出以上的代码检查了两次o的类型,对性能很不好,所以c#专门提供了as操作符,目的就是简化这种代码</p><p><code>as</code>可以核实是否兼容<code>Employee</code>类型,同时会返回一个<code>Employee</code>的非<code>null</code>引用.当然如果o不能转型,结果就会是<code>null</code>;</p><ol start="4"><li>clr调用一个方法的过程,详见书本108页,由于没有图床,所以没有解析了<br>所以就直接讲下我的理解</li></ol><pre class=" language-c#"><code class="language-c#">void M1()&#123;    string name = "Joe";    M2(name);    ...    return;&#125;void M2(string s)&#123;    int length = s.Length;    int tally;    ...    return;&#125;</code></pre><ul><li>首先执行m1方法,读到name变量 会把name压栈</li><li>然后执行M2,这时候会创建一个m2的局部变量块,把s压栈</li><li>然后把m2的return压栈,使得被调用的方法结束后可以返回值该位置</li><li>然后m2方法也会为length和tally在栈中创建位置,最后调用完回到上面的返回位置</li></ul><p>如果使用了引用类型比如说自定义的一个class,这时候就不仅在栈开辟空间了,还会在托管堆里面开辟空间</p><p>假设有两个复杂类型 <code>Manager</code> 和 <code>Employee</code>,<br>首先clr会为方法中的所有局部变量都初始化为<code>null</code>或者<code>0</code>,如果代码企图访问未显式初始化的局部变量,c#就会报告空引用异常,</p><p>像 <code>Manager</code> 这种复杂类型,会在托管堆中创建一个实例,里面会有几个东西</p><ol><li>类型对象指针</li><li>同步块索引</li><li>静态字段</li><li>自定义的字段</li><li>方法表</li></ol><blockquote><p>类型对象指针：指向类型对象存储的地址，假如有一个类型Person,它在堆中有一块区域存储它内部的字段和成员以及两个额外成员（类型对象指针、 同步块索引 ），类型对象的类型对象指针指向的是System.Type的地址。<br>因为Person类型在内存中相对于System.Type也是作为一个对象存在的，System.Type类型也是一个类型对象，它的类型对象指针指向本身；<br>实例化一个Person对象，Person p = new Person(); p对象在内存堆中也分配一块区域存储它内部的字段和成员以及两个额外成员（类型对象指针、 同步块索引 ），p的类型对象指针指向Person类型在堆中的地址。<br>同步块索引：先说一下同步块，.NET团队在设计基本框架时充分考虑了线程同步的问题，其结果就是.NET为每一个堆内对象都提供了支持线程同步的功能，这就是同步机制的雏形【参考：<a href="http://genwoxuedotnet.blog.51cto.com/1852748/504107">http://genwoxuedotnet.blog.51cto.com/1852748/504107</a>】<br>但是对每个堆内对象都分配同步块有一个较大的弊端，就是这样增大了内存的消耗。在一般的系统中，需要同步机制支持的对象可能只占少数，这样对于大多数对象来说，一个同步块的内存消耗就完全被浪费了。鉴于这一点，.NET框架采用了一种折中的办法，就是实际只为每个堆内对象分配一个同步索引，该索引中只保存一个表明数组内索引的整数。.NET在加载时会新建一个同步块数组，当某个对象需要被同步时，.NET会为其分配一个同步块，并且把该同步块在同步块数组中的索引加入该对象的同步块索引中。<br>同步块机制包含如下的几点：<br>· 在.NET被加载时初始化同步块数组。<br>· 每一个被分配在堆上的对象都会包含两个额外的字段，其中一个存储类型指针，而另外一个就是同步块索引，初始时被赋值为-1。<br>· 当一个线程试图使用该对象进入同步时，会检查该对象的同步索引。如果索引为负数，则会在同步块数组中寻找或者新建一个同步块，并且把同步块的索引值写入该对象的同步索引中。如果该对象的同步索引不为负值，则找到该对象的同步块并且检查是否有其他线程在使用该同步块，如果有则进入等待状态，如果没有则申明使用该同步块。<br>以上引用来源于 <a href="https://www.cnblogs.com/dawenyang/p/7520263.html">https://www.cnblogs.com/dawenyang/p/7520263.html</a></p></blockquote><p>clr调用一个非虚的实例方法的是否, jit会找到与”发出调用的那个变量(e)的类型(Employee)”对应的类型对象.但是如果Employee没找到,那么jit就会回溯层次结构,一直回溯到Object,并在沿途的每个类型中查找该方法.之所以能这样回溯,是<strong>因为每个类型对象都有个字段引用了它的基类型</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/06/25/hello-world/"/>
      <url>2021/06/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>dotnetcore控制台使用依赖注入和logger和configuration</title>
      <link href="2020/10/13/study-notes-dotnetcore-2020-10-13-dotnetcore-kong-zhi-tai-shi-yong-yi-lai-zhu-ru-he-logger-he-configuration/"/>
      <url>2020/10/13/study-notes-dotnetcore-2020-10-13-dotnetcore-kong-zhi-tai-shi-yong-yi-lai-zhu-ru-he-logger-he-configuration/</url>
      
        <content type="html"><![CDATA[<h1 id="dotnet-core-3-1在控制台使用依赖注入，logger和configuration"><a href="#dotnet-core-3-1在控制台使用依赖注入，logger和configuration" class="headerlink" title="dotnet core 3.1在控制台使用依赖注入，logger和configuration"></a>dotnet core 3.1在控制台使用依赖注入，logger和configuration</h1><ol><li><p>添加<code>IServiceCollection</code></p><pre class=" language-c#"><code class="language-c#">//会用上的命名空间using Microsoft.Extensions.DependencyInjection;IServiceCollection services = new ServiceCollection();// 然后就可以像在asp.net core 里面的 注入了</code></pre></li></ol><ol start="2"><li><p>创建<code>servicesProvider</code>实列</p><pre class=" language-c#"><code class="language-c#">//创建服务 var servicesProvider = services.BuildServiceProvider();</code></pre></li></ol><ol start="3"><li>在控制台中获取注入</li></ol><pre class=" language-c#"><code class="language-c#">var airServices = servicesProvider.GetService<AirWalkServices>();</code></pre><ol start="4"><li>在其他文件中注入和asp.net core同理，在构造函数中注入即可</li><li>使用log</li></ol><pre class=" language-c#"><code class="language-c#">//启用日志,记得是在创建servicesProvider实列之前services.AddLogging(builder => builder.AddConsole());//使用loggervar logger = servicesProvider.GetService<ILoggerFactory>().CreateLogger<Program>();logger.LogInformation("start app");//其他文件中使用直接注入即可</code></pre><blockquote><p>注意，这里的 <code>builder.AddConsole()</code>可能垃圾VS没有提示，需要安装这个包</p><p><code>Microsoft.Extensions.Logging.Console</code></p></blockquote><p>如果需要使用其它log，把log记录到日志，数据库，建议使用第三方log</p><blockquote><p>例子：<a href="https://mp.weixin.qq.com/s/rg3JbwPY7zNx6UPKEBIIuA">https://mp.weixin.qq.com/s/rg3JbwPY7zNx6UPKEBIIuA</a></p></blockquote><ol start="6"><li>使用config</li></ol><p>需要引用这个几个包，VS大概率又又又没提示</p><blockquote><pre><code>Microsoft.Extensions.Configuration.FileExtensionsMicrosoft.Extensions.Configuration.Json</code></pre></blockquote><pre class=" language-c#"><code class="language-c#">IConfiguration configuration = new ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory())                    .AddJsonFile("appsettings.json")                    .Build(); services.AddSingleton(configuration);//Directory.GetCurrentDirectory()这个方法根据微软文档的说法，如果是windows服务的程序，获取的是c盘system文件夹，暂时找不到链接了</code></pre><p>使用同直接注入就行</p><pre class=" language-c#"><code class="language-c#">private readonly IConfiguration _configuration;public Class1(IConfiguration configuration)&#123;    _configuration = configuration;&#125;</code></pre><p>同理也可以使用其他的json文件</p><pre class=" language-c#"><code class="language-c#">IConfiguration tempConfig = new ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory())                    .AddJsonFile("你的json文件")                    .Build();//然后我把它注入到了这个TemplateDto类services.Configure<TemplateDto>(tempConfig);</code></pre><p>调用</p><pre class=" language-c#"><code class="language-c#">private readonly IOptions<TemplateDto> _options;public Class1(IOptions<TemplateDto> options)&#123;    _options = options;&#125;</code></pre><p>以上，完成</p><h2 id="2023-12-7-update"><a href="#2023-12-7-update" class="headerlink" title="2023/12/7 update"></a>2023/12/7 update</h2><p>其实以上的这些操作很多冗余的,我们只需要引入<code>Microsoft.Extensions.Hosting</code>即可,这个包集成了依赖注入,读取json配置,日志,选项,大部分情况都够用了</p><p>如果你想更复杂一点,可以使用abp cli提供的控制台模板,那个也使用了上面的包,但是引入了<code>abp</code>的模块化, 对于熟悉<code>abp</code>的人也很好用</p>]]></content>
      
      
      <categories>
          
          <category> dotnetcore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dotnetcore </tag>
            
            <tag> .netcore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c#对文件进行压缩</title>
      <link href="2020/10/13/study-notes-c-2020-10-13-c-dui-wen-jian-jin-xing-ya-suo/"/>
      <url>2020/10/13/study-notes-c-2020-10-13-c-dui-wen-jian-jin-xing-ya-suo/</url>
      
        <content type="html"><![CDATA[<h1 id="c-压缩文件成zip"><a href="#c-压缩文件成zip" class="headerlink" title="c# 压缩文件成zip"></a>c# 压缩文件成zip</h1><blockquote><p>本篇资料引用  <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.io.compression.zipfile?view=netcore-3.1">微软文档</a></p><blockquote><p>真的建议大家过看看微软的官方文档，啥都有</p></blockquote></blockquote><p>c# 内置了几个处理压缩的类，详细见上面的链接，都是在<code>system.IO.Compression</code>这个命名空间下</p><p><code>zipfile</code>使用心得，都是从目录入手，对目录文件进行压缩，也就是说要先有文件，才能压缩，应该有对<code>byte[]</code>和<code>stream</code>直接进行压缩的类，但是我没有找到</p><p>官方列子</p><pre class=" language-c#"><code class="language-c#">using System;using System.IO.Compression;class Program&#123;    static void Main(string[] args)    &#123;        string startPath = @".\start";        string zipPath = @".\result.zip";        string extractPath = @".\extract";        ZipFile.CreateFromDirectory(startPath, zipPath);        ZipFile.ExtractToDirectory(zipPath, extractPath);    &#125;&#125;</code></pre><p>很明显的用法，<code>CreateFromDirectory</code> 方法就是从这个<code>startPath</code>目录创建压缩文件，<code>zipPath</code>就是要输出的目录，<em>注意：这两个最好在不同的目录，否则会出现文件被占用的错误</em></p><p>ExtractToDirectory 同理相反着用</p><p>附上我当时写的，因为本意是将byte[]直接压缩的，但是，出来的效果就是把.xlsx的后缀名换了个名字，无奈之下只能这样先保存了在压缩，再让浏览器下载</p><pre class=" language-c#"><code class="language-c#">        /// <summary>        /// 将byte压缩        /// </summary>        /// <param name="fileName">文件保存的名字</param>        /// <param name="zipFileNmae">压缩文件的名字</param>        /// <param name="sourceByte">字节</param>        /// <param name="webrootPath">wwwroot目录</param>        /// <returns>压缩后的文件路劲</returns>        public static string CompressToZIP(string fileName,string zipFileNmae,byte[] sourceByte,string webrootPath)        &#123;            var basePath = webrootPath;            var tempFolder = "temp";            var xlsxTempFolder = "Excel";            var zipTempFolder = "Zip";            var tempXlsxPath = Path.Combine(basePath, tempFolder, xlsxTempFolder);            var tempZipPath = Path.Combine(basePath, tempFolder, zipTempFolder);            if (!Directory.Exists(tempXlsxPath))            &#123;                Directory.CreateDirectory(tempXlsxPath);            &#125;            if (!Directory.Exists(tempZipPath))            &#123;                Directory.CreateDirectory(tempZipPath);            &#125;            DeleteDirAllFile(tempXlsxPath);            DeleteDirAllFile(tempZipPath);            var filePath = Path.Combine(tempXlsxPath, fileName);            var zipFilePath = Path.Combine(tempZipPath, zipFileNmae);            SaveTempExcel(sourceByte, filePath);            ZipFile.CreateFromDirectory(tempXlsxPath, zipFilePath, System.IO.Compression.CompressionLevel.Optimal, false);            return zipFilePath;        &#125;        /// <summary>        /// 将byte保存为文件        /// </summary>        /// <param name="buff"></param>        /// <param name="savepath"></param>        public static void SaveTempExcel(byte[] buff, string savepath)        &#123;            if (System.IO.File.Exists(savepath))            &#123;                System.IO.File.Delete(savepath);            &#125;            FileStream fs = new FileStream(savepath, FileMode.Create);            BinaryWriter bw = new BinaryWriter(fs);            bw.Write(buff, 0, buff.Length);            bw.Close();            fs.Close();        &#125;        /// <summary>        /// 将文件转换为byte数组        /// </summary>        /// <param name="path">文件地址</param>        /// <returns>转换后的byte数组</returns>        public static byte[] File2Bytes(string path)        &#123;            if (!System.IO.File.Exists(path))            &#123;                return new byte[0];            &#125;            FileInfo fi = new FileInfo(path);            byte[] buff = new byte[fi.Length];            FileStream fs = fi.OpenRead();            fs.Read(buff, 0, Convert.ToInt32(fs.Length));            fs.Close();            return buff;        &#125;        /// <summary>        /// 删除文件夹下的所有文件        /// </summary>        /// <param name="dirRoot">删除path</param>        public static void DeleteDirAllFile(string dirRoot)        &#123;            DirectoryInfo aDirectoryInfo = new DirectoryInfo(dirRoot);            FileInfo[] files = aDirectoryInfo.GetFiles("*.*", SearchOption.AllDirectories);            foreach (FileInfo f in files)            &#123;                File.Delete(f.FullName);            &#125;        &#125;</code></pre><blockquote><p>理论上应该还是直接返回流下载，返回压缩的流最好，因为我在搜索过程中，发现有些人的生产环境没有创建文件的权限的</p></blockquote><p>文章很简单，能力有限，请有更好的想法的，欢迎留言</p>]]></content>
      
      
      <categories>
          
          <category> c# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
